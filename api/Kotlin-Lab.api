public final class SearchRequestKt {
	public static final field INSTANCE LSearchRequestKt;
}

public final class SearchRequestKt$Dsl {
	public static final field Companion LSearchRequestKt$Dsl$Companion;
	public synthetic fun <init> (LSearchRequestOuterClass$SearchRequest$Builder;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final synthetic fun _build ()LSearchRequestOuterClass$SearchRequest;
	public final fun clearPageNumber ()V
	public final fun clearQuery ()V
	public final fun clearResultPerPage ()V
	public final fun getPageNumber ()I
	public final fun getQuery ()Ljava/lang/String;
	public final fun getResultPerPage ()I
	public final fun setPageNumber (I)V
	public final fun setQuery (Ljava/lang/String;)V
	public final fun setResultPerPage (I)V
}

public final class SearchRequestKt$Dsl$Companion {
	public final synthetic fun _create (LSearchRequestOuterClass$SearchRequest$Builder;)LSearchRequestKt$Dsl;
}

public final class SearchRequestKtKt {
	public static final fun -initializesearchRequest (Lkotlin/jvm/functions/Function1;)LSearchRequestOuterClass$SearchRequest;
	public static final fun copy (LSearchRequestOuterClass$SearchRequest;Lkotlin/jvm/functions/Function1;)LSearchRequestOuterClass$SearchRequest;
}

public final class SearchRequestOuterClass {
	public static fun getDescriptor ()Lcom/google/protobuf/Descriptors$FileDescriptor;
	public static fun registerAllExtensions (Lcom/google/protobuf/ExtensionRegistry;)V
	public static fun registerAllExtensions (Lcom/google/protobuf/ExtensionRegistryLite;)V
}

public final class SearchRequestOuterClass$SearchRequest : com/google/protobuf/GeneratedMessage, SearchRequestOuterClass$SearchRequestOrBuilder {
	public static final field PAGE_NUMBER_FIELD_NUMBER I
	public static final field QUERY_FIELD_NUMBER I
	public static final field RESULT_PER_PAGE_FIELD_NUMBER I
	public fun equals (Ljava/lang/Object;)Z
	public static fun getDefaultInstance ()LSearchRequestOuterClass$SearchRequest;
	public fun getDefaultInstanceForType ()LSearchRequestOuterClass$SearchRequest;
	public synthetic fun getDefaultInstanceForType ()Lcom/google/protobuf/Message;
	public synthetic fun getDefaultInstanceForType ()Lcom/google/protobuf/MessageLite;
	public static final fun getDescriptor ()Lcom/google/protobuf/Descriptors$Descriptor;
	public fun getPageNumber ()I
	public fun getParserForType ()Lcom/google/protobuf/Parser;
	public fun getQuery ()Ljava/lang/String;
	public fun getQueryBytes ()Lcom/google/protobuf/ByteString;
	public fun getResultPerPage ()I
	public fun getSerializedSize ()I
	public fun hashCode ()I
	public final fun isInitialized ()Z
	public static fun newBuilder ()LSearchRequestOuterClass$SearchRequest$Builder;
	public static fun newBuilder (LSearchRequestOuterClass$SearchRequest;)LSearchRequestOuterClass$SearchRequest$Builder;
	public fun newBuilderForType ()LSearchRequestOuterClass$SearchRequest$Builder;
	public synthetic fun newBuilderForType ()Lcom/google/protobuf/Message$Builder;
	public synthetic fun newBuilderForType ()Lcom/google/protobuf/MessageLite$Builder;
	public static fun parseDelimitedFrom (Ljava/io/InputStream;)LSearchRequestOuterClass$SearchRequest;
	public static fun parseDelimitedFrom (Ljava/io/InputStream;Lcom/google/protobuf/ExtensionRegistryLite;)LSearchRequestOuterClass$SearchRequest;
	public static fun parseFrom (Lcom/google/protobuf/ByteString;)LSearchRequestOuterClass$SearchRequest;
	public static fun parseFrom (Lcom/google/protobuf/ByteString;Lcom/google/protobuf/ExtensionRegistryLite;)LSearchRequestOuterClass$SearchRequest;
	public static fun parseFrom (Lcom/google/protobuf/CodedInputStream;)LSearchRequestOuterClass$SearchRequest;
	public static fun parseFrom (Lcom/google/protobuf/CodedInputStream;Lcom/google/protobuf/ExtensionRegistryLite;)LSearchRequestOuterClass$SearchRequest;
	public static fun parseFrom (Ljava/io/InputStream;)LSearchRequestOuterClass$SearchRequest;
	public static fun parseFrom (Ljava/io/InputStream;Lcom/google/protobuf/ExtensionRegistryLite;)LSearchRequestOuterClass$SearchRequest;
	public static fun parseFrom (Ljava/nio/ByteBuffer;)LSearchRequestOuterClass$SearchRequest;
	public static fun parseFrom (Ljava/nio/ByteBuffer;Lcom/google/protobuf/ExtensionRegistryLite;)LSearchRequestOuterClass$SearchRequest;
	public static fun parseFrom ([B)LSearchRequestOuterClass$SearchRequest;
	public static fun parseFrom ([BLcom/google/protobuf/ExtensionRegistryLite;)LSearchRequestOuterClass$SearchRequest;
	public static fun parser ()Lcom/google/protobuf/Parser;
	public fun toBuilder ()LSearchRequestOuterClass$SearchRequest$Builder;
	public synthetic fun toBuilder ()Lcom/google/protobuf/Message$Builder;
	public synthetic fun toBuilder ()Lcom/google/protobuf/MessageLite$Builder;
	public fun writeTo (Lcom/google/protobuf/CodedOutputStream;)V
}

public final class SearchRequestOuterClass$SearchRequest$Builder : com/google/protobuf/GeneratedMessage$Builder, SearchRequestOuterClass$SearchRequestOrBuilder {
	public fun build ()LSearchRequestOuterClass$SearchRequest;
	public synthetic fun build ()Lcom/google/protobuf/Message;
	public synthetic fun build ()Lcom/google/protobuf/MessageLite;
	public fun buildPartial ()LSearchRequestOuterClass$SearchRequest;
	public synthetic fun buildPartial ()Lcom/google/protobuf/Message;
	public synthetic fun buildPartial ()Lcom/google/protobuf/MessageLite;
	public fun clear ()LSearchRequestOuterClass$SearchRequest$Builder;
	public synthetic fun clear ()Lcom/google/protobuf/AbstractMessage$Builder;
	public synthetic fun clear ()Lcom/google/protobuf/GeneratedMessage$Builder;
	public synthetic fun clear ()Lcom/google/protobuf/Message$Builder;
	public synthetic fun clear ()Lcom/google/protobuf/MessageLite$Builder;
	public fun clearPageNumber ()LSearchRequestOuterClass$SearchRequest$Builder;
	public fun clearQuery ()LSearchRequestOuterClass$SearchRequest$Builder;
	public fun clearResultPerPage ()LSearchRequestOuterClass$SearchRequest$Builder;
	public fun getDefaultInstanceForType ()LSearchRequestOuterClass$SearchRequest;
	public synthetic fun getDefaultInstanceForType ()Lcom/google/protobuf/Message;
	public synthetic fun getDefaultInstanceForType ()Lcom/google/protobuf/MessageLite;
	public static final fun getDescriptor ()Lcom/google/protobuf/Descriptors$Descriptor;
	public fun getDescriptorForType ()Lcom/google/protobuf/Descriptors$Descriptor;
	public fun getPageNumber ()I
	public fun getQuery ()Ljava/lang/String;
	public fun getQueryBytes ()Lcom/google/protobuf/ByteString;
	public fun getResultPerPage ()I
	public final fun isInitialized ()Z
	public fun mergeFrom (LSearchRequestOuterClass$SearchRequest;)LSearchRequestOuterClass$SearchRequest$Builder;
	public fun mergeFrom (Lcom/google/protobuf/CodedInputStream;Lcom/google/protobuf/ExtensionRegistryLite;)LSearchRequestOuterClass$SearchRequest$Builder;
	public synthetic fun mergeFrom (Lcom/google/protobuf/CodedInputStream;Lcom/google/protobuf/ExtensionRegistryLite;)Lcom/google/protobuf/AbstractMessage$Builder;
	public synthetic fun mergeFrom (Lcom/google/protobuf/CodedInputStream;Lcom/google/protobuf/ExtensionRegistryLite;)Lcom/google/protobuf/AbstractMessageLite$Builder;
	public synthetic fun mergeFrom (Lcom/google/protobuf/CodedInputStream;Lcom/google/protobuf/ExtensionRegistryLite;)Lcom/google/protobuf/Message$Builder;
	public synthetic fun mergeFrom (Lcom/google/protobuf/CodedInputStream;Lcom/google/protobuf/ExtensionRegistryLite;)Lcom/google/protobuf/MessageLite$Builder;
	public fun mergeFrom (Lcom/google/protobuf/Message;)LSearchRequestOuterClass$SearchRequest$Builder;
	public synthetic fun mergeFrom (Lcom/google/protobuf/Message;)Lcom/google/protobuf/AbstractMessage$Builder;
	public synthetic fun mergeFrom (Lcom/google/protobuf/Message;)Lcom/google/protobuf/Message$Builder;
	public fun setPageNumber (I)LSearchRequestOuterClass$SearchRequest$Builder;
	public fun setQuery (Ljava/lang/String;)LSearchRequestOuterClass$SearchRequest$Builder;
	public fun setQueryBytes (Lcom/google/protobuf/ByteString;)LSearchRequestOuterClass$SearchRequest$Builder;
	public fun setResultPerPage (I)LSearchRequestOuterClass$SearchRequest$Builder;
}

public abstract interface class SearchRequestOuterClass$SearchRequestOrBuilder : com/google/protobuf/MessageOrBuilder {
	public abstract fun getPageNumber ()I
	public abstract fun getQuery ()Ljava/lang/String;
	public abstract fun getQueryBytes ()Lcom/google/protobuf/ByteString;
	public abstract fun getResultPerPage ()I
}

public final class dev/shtanko/algorithms/ConstantsKt {
	public static final field ALPHABET_LETTERS_COUNT I
	public static final field ASCII_A C
	public static final field BYTE I
	public static final field DECIMAL I
	public static final field DOT C
	public static final field EPSILON D
	public static final field E_9 D
	public static final field HALF F
	public static final field HALF_OF_BYTE I
	public static final field HEXADECIMAL I
	public static final field INF D
	public static final field MILLISECOND J
	public static final field MOD I
	public static final field NANO D
	public static final field OCTAL I
	public static final field QUEEN C
	public static final field SHUFFLE_CONST I
	public static final field THREE_HALVES F
	public static final field TOLERANCE D
	public static final field VOWELS Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/BFS : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/Backtracking : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/BellmanFord : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/BinarySearch : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/Bitwise : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/BottomUpDP : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/BoyerMoore : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/BranchAndBound : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/BruteForce : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/BruteForceOptimized : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/DFS : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/DP : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/Dijkstra : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/DivideAndConquer : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/FloydWarshall : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/Greedy : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/Hashing : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/Heuristic : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/Iterative : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/KnuthMorrisPratt : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/KruskalsAlgorithm : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/Math : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/MatrixExponentiation : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/Memoization : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/NaiveStringMatching : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/OnePass : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/PrefixSum : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/PrimsAlgorithm : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/RabinKarp : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/Recursive : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/RecursiveOptimized : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/SimulatedAnnealing : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/SlidingWindow : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/Sort : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/StraightForward : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/SuffixSum : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/TailRec : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/TarjansAlgorithm : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/TopDownDP : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/Trie : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/TwoPointers : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/UnionFind : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/level/Easy : java/lang/annotation/Annotation {
	public abstract fun link ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/level/Hard : java/lang/annotation/Annotation {
	public abstract fun link ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/annotations/level/Medium : java/lang/annotation/Annotation {
	public abstract fun link ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/arrays/IntArrayExamplesKt {
	public static final fun reverse ([I)V
}

public abstract interface class dev/shtanko/algorithms/backtracking/NQueens {
	public abstract fun invoke (I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/backtracking/NQueensSolution : dev/shtanko/algorithms/backtracking/NQueens {
	public fun <init> ()V
	public fun invoke (I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/basic/Arithmetic {
	public static final field INSTANCE Ldev/shtanko/algorithms/basic/Arithmetic;
	public final fun divisible (II)Z
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public final fun isEven (I)Z
	public final fun isOdd (I)Z
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/bitwise/BinaryRepresentationKt {
	public static final fun bin (J)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/bitwise/BitwiseIntArrayKt {
	public static final fun findUnique ([I)I
}

public final class dev/shtanko/algorithms/bitwise/BitwiseIntKt {
	public static final fun clearBit (II)I
	public static final fun countOnes (I)I
	public static final fun invertBits (I)I
	public static final fun isPowerOfTwo (I)Z
	public static final fun leftShift (II)I
	public static final fun rightShift (II)I
	public static final fun rightmostOneBit (I)I
	public static final fun swap (Lkotlin/Pair;)Lkotlin/Pair;
	public static final fun toggleBit (II)I
}

public final class dev/shtanko/algorithms/bitwise/EvenOrOddKt {
	public static final fun evenOrOdd (I)Z
}

public final class dev/shtanko/algorithms/bitwise/FastInverseSquareRootKt {
	public static final fun fastInverseSquareRoot (F)F
}

public final class dev/shtanko/algorithms/codility/FindBinaryGapKt {
	public static final fun findBinaryGap (I)I
}

public abstract interface class dev/shtanko/algorithms/codingbat/array1/FirstLast6 {
	public abstract fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/codingbat/array1/FirstLast6Array : dev/shtanko/algorithms/codingbat/array1/FirstLast6 {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public abstract interface class dev/shtanko/algorithms/codingbat/recursion1/AllStar {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/recursion1/AllStarIterative : dev/shtanko/algorithms/codingbat/recursion1/AllStar {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/recursion1/AllStarMap : dev/shtanko/algorithms/codingbat/recursion1/AllStar {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/recursion1/AllStarRecursive : dev/shtanko/algorithms/codingbat/recursion1/AllStar {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/codingbat/recursion1/Array11 {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/Array11Iterative : dev/shtanko/algorithms/codingbat/recursion1/Array11 {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/Array11Recursive : dev/shtanko/algorithms/codingbat/recursion1/Array11 {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/codingbat/recursion1/Array220 {
	public abstract fun invoke ([II)Z
}

public final class dev/shtanko/algorithms/codingbat/recursion1/Array220Iterative : dev/shtanko/algorithms/codingbat/recursion1/Array220 {
	public fun <init> ()V
	public fun invoke ([II)Z
}

public final class dev/shtanko/algorithms/codingbat/recursion1/Array220Recursive : dev/shtanko/algorithms/codingbat/recursion1/Array220 {
	public fun <init> ()V
	public fun invoke ([II)Z
}

public final class dev/shtanko/algorithms/codingbat/recursion1/Array220Recursive2 : dev/shtanko/algorithms/codingbat/recursion1/Array220 {
	public fun <init> ()V
	public fun invoke ([II)Z
}

public abstract interface class dev/shtanko/algorithms/codingbat/recursion1/Array6 {
	public abstract fun invoke ([II)Z
}

public final class dev/shtanko/algorithms/codingbat/recursion1/Array6Iterative : dev/shtanko/algorithms/codingbat/recursion1/Array6 {
	public fun <init> ()V
	public fun invoke ([II)Z
}

public final class dev/shtanko/algorithms/codingbat/recursion1/Array6Recursive : dev/shtanko/algorithms/codingbat/recursion1/Array6 {
	public fun <init> ()V
	public fun invoke ([II)Z
}

public abstract interface class dev/shtanko/algorithms/codingbat/recursion1/BunnyEars {
	public abstract fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/codingbat/recursion1/BunnyEars2 {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/BunnyEars2BottomUp : dev/shtanko/algorithms/codingbat/recursion1/BunnyEars2 {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/BunnyEars2Iterative : dev/shtanko/algorithms/codingbat/recursion1/BunnyEars2 {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/BunnyEars2Memo : dev/shtanko/algorithms/codingbat/recursion1/BunnyEars2 {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/BunnyEars2Recursive : dev/shtanko/algorithms/codingbat/recursion1/BunnyEars2 {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/BunnyEars2TopDown : dev/shtanko/algorithms/codingbat/recursion1/BunnyEars2 {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/BunnyEarsIterative : dev/shtanko/algorithms/codingbat/recursion1/BunnyEars {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/BunnyEarsMemo : dev/shtanko/algorithms/codingbat/recursion1/BunnyEars {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/BunnyEarsRecursive : dev/shtanko/algorithms/codingbat/recursion1/BunnyEars {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/BunnyEarsTopDown : dev/shtanko/algorithms/codingbat/recursion1/BunnyEars {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/codingbat/recursion1/ChangePi {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/recursion1/ChangePiIterative : dev/shtanko/algorithms/codingbat/recursion1/ChangePi {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/recursion1/ChangePiRecursive : dev/shtanko/algorithms/codingbat/recursion1/ChangePi {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/codingbat/recursion1/ChangeXY {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/recursion1/ChangeXYIterative : dev/shtanko/algorithms/codingbat/recursion1/ChangeXY {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/recursion1/ChangeXYIterative2 : dev/shtanko/algorithms/codingbat/recursion1/ChangeXY {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/recursion1/ChangeXYRecursive : dev/shtanko/algorithms/codingbat/recursion1/ChangeXY {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/codingbat/recursion1/Count11 {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/Count11Iterative : dev/shtanko/algorithms/codingbat/recursion1/Count11 {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/Count11Recursive : dev/shtanko/algorithms/codingbat/recursion1/Count11 {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/Count8Iterative : dev/shtanko/algorithms/codingbat/recursion1/Count8 {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/Count8Recursive : dev/shtanko/algorithms/codingbat/recursion1/Count8 {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/codingbat/recursion1/CountAbc {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/CountAbcIterative : dev/shtanko/algorithms/codingbat/recursion1/CountAbc {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/CountAbcRecursive : dev/shtanko/algorithms/codingbat/recursion1/CountAbc {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/codingbat/recursion1/CountHi {
	public abstract fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/codingbat/recursion1/CountHi2 {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/CountHi2Iterative : dev/shtanko/algorithms/codingbat/recursion1/CountHi2 {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/CountHi2Recursive : dev/shtanko/algorithms/codingbat/recursion1/CountHi2 {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/CountHiIterative : dev/shtanko/algorithms/codingbat/recursion1/CountHi {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/CountHiMemo : dev/shtanko/algorithms/codingbat/recursion1/CountHi {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/CountHiRecursive : dev/shtanko/algorithms/codingbat/recursion1/CountHi {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/CountHiRecursiveSimplified : dev/shtanko/algorithms/codingbat/recursion1/CountHi {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/CountPairsIterative : dev/shtanko/algorithms/codingbat/recursion1/CountPairs {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/CountPairsRecursive : dev/shtanko/algorithms/codingbat/recursion1/CountPairs {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/CountSevenIterative : dev/shtanko/algorithms/codingbat/recursion1/CountSeven {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/CountSevenMemo : dev/shtanko/algorithms/codingbat/recursion1/CountSeven {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/CountSevenRecursive : dev/shtanko/algorithms/codingbat/recursion1/CountSeven {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/codingbat/recursion1/CountX {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/CountXIterative : dev/shtanko/algorithms/codingbat/recursion1/CountX {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/CountXMemo : dev/shtanko/algorithms/codingbat/recursion1/CountX {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/CountXRecursive : dev/shtanko/algorithms/codingbat/recursion1/CountX {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/CountXRecursiveSimplified : dev/shtanko/algorithms/codingbat/recursion1/CountX {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/codingbat/recursion1/EndX {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/recursion1/EndXIterative : dev/shtanko/algorithms/codingbat/recursion1/EndX {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/recursion1/EndXRecursive : dev/shtanko/algorithms/codingbat/recursion1/EndX {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/codingbat/recursion1/NestParen {
	public abstract fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/codingbat/recursion1/NestParenIterative : dev/shtanko/algorithms/codingbat/recursion1/NestParen {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/codingbat/recursion1/NestParenRecursive : dev/shtanko/algorithms/codingbat/recursion1/NestParen {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Z
}

public abstract interface class dev/shtanko/algorithms/codingbat/recursion1/NoX {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/recursion1/NoXFilter : dev/shtanko/algorithms/codingbat/recursion1/NoX {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/recursion1/NoXIterative : dev/shtanko/algorithms/codingbat/recursion1/NoX {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/recursion1/NoXRecursive : dev/shtanko/algorithms/codingbat/recursion1/NoX {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/codingbat/recursion1/PairStar {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/recursion1/PairStarIterative : dev/shtanko/algorithms/codingbat/recursion1/PairStar {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/recursion1/PairStarIterative2 : dev/shtanko/algorithms/codingbat/recursion1/PairStar {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/recursion1/PairStarRecursive : dev/shtanko/algorithms/codingbat/recursion1/PairStar {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/codingbat/recursion1/ParenBit {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/recursion1/ParenBitIterative : dev/shtanko/algorithms/codingbat/recursion1/ParenBit {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/recursion1/ParenBitRecursive : dev/shtanko/algorithms/codingbat/recursion1/ParenBit {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/recursion1/PowerNIterative : dev/shtanko/algorithms/codingbat/recursion1/PowerN {
	public fun <init> ()V
	public fun invoke (II)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/PowerNMemo : dev/shtanko/algorithms/codingbat/recursion1/PowerN {
	public fun <init> ()V
	public fun invoke (II)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/PowerNRecursive : dev/shtanko/algorithms/codingbat/recursion1/PowerN {
	public fun <init> ()V
	public fun invoke (II)I
}

public abstract interface class dev/shtanko/algorithms/codingbat/recursion1/StrCopies {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;I)Z
}

public final class dev/shtanko/algorithms/codingbat/recursion1/StrCopiesIterative : dev/shtanko/algorithms/codingbat/recursion1/StrCopies {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;I)Z
}

public final class dev/shtanko/algorithms/codingbat/recursion1/StrCopiesRecursive : dev/shtanko/algorithms/codingbat/recursion1/StrCopies {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;I)Z
}

public abstract interface class dev/shtanko/algorithms/codingbat/recursion1/StrCount {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/StrCountIterative : dev/shtanko/algorithms/codingbat/recursion1/StrCount {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/StrCountRecursive : dev/shtanko/algorithms/codingbat/recursion1/StrCount {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/codingbat/recursion1/StrDist {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/StrDistRecursive : dev/shtanko/algorithms/codingbat/recursion1/StrDist {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/codingbat/recursion1/StringClean {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/recursion1/StringCleanIterative : dev/shtanko/algorithms/codingbat/recursion1/StringClean {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/recursion1/StringCleanRecursive : dev/shtanko/algorithms/codingbat/recursion1/StringClean {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/recursion1/SumDigitsIterative : dev/shtanko/algorithms/codingbat/recursion1/SumDigits {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/SumDigitsRecursive : dev/shtanko/algorithms/codingbat/recursion1/SumDigits {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/TriangleBottomUp : dev/shtanko/algorithms/codingbat/recursion1/Triangle {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/TriangleIterative : dev/shtanko/algorithms/codingbat/recursion1/Triangle {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/codingbat/recursion1/TriangleRecursive : dev/shtanko/algorithms/codingbat/recursion1/Triangle {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/codingbat/recursion2/GroupNoAdj {
	public abstract fun invoke (I[II)Z
}

public final class dev/shtanko/algorithms/codingbat/recursion2/GroupNoAdjIterative : dev/shtanko/algorithms/codingbat/recursion2/GroupNoAdj {
	public fun <init> ()V
	public fun invoke (I[II)Z
}

public final class dev/shtanko/algorithms/codingbat/recursion2/GroupNoAdjRecursive : dev/shtanko/algorithms/codingbat/recursion2/GroupNoAdj {
	public fun <init> ()V
	public fun invoke (I[II)Z
}

public abstract interface class dev/shtanko/algorithms/codingbat/recursion2/GroupSum {
	public abstract fun invoke (I[II)Z
}

public abstract interface class dev/shtanko/algorithms/codingbat/recursion2/GroupSum5 {
	public abstract fun invoke (I[II)Z
}

public final class dev/shtanko/algorithms/codingbat/recursion2/GroupSum5Iterative : dev/shtanko/algorithms/codingbat/recursion2/GroupSum5 {
	public fun <init> ()V
	public fun invoke (I[II)Z
}

public final class dev/shtanko/algorithms/codingbat/recursion2/GroupSum5Recursive : dev/shtanko/algorithms/codingbat/recursion2/GroupSum5 {
	public fun <init> ()V
	public fun invoke (I[II)Z
}

public abstract interface class dev/shtanko/algorithms/codingbat/recursion2/GroupSum6 {
	public abstract fun invoke (I[II)Z
}

public final class dev/shtanko/algorithms/codingbat/recursion2/GroupSum6Iterative : dev/shtanko/algorithms/codingbat/recursion2/GroupSum6 {
	public fun <init> ()V
	public fun invoke (I[II)Z
}

public final class dev/shtanko/algorithms/codingbat/recursion2/GroupSum6Recursive : dev/shtanko/algorithms/codingbat/recursion2/GroupSum6 {
	public fun <init> ()V
	public fun invoke (I[II)Z
}

public final class dev/shtanko/algorithms/codingbat/recursion2/GroupSumBacktracking : dev/shtanko/algorithms/codingbat/recursion2/GroupSum {
	public fun <init> ()V
	public fun invoke (I[II)Z
}

public abstract interface class dev/shtanko/algorithms/codingbat/recursion2/GroupSumClump {
	public abstract fun invoke (I[II)Z
}

public final class dev/shtanko/algorithms/codingbat/recursion2/GroupSumClumpIterative : dev/shtanko/algorithms/codingbat/recursion2/GroupSumClump {
	public fun <init> ()V
	public fun invoke (I[II)Z
}

public final class dev/shtanko/algorithms/codingbat/recursion2/GroupSumClumpRecursion : dev/shtanko/algorithms/codingbat/recursion2/GroupSumClump {
	public fun <init> ()V
	public fun invoke (I[II)Z
}

public final class dev/shtanko/algorithms/codingbat/recursion2/GroupSumClumpStack : dev/shtanko/algorithms/codingbat/recursion2/GroupSumClump {
	public fun <init> ()V
	public fun invoke (I[II)Z
}

public final class dev/shtanko/algorithms/codingbat/recursion2/GroupSumIterable : dev/shtanko/algorithms/codingbat/recursion2/GroupSum {
	public fun <init> ()V
	public fun invoke (I[II)Z
}

public abstract interface class dev/shtanko/algorithms/codingbat/recursion2/Split53 {
	public abstract fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/codingbat/recursion2/Split53Iterative : dev/shtanko/algorithms/codingbat/recursion2/Split53 {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/codingbat/recursion2/Split53Recursive : dev/shtanko/algorithms/codingbat/recursion2/Split53 {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public abstract interface class dev/shtanko/algorithms/codingbat/recursion2/SplitArray {
	public abstract fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/codingbat/recursion2/SplitArrayIterative : dev/shtanko/algorithms/codingbat/recursion2/SplitArray {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/codingbat/recursion2/SplitArrayRecursive : dev/shtanko/algorithms/codingbat/recursion2/SplitArray {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public abstract interface class dev/shtanko/algorithms/codingbat/recursion2/SplitOdd10 {
	public abstract fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/codingbat/recursion2/SplitOdd10Recursive : dev/shtanko/algorithms/codingbat/recursion2/SplitOdd10 {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public abstract interface class dev/shtanko/algorithms/codingbat/string2/GetSandwich {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/string2/GetSandwichTwoPointers : dev/shtanko/algorithms/codingbat/string2/GetSandwich {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/string2/GetSandwichTwoSlidingWindow : dev/shtanko/algorithms/codingbat/string2/GetSandwich {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/codingbat/string2/OneTwo {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/string2/OneTwo$Chunked : dev/shtanko/algorithms/codingbat/string2/OneTwo {
	public static final field INSTANCE Ldev/shtanko/algorithms/codingbat/string2/OneTwo$Chunked;
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/string2/OneTwo$Iterative : dev/shtanko/algorithms/codingbat/string2/OneTwo {
	public static final field INSTANCE Ldev/shtanko/algorithms/codingbat/string2/OneTwo$Iterative;
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/codingbat/string2/PlusOut {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/string2/PlusOut$SlidingWindow : dev/shtanko/algorithms/codingbat/string2/PlusOut {
	public static final field INSTANCE Ldev/shtanko/algorithms/codingbat/string2/PlusOut$SlidingWindow;
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/codingbat/string2/SameStarChar {
	public abstract fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/codingbat/string2/SameStarChar$SlidingWindow : dev/shtanko/algorithms/codingbat/string2/SameStarChar {
	public static final field INSTANCE Ldev/shtanko/algorithms/codingbat/string2/SameStarChar$SlidingWindow;
	public fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/codingbat/string2/SameStarChar$SlidingWindowSimple : dev/shtanko/algorithms/codingbat/string2/SameStarChar {
	public static final field INSTANCE Ldev/shtanko/algorithms/codingbat/string2/SameStarChar$SlidingWindowSimple;
	public fun invoke (Ljava/lang/String;)Z
}

public abstract interface class dev/shtanko/algorithms/codingbat/string2/StarOut {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/string2/StarOut$Iterative : dev/shtanko/algorithms/codingbat/string2/StarOut {
	public static final field INSTANCE Ldev/shtanko/algorithms/codingbat/string2/StarOut$Iterative;
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/string2/StarOut$Stack : dev/shtanko/algorithms/codingbat/string2/StarOut {
	public static final field INSTANCE Ldev/shtanko/algorithms/codingbat/string2/StarOut$Stack;
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/codingbat/string2/WordEnds {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/string2/WordEnds$SlidingWindow : dev/shtanko/algorithms/codingbat/string2/WordEnds {
	public static final field INSTANCE Ldev/shtanko/algorithms/codingbat/string2/WordEnds$SlidingWindow;
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/string2/WordEnds$SlidingWindowOptimized : dev/shtanko/algorithms/codingbat/string2/WordEnds {
	public static final field INSTANCE Ldev/shtanko/algorithms/codingbat/string2/WordEnds$SlidingWindowOptimized;
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/string2/WordEnds$SubstringScanning : dev/shtanko/algorithms/codingbat/string2/WordEnds {
	public static final field INSTANCE Ldev/shtanko/algorithms/codingbat/string2/WordEnds$SubstringScanning;
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/codingbat/string2/ZipZap {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/codingbat/string2/ZipZap$Iterative : dev/shtanko/algorithms/codingbat/string2/ZipZap {
	public static final field INSTANCE Ldev/shtanko/algorithms/codingbat/string2/ZipZap$Iterative;
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/codingbat/string3/CountYZ {
	public abstract fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/complexity/Problem {
	public static final field Companion Ldev/shtanko/algorithms/complexity/Problem$Companion;
	public static final field DEFAULT_MAX_N I
	public static final field DEFAULT_MIN_N I
	public fun getMaxN ()I
	public fun getMinN ()I
	public abstract fun solve (I)J
}

public final class dev/shtanko/algorithms/complexity/Problem$Companion {
	public static final field DEFAULT_MAX_N I
	public static final field DEFAULT_MIN_N I
}

public final class dev/shtanko/algorithms/complexity/Problem$DefaultImpls {
	public static fun getMaxN (Ldev/shtanko/algorithms/complexity/Problem;)I
	public static fun getMinN (Ldev/shtanko/algorithms/complexity/Problem;)I
}

public abstract interface annotation class dev/shtanko/algorithms/complexity/RuntimeComplexity : java/lang/annotation/Annotation {
	public abstract fun full ()Ljava/lang/String;
	public abstract fun short ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/algorithms/complexity/SpaceComplexity : java/lang/annotation/Annotation {
	public abstract fun full ()Ljava/lang/String;
	public abstract fun short ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/coursera/MaxWeightPathEvaluator {
	public fun <init> ([J)V
	public final fun evaluate ()J
	public final fun getPath ()Ljava/util/Set;
}

public final class dev/shtanko/algorithms/dfs/ExampleKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/algorithms/dp/CutRodKt {
	public static final fun cutRod ([II)I
}

public final class dev/shtanko/algorithms/dp/FibonacciOptimized {
	public fun <init> ()V
	public final fun perform (I)J
}

public final class dev/shtanko/algorithms/dp/FibonacciSequenceKt {
	public static final fun fibonacci ()Lkotlin/sequences/Sequence;
	public static final fun fibonacciAt (I)J
}

public abstract interface class dev/shtanko/algorithms/dp/LCS {
	public abstract fun perform (Ljava/lang/String;Ljava/lang/String;II)I
}

public final class dev/shtanko/algorithms/dp/LCSRecursive : dev/shtanko/algorithms/dp/LCS {
	public fun <init> ()V
	public fun perform (Ljava/lang/String;Ljava/lang/String;II)I
}

public final class dev/shtanko/algorithms/dp/MinCoinsKt {
	public static final fun minCoins ([II)I
}

public final class dev/shtanko/algorithms/exercises/BinaryToDecimal {
	public fun <init> ()V
	public final fun perform (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/exercises/DecimalToBinary {
	public fun <init> ()V
	public final fun perform (I)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/exercises/MaxPowerOfTwo {
	public fun <init> ()V
	public final fun decompose (I)Ljava/util/List;
	public final fun perform (I)I
}

public final class dev/shtanko/algorithms/exercises/MaxPowerOfTwoKt {
	public static final fun getPowers (D)Ljava/util/List;
	public static synthetic fun getPowers$default (DILjava/lang/Object;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/exercises/PairSumKt {
	public static final fun pairSum ([I)I
}

public final class dev/shtanko/algorithms/exercises/RecursiveArrayTraversalKt {
	public static final fun mapArrayRecursively ([Ljava/lang/String;II)V
}

public abstract interface class dev/shtanko/algorithms/exercises/StringPermutations {
	public abstract fun perform (Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;
}

public final class dev/shtanko/algorithms/exercises/StringPermutationsIterative : dev/shtanko/algorithms/exercises/StringPermutations {
	public static final field Companion Ldev/shtanko/algorithms/exercises/StringPermutationsIterative$Companion;
	public fun <init> ()V
	public final fun getList ()Ljava/util/List;
	public fun perform (Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;
}

public final class dev/shtanko/algorithms/exercises/StringPermutationsIterative$Companion {
}

public final class dev/shtanko/algorithms/exercises/StringPermutationsRecursive : dev/shtanko/algorithms/exercises/StringPermutations {
	public fun <init> ()V
	public final fun getList ()Ljava/util/List;
	public fun perform (Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/exercises/SumsToTarget {
	public abstract fun perform ([II)Z
}

public final class dev/shtanko/algorithms/exercises/SumsToTargetBF : dev/shtanko/algorithms/exercises/SumsToTarget {
	public fun <init> ()V
	public fun perform ([II)Z
}

public final class dev/shtanko/algorithms/exercises/SumsToTargetHashSet : dev/shtanko/algorithms/exercises/SumsToTarget {
	public fun <init> ()V
	public fun perform ([II)Z
}

public final class dev/shtanko/algorithms/exercises/SumsToTargetSort : dev/shtanko/algorithms/exercises/SumsToTarget {
	public fun <init> ()V
	public fun perform ([II)Z
}

public final class dev/shtanko/algorithms/exercises/TreeNode {
	public fun <init> (ILdev/shtanko/algorithms/exercises/TreeNode;Ldev/shtanko/algorithms/exercises/TreeNode;)V
	public synthetic fun <init> (ILdev/shtanko/algorithms/exercises/TreeNode;Ldev/shtanko/algorithms/exercises/TreeNode;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()I
	public final fun component2 ()Ldev/shtanko/algorithms/exercises/TreeNode;
	public final fun component3 ()Ldev/shtanko/algorithms/exercises/TreeNode;
	public final fun copy (ILdev/shtanko/algorithms/exercises/TreeNode;Ldev/shtanko/algorithms/exercises/TreeNode;)Ldev/shtanko/algorithms/exercises/TreeNode;
	public static synthetic fun copy$default (Ldev/shtanko/algorithms/exercises/TreeNode;ILdev/shtanko/algorithms/exercises/TreeNode;Ldev/shtanko/algorithms/exercises/TreeNode;ILjava/lang/Object;)Ldev/shtanko/algorithms/exercises/TreeNode;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getLeft ()Ldev/shtanko/algorithms/exercises/TreeNode;
	public final fun getRight ()Ldev/shtanko/algorithms/exercises/TreeNode;
	public final fun getValue ()I
	public fun hashCode ()I
	public final fun setLeft (Ldev/shtanko/algorithms/exercises/TreeNode;)V
	public final fun setRight (Ldev/shtanko/algorithms/exercises/TreeNode;)V
	public final fun setValue (I)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/exercises/TreeNodeKt {
	public static final fun clone (Ldev/shtanko/algorithms/exercises/TreeNode;)Ldev/shtanko/algorithms/exercises/TreeNode;
	public static final fun traverseTree (Ldev/shtanko/algorithms/exercises/TreeNode;)V
}

public abstract interface class dev/shtanko/algorithms/exercises/UniqueCharacters {
	public abstract fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/exercises/UniqueCharactersBruteForce : dev/shtanko/algorithms/exercises/UniqueCharacters {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/exercises/UniqueCharactersSet : dev/shtanko/algorithms/exercises/UniqueCharacters {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/exercises/UniqueCharactersSort : dev/shtanko/algorithms/exercises/UniqueCharacters {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/exercises/UniqueCharactersStream : dev/shtanko/algorithms/exercises/UniqueCharacters {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Z
}

public abstract interface class dev/shtanko/algorithms/facebook/BalanceBrackets {
	public abstract fun isBalanced (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/facebook/BalanceBracketsStack : dev/shtanko/algorithms/facebook/BalanceBrackets {
	public fun <init> ()V
	public fun isBalanced (Ljava/lang/String;)Z
}

public abstract interface class dev/shtanko/algorithms/facebook/ColorfulNumbers {
	public abstract fun isColorful (I)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/facebook/ColorfulNumbersImpl : dev/shtanko/algorithms/facebook/ColorfulNumbers {
	public fun <init> ()V
	public fun isColorful (I)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/gfg/NotDivisibleNumber {
	public abstract fun invoke (J)J
}

public final class dev/shtanko/algorithms/gfg/NotDivisibleNumberBruteForce : dev/shtanko/algorithms/gfg/NotDivisibleNumber {
	public static final field Companion Ldev/shtanko/algorithms/gfg/NotDivisibleNumberBruteForce$Companion;
	public fun <init> ()V
	public fun invoke (J)J
}

public final class dev/shtanko/algorithms/gfg/NotDivisibleNumberBruteForce$Companion {
}

public abstract interface class dev/shtanko/algorithms/gfg/RecamansSequence {
	public abstract fun invoke (I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/gfg/RecamansSequenceRecursive : dev/shtanko/algorithms/gfg/RecamansSequence {
	public fun <init> ()V
	public fun invoke (I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/gfg/SquareRoot {
	public static final field INSTANCE Ldev/shtanko/algorithms/gfg/SquareRoot;
	public final fun perform (J)J
}

public abstract interface class dev/shtanko/algorithms/gfg/UglyNumbers {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/gfg/UglyNumbersBruteForce : dev/shtanko/algorithms/gfg/UglyNumbers {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/graph/AdjacencyMap {
	public fun <init> ()V
	public final fun addEdge (Ljava/lang/Object;Ljava/lang/Object;)V
	public final fun getGraph ()Ljava/util/HashMap;
	public final fun toList ()Ljava/util/List;
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/graph/bfs/GraphBFS {
	public fun <init> (I)V
	public final fun addEdge (II)V
	public final fun bfs (I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/hackerrank/CuttingBoards {
	public static final field INSTANCE Ldev/shtanko/algorithms/hackerrank/CuttingBoards;
	public final fun perform ([I[I)J
}

public final class dev/shtanko/algorithms/hackerrank/GreedyFlorist {
	public static final field INSTANCE Ldev/shtanko/algorithms/hackerrank/GreedyFlorist;
	public final fun solution (II[I)I
}

public abstract interface class dev/shtanko/algorithms/hackerrank/LonelyInteger {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/hackerrank/LonelyInteger$BitManipulation : dev/shtanko/algorithms/hackerrank/LonelyInteger {
	public static final field INSTANCE Ldev/shtanko/algorithms/hackerrank/LonelyInteger$BitManipulation;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/hackerrank/LonelyInteger$BruteForce : dev/shtanko/algorithms/hackerrank/LonelyInteger {
	public static final field INSTANCE Ldev/shtanko/algorithms/hackerrank/LonelyInteger$BruteForce;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/hackerrank/MakingAnagrams {
	public static final field INSTANCE Ldev/shtanko/algorithms/hackerrank/MakingAnagrams;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public final fun invoke (Ljava/lang/String;Ljava/lang/String;)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/hackerrank/MarkAndToys {
	public static final field INSTANCE Ldev/shtanko/algorithms/hackerrank/MarkAndToys;
	public final fun perform (I[I)I
}

public abstract interface class dev/shtanko/algorithms/hackerrank/MiniMaxSum {
	public abstract fun invoke ([I)[J
}

public final class dev/shtanko/algorithms/hackerrank/MiniMaxSum$Sorting : dev/shtanko/algorithms/hackerrank/MiniMaxSum {
	public static final field INSTANCE Ldev/shtanko/algorithms/hackerrank/MiniMaxSum$Sorting;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I)[J
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/hackerrank/PlusMinus {
	public abstract fun invoke ([I)[D
}

public final class dev/shtanko/algorithms/hackerrank/PlusMinus$BruteForce : dev/shtanko/algorithms/hackerrank/PlusMinus {
	public static final field INSTANCE Ldev/shtanko/algorithms/hackerrank/PlusMinus$BruteForce;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I)[D
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/hackerrank/SubarrayDivision {
	public fun <init> ()V
}

public abstract interface class dev/shtanko/algorithms/hackerrank/TimeConversion {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/hackerrank/TimeConversion$BruteForce : dev/shtanko/algorithms/hackerrank/TimeConversion {
	public static final field INSTANCE Ldev/shtanko/algorithms/hackerrank/TimeConversion$BruteForce;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/hackerrank/TwoStrings {
	public static final field INSTANCE Ldev/shtanko/algorithms/hackerrank/TwoStrings;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public final fun invoke (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
	public fun toString ()Ljava/lang/String;
}

public abstract class dev/shtanko/algorithms/interview/Animal {
}

public final class dev/shtanko/algorithms/interview/BinaryTreeNode {
	public fun <init> ()V
	public fun <init> (Ldev/shtanko/algorithms/interview/BinaryTreeNode;)V
	public synthetic fun <init> (Ldev/shtanko/algorithms/interview/BinaryTreeNode;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun addLeftChild (Ldev/shtanko/algorithms/interview/BinaryTreeNode;)V
	public final fun addRightChild (Ldev/shtanko/algorithms/interview/BinaryTreeNode;)V
	public final fun getLeft ()Ldev/shtanko/algorithms/interview/WeightedTree;
	public final fun getRandom (Lkotlin/jvm/functions/Function1;)Ldev/shtanko/algorithms/interview/BinaryTreeNode;
	public static synthetic fun getRandom$default (Ldev/shtanko/algorithms/interview/BinaryTreeNode;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Ldev/shtanko/algorithms/interview/BinaryTreeNode;
	public final fun getRight ()Ldev/shtanko/algorithms/interview/WeightedTree;
}

public final class dev/shtanko/algorithms/interview/BinaryTreeNodeKt {
	public static final fun random (Lkotlin/ranges/IntRange;)I
}

public final class dev/shtanko/algorithms/interview/Cat : dev/shtanko/algorithms/interview/Animal {
	public fun <init> (Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;)Ldev/shtanko/algorithms/interview/Cat;
	public static synthetic fun copy$default (Ldev/shtanko/algorithms/interview/Cat;Ljava/lang/String;ILjava/lang/Object;)Ldev/shtanko/algorithms/interview/Cat;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getName ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/interview/Dog : dev/shtanko/algorithms/interview/Animal {
	public fun <init> (Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;)Ldev/shtanko/algorithms/interview/Dog;
	public static synthetic fun copy$default (Ldev/shtanko/algorithms/interview/Dog;Ljava/lang/String;ILjava/lang/Object;)Ldev/shtanko/algorithms/interview/Dog;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getName ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/interview/IsPermutationOfPalindromeKt {
	public static final fun isPermutationOfPalindrome (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/interview/SortStackKt {
	public static final fun sortStack (Ljava/util/Stack;)Ljava/util/Stack;
}

public final class dev/shtanko/algorithms/interview/StackOfStacks {
	public fun <init> ()V
	public final fun pop ()I
	public final fun push (I)V
}

public final class dev/shtanko/algorithms/interview/UniqueCharactersKt {
	public static final fun uniqueCharacters (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/interview/WeightedTree {
	public fun <init> ()V
	public final fun addChild (Ldev/shtanko/algorithms/interview/BinaryTreeNode;)V
	public final fun getChild ()Ldev/shtanko/algorithms/interview/BinaryTreeNode;
	public final fun getWeight ()I
	public final fun setWeight (I)V
}

public final class dev/shtanko/algorithms/learn/ArrayKt {
	public static final fun mergeTwoSortedPlus ([I[I)[I
	public static final fun mergeTwoSortedSF ([I[I)[I
	public static final fun secondMinSort ([I)I
	public static final fun secondStraightForward ([I)I
	public static final fun uniqueWholeNumbersSet ([I)[I
}

public final class dev/shtanko/algorithms/learn/OneStackQueue : java/util/Collection, kotlin/jvm/internal/markers/KMappedMarker {
	public fun <init> ()V
	public final fun add (Ljava/lang/Object;)V
	public fun add (Ljava/lang/Object;)Z
	public fun addAll (Ljava/util/Collection;)Z
	public fun clear ()V
	public fun contains (Ljava/lang/Object;)Z
	public fun containsAll (Ljava/util/Collection;)Z
	public fun getSize ()I
	public fun isEmpty ()Z
	public fun iterator ()Ljava/util/Iterator;
	public final fun peek ()Ljava/lang/Object;
	public fun remove (Ljava/lang/Object;)Z
	public fun removeAll (Ljava/util/Collection;)Z
	public fun removeIf (Ljava/util/function/Predicate;)Z
	public fun retainAll (Ljava/util/Collection;)Z
	public final fun size ()I
	public fun toArray ()[Ljava/lang/Object;
	public fun toArray ([Ljava/lang/Object;)[Ljava/lang/Object;
}

public final class dev/shtanko/algorithms/learn/StackKt {
	public static final fun sorted (Ljava/util/Stack;)Ljava/util/Stack;
}

public final class dev/shtanko/algorithms/learn/TwoStackQueue : java/util/Collection, kotlin/jvm/internal/markers/KMappedMarker {
	public fun <init> ()V
	public final fun add (Ljava/lang/Object;)V
	public fun add (Ljava/lang/Object;)Z
	public fun addAll (Ljava/util/Collection;)Z
	public fun clear ()V
	public fun contains (Ljava/lang/Object;)Z
	public fun containsAll (Ljava/util/Collection;)Z
	public fun getSize ()I
	public fun isEmpty ()Z
	public fun iterator ()Ljava/util/Iterator;
	public final fun peek ()Ljava/lang/Object;
	public fun remove (Ljava/lang/Object;)Z
	public fun removeAll (Ljava/util/Collection;)Z
	public fun removeIf (Ljava/util/function/Predicate;)Z
	public fun retainAll (Ljava/util/Collection;)Z
	public final fun size ()I
	public fun toArray ()[Ljava/lang/Object;
	public fun toArray ([Ljava/lang/Object;)[Ljava/lang/Object;
}

public final class dev/shtanko/algorithms/learn/bit/Or {
	public static final field INSTANCE Ldev/shtanko/algorithms/learn/bit/Or;
	public final fun simpleOr (II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/AbstractCountNegativesStrategy {
	public abstract fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/AbstractFindSubstring {
	public abstract fun invoke (Ljava/lang/String;[Ljava/lang/String;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/AbstractLuckyNumbers {
	public abstract fun invoke ([[I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/AbstractMaximumProductStrategy {
	public abstract fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/AbstractMissingNumberStrategy {
	public abstract fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/AbstractNumIdenticalPairs {
	public abstract fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/AbstractRobber {
	public abstract fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/AbstractRotateArray {
	public abstract fun invoke ([II)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/AbstractSortByParity {
	public abstract fun invoke ([I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/AbstractWordLadder2Strategy {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;Ljava/util/List;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/AddBinary {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/AddBinaryBitByBitComputation : dev/shtanko/algorithms/leetcode/AddBinary {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/AddBinaryBitManipulation : dev/shtanko/algorithms/leetcode/AddBinary {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/AddDigits {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/AddDigitsDigitalRoot : dev/shtanko/algorithms/leetcode/AddDigits {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/AddDigitsMath : dev/shtanko/algorithms/leetcode/AddDigits {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/AddDigitsStraightForward : dev/shtanko/algorithms/leetcode/AddDigits {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/AddOneRowToTree {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;II)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/AddOneRowToTreeQueue : dev/shtanko/algorithms/leetcode/AddOneRowToTree {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;II)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/AddOneRowToTreeRec : dev/shtanko/algorithms/leetcode/AddOneRowToTree {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;II)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/AddOneRowToTreeStack : dev/shtanko/algorithms/leetcode/AddOneRowToTree {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;II)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/AddOneRowToTreeStack$Node {
	public fun <init> (Ldev/shtanko/algorithms/leetcode/TreeNode;I)V
	public final fun component1 ()Ldev/shtanko/algorithms/leetcode/TreeNode;
	public final fun component2 ()I
	public final fun copy (Ldev/shtanko/algorithms/leetcode/TreeNode;I)Ldev/shtanko/algorithms/leetcode/AddOneRowToTreeStack$Node;
	public static synthetic fun copy$default (Ldev/shtanko/algorithms/leetcode/AddOneRowToTreeStack$Node;Ldev/shtanko/algorithms/leetcode/TreeNode;IILjava/lang/Object;)Ldev/shtanko/algorithms/leetcode/AddOneRowToTreeStack$Node;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getDepth ()I
	public final fun getNode ()Ldev/shtanko/algorithms/leetcode/TreeNode;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/AddToArrayForm {
	public abstract fun invoke ([II)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/AddToArrayFormOnePass : dev/shtanko/algorithms/leetcode/AddToArrayForm {
	public fun <init> ()V
	public fun invoke ([II)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/AddToArrayFormSimple : dev/shtanko/algorithms/leetcode/AddToArrayForm {
	public fun <init> ()V
	public fun invoke ([II)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/AddTwoNumbers {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/AddTwoNumbers2 {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/AddTwoNumbers2Reverse : dev/shtanko/algorithms/leetcode/AddTwoNumbers2 {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/AddTwoNumbers2Stack : dev/shtanko/algorithms/leetcode/AddTwoNumbers2 {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/AddTwoNumbersMath : dev/shtanko/algorithms/leetcode/AddTwoNumbers {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/AddingSpaces {
	public abstract fun invoke (Ljava/lang/String;[I)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/AddingSpaces$StringBuilder : dev/shtanko/algorithms/leetcode/AddingSpaces {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/AddingSpaces$StringBuilder;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/lang/String;[I)Ljava/lang/String;
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/AddingSpaces$TwoPointers : dev/shtanko/algorithms/leetcode/AddingSpaces {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/AddingSpaces$TwoPointers;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/lang/String;[I)Ljava/lang/String;
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/AdvantageCountKt {
	public static final fun advantageCount ([I[I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/AlienDictionary {
	public abstract fun invoke ([Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/AlienDictionaryBFS : dev/shtanko/algorithms/leetcode/AlienDictionary {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/AlienDictionaryDFS : dev/shtanko/algorithms/leetcode/AlienDictionary {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/AllOne {
	public abstract fun dec (Ljava/lang/String;)V
	public abstract fun getMaxKey ()Ljava/lang/String;
	public abstract fun getMinKey ()Ljava/lang/String;
	public abstract fun inc (Ljava/lang/String;)V
}

public final class dev/shtanko/algorithms/leetcode/AllOneLinkedList : dev/shtanko/algorithms/leetcode/AllOne {
	public fun <init> ()V
	public fun dec (Ljava/lang/String;)V
	public fun getMaxKey ()Ljava/lang/String;
	public fun getMinKey ()Ljava/lang/String;
	public fun inc (Ljava/lang/String;)V
}

public final class dev/shtanko/algorithms/leetcode/AllPathsSourceBacktracking : dev/shtanko/algorithms/leetcode/AllPathsSourceTarget {
	public fun <init> ()V
	public fun invoke ([[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/AllPathsSourceDP : dev/shtanko/algorithms/leetcode/AllPathsSourceTarget {
	public fun <init> ()V
	public fun invoke ([[I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/AllPathsSourceTarget {
	public abstract fun invoke ([[I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/AllPossibleFullBinaryTrees {
	public abstract fun invoke (I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/AllPossibleFullBinaryTreesIterative : dev/shtanko/algorithms/leetcode/AllPossibleFullBinaryTrees {
	public fun <init> ()V
	public fun invoke (I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/AllPossibleFullBinaryTreesRecursive : dev/shtanko/algorithms/leetcode/AllPossibleFullBinaryTrees {
	public fun <init> ()V
	public fun invoke (I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/Allocator : dev/shtanko/algorithms/leetcode/Malloc {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/Allocator$Companion;
	public fun <init> (I)V
	public fun allocate (II)I
	public fun free (I)I
}

public final class dev/shtanko/algorithms/leetcode/Allocator$Companion {
}

public final class dev/shtanko/algorithms/leetcode/Allocator$Node {
	public fun <init> (II)V
	public final fun component1 ()I
	public final fun component2 ()I
	public final fun copy (II)Ldev/shtanko/algorithms/leetcode/Allocator$Node;
	public static synthetic fun copy$default (Ldev/shtanko/algorithms/leetcode/Allocator$Node;IIILjava/lang/Object;)Ldev/shtanko/algorithms/leetcode/Allocator$Node;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getL ()I
	public final fun getR ()I
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/AlphabetBoardPath {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/AlphabetBoardPathSB : dev/shtanko/algorithms/leetcode/AlphabetBoardPath {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/AmbiguousCoordinates {
	public fun <init> ()V
	public final fun invoke (Ljava/lang/String;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/AmountOfTime {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;I)I
}

public final class dev/shtanko/algorithms/leetcode/AmountOfTimeBFS : dev/shtanko/algorithms/leetcode/AmountOfTime {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;I)I
}

public final class dev/shtanko/algorithms/leetcode/AmountOfTimeDFS : dev/shtanko/algorithms/leetcode/AmountOfTime {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/AnswerQueries {
	public abstract fun invoke ([I[I)[I
}

public final class dev/shtanko/algorithms/leetcode/AnswerQueriesBinarySearch : dev/shtanko/algorithms/leetcode/AnswerQueries {
	public fun <init> ()V
	public fun invoke ([I[I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/AppealSum {
	public abstract fun invoke (Ljava/lang/String;)J
}

public final class dev/shtanko/algorithms/leetcode/AppealSumDP : dev/shtanko/algorithms/leetcode/AppealSum {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)J
}

public final class dev/shtanko/algorithms/leetcode/AppealSumDPKt : dev/shtanko/algorithms/leetcode/AppealSum {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)J
}

public abstract interface class dev/shtanko/algorithms/leetcode/AppendCharacters {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/AppendCharactersTwoPointers : dev/shtanko/algorithms/leetcode/AppendCharacters {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/ArSlicesBetterBruteForce : dev/shtanko/algorithms/leetcode/ArithmeticSlices {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/ArSlicesBruteForce : dev/shtanko/algorithms/leetcode/ArithmeticSlices {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/ArSlicesConstantSpaceDP : dev/shtanko/algorithms/leetcode/ArithmeticSlices {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/ArSlicesDP : dev/shtanko/algorithms/leetcode/ArithmeticSlices {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/ArSlicesFormula : dev/shtanko/algorithms/leetcode/ArithmeticSlices {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/ArSlicesRecursion : dev/shtanko/algorithms/leetcode/ArithmeticSlices {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/AreOccurrencesEqual {
	public abstract fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/AreOccurrencesEqualBF : dev/shtanko/algorithms/leetcode/AreOccurrencesEqual {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/AreOccurrencesEqualKotlin : dev/shtanko/algorithms/leetcode/AreOccurrencesEqual {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/ArithmeticSlices {
	public abstract fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ArithmeticSubarrays {
	public abstract fun invoke ([I[I[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/ArithmeticSubarraysSet : dev/shtanko/algorithms/leetcode/ArithmeticSubarrays {
	public fun <init> ()V
	public fun invoke ([I[I[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/ArithmeticSubarraysSort : dev/shtanko/algorithms/leetcode/ArithmeticSubarrays {
	public fun <init> ()V
	public fun invoke ([I[I[I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/ArrIntoConsecutiveSubsequences {
	public abstract fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/ArrIntoConsecutiveSubsequencesGreedy : dev/shtanko/algorithms/leetcode/ArrIntoConsecutiveSubsequences {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/ArrIntoConsecutiveSubsequencesQueue : dev/shtanko/algorithms/leetcode/ArrIntoConsecutiveSubsequences {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/ArrangingCoins {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/ArrangingCoinsBS : dev/shtanko/algorithms/leetcode/ArrangingCoins {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/ArrangingCoinsMath : dev/shtanko/algorithms/leetcode/ArrangingCoins {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/ArrangingCoinsMath$Companion;
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/ArrangingCoinsMath$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/ArrayOfDoubledPairs {
	public abstract fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/ArrayOfDoubledPairsGreedy : dev/shtanko/algorithms/leetcode/ArrayOfDoubledPairs {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/ArraySign {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/ArraySignCountingNegativeNumbers : dev/shtanko/algorithms/leetcode/ArraySign {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/ArraySignSimple : dev/shtanko/algorithms/leetcode/ArraySign {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/ArraySignTracking : dev/shtanko/algorithms/leetcode/ArraySign {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ArrayStringsAreEqual {
	public abstract fun invoke ([Ljava/lang/String;[Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/ArrayStringsAreEqualCompare : dev/shtanko/algorithms/leetcode/ArrayStringsAreEqual {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;[Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/ArrayStringsAreEqualTwoPointers : dev/shtanko/algorithms/leetcode/ArrayStringsAreEqual {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;[Ljava/lang/String;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/AsFarFromLandAsPossible {
	public abstract fun maxDistance ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/AsFarFromLandAsPossibleDP : dev/shtanko/algorithms/leetcode/AsFarFromLandAsPossible {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/AsFarFromLandAsPossibleDP$Companion;
	public fun <init> ()V
	public fun maxDistance ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/AsFarFromLandAsPossibleDP$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/AssignCookies {
	public abstract fun invoke ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/AssignCookiesTwoPointer : dev/shtanko/algorithms/leetcode/AssignCookies {
	public fun <init> ()V
	public fun invoke ([I[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/AsteroidCollision {
	public abstract fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/AsteroidCollisionStack : dev/shtanko/algorithms/leetcode/AsteroidCollision {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/AtoiKt {
	public static final fun atoi (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/AverageOfLevelsInBinaryTreeBFS : dev/shtanko/algorithms/leetcode/AverageOfLevelsInBinaryTreeStrategy {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)[D
}

public final class dev/shtanko/algorithms/leetcode/AverageOfLevelsInBinaryTreeDFS : dev/shtanko/algorithms/leetcode/AverageOfLevelsInBinaryTreeStrategy {
	public fun <init> ()V
	public final fun average (Ldev/shtanko/algorithms/leetcode/TreeNode;ILjava/util/List;Ljava/util/List;)V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)[D
}

public abstract interface class dev/shtanko/algorithms/leetcode/AverageOfLevelsInBinaryTreeStrategy {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)[D
}

public abstract interface class dev/shtanko/algorithms/leetcode/AverageOfSubtree {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/AverageOfSubtreeStrategy {
}

public final class dev/shtanko/algorithms/leetcode/AverageOfSubtreeStrategy$DFS : dev/shtanko/algorithms/leetcode/AverageOfSubtree, dev/shtanko/algorithms/leetcode/AverageOfSubtreeStrategy {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/AverageOfSubtreeStrategy$DFS;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/AverageSalary {
	public abstract fun average ([I)D
}

public final class dev/shtanko/algorithms/leetcode/AverageSalaryBruteForce : dev/shtanko/algorithms/leetcode/AverageSalary {
	public fun <init> ()V
	public fun average ([I)D
}

public final class dev/shtanko/algorithms/leetcode/AverageSalarySimple : dev/shtanko/algorithms/leetcode/AverageSalary {
	public fun <init> ()V
	public fun average ([I)D
}

public abstract interface class dev/shtanko/algorithms/leetcode/AverageWaitingTime {
	public abstract fun invoke ([[I)D
}

public final class dev/shtanko/algorithms/leetcode/AverageWaitingTimeIterative : dev/shtanko/algorithms/leetcode/AverageWaitingTime {
	public fun <init> ()V
	public fun invoke ([[I)D
}

public abstract interface class dev/shtanko/algorithms/leetcode/AvoidFlood {
	public abstract fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/AvoidFloodSimple : dev/shtanko/algorithms/leetcode/AvoidFlood {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/AvoidFloodTree : dev/shtanko/algorithms/leetcode/AvoidFlood {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/BA2Construction : dev/shtanko/algorithms/leetcode/BeautifulArrangement2 {
	public fun <init> ()V
	public fun invoke (II)[I
}

public final class dev/shtanko/algorithms/leetcode/BABacktracking : dev/shtanko/algorithms/leetcode/BeautifulArrangement {
	public fun <init> ()V
	public final fun calculate (II[Z)V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/BABruteForce : dev/shtanko/algorithms/leetcode/BeautifulArrangement {
	public fun <init> ()V
	public fun invoke (I)I
	public final fun permute ([II)I
}

public final class dev/shtanko/algorithms/leetcode/BGOnePass : dev/shtanko/algorithms/leetcode/BinaryGap {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/BGOther : dev/shtanko/algorithms/leetcode/BinaryGap {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/BGStoreIndexes : dev/shtanko/algorithms/leetcode/BinaryGap {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/BSTFromPreorder {
	public abstract fun invoke ([I)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/BSTFromPreorderRecursion : dev/shtanko/algorithms/leetcode/BSTFromPreorder {
	public fun <init> ()V
	public fun invoke ([I)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/BSTIterator {
	public abstract fun hasNext ()Z
	public abstract fun next ()I
}

public final class dev/shtanko/algorithms/leetcode/BSTIteratorControlledRecursion : dev/shtanko/algorithms/leetcode/BSTIterator {
	public fun <init> (Ldev/shtanko/algorithms/leetcode/TreeNode;)V
	public fun hasNext ()Z
	public fun next ()I
}

public final class dev/shtanko/algorithms/leetcode/BSTIteratorFlattening : dev/shtanko/algorithms/leetcode/BSTIterator {
	public fun <init> (Ldev/shtanko/algorithms/leetcode/TreeNode;)V
	public fun hasNext ()Z
	public fun next ()I
}

public final class dev/shtanko/algorithms/leetcode/BSThreshold : dev/shtanko/algorithms/leetcode/FurthestBuilding {
	public fun <init> ()V
	public fun invoke ([III)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/BackspaceStringCompare {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/BackspaceStringCompareStack : dev/shtanko/algorithms/leetcode/BackspaceStringCompare {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/BackspaceStringCompareTwoPointer : dev/shtanko/algorithms/leetcode/BackspaceStringCompare {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/BacktrackingSubsets : dev/shtanko/algorithms/leetcode/Subsets {
	public fun <init> ()V
	public fun invoke ([I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/BacktrackingWithCounters : dev/shtanko/algorithms/leetcode/CombinationSum2 {
	public fun <init> ()V
	public fun invoke ([II)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/BacktrackingWithIndex : dev/shtanko/algorithms/leetcode/CombinationSum2 {
	public fun <init> ()V
	public fun invoke ([II)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/BagOfTokens {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/BagOfTokensKt {
	public static final fun getBagOfTokensDeque ()Ldev/shtanko/algorithms/leetcode/BagOfTokens;
}

public abstract interface class dev/shtanko/algorithms/leetcode/BalanceBST {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/BalanceBSTInorder : dev/shtanko/algorithms/leetcode/BalanceBST {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/BalanceBSTreeDSW : dev/shtanko/algorithms/leetcode/BalanceBST {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/BalancedBinaryTreeKt {
	public static final fun balancedHelper (Ldev/shtanko/algorithms/leetcode/TreeNode;I)I
	public static synthetic fun balancedHelper$default (Ldev/shtanko/algorithms/leetcode/TreeNode;IILjava/lang/Object;)I
	public static final fun isBalanced (Ldev/shtanko/algorithms/leetcode/TreeNode;)Z
}

public final class dev/shtanko/algorithms/leetcode/BalancedStringSplitKt {
	public static final fun balancedStringSplit (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/BaseballGame {
	public fun <init> ()V
	public final fun invoke ([Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/BeautifulArrangement {
	public abstract fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/BeautifulArrangement2 {
	public abstract fun invoke (II)[I
}

public final class dev/shtanko/algorithms/leetcode/BeautifulArray {
	public fun <init> ()V
	public final fun divideAndConquer (I)[I
	public final fun invoke (I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/BeautifulPartitions {
	public abstract fun invoke (Ljava/lang/String;II)I
}

public final class dev/shtanko/algorithms/leetcode/BeautifulPartitionsDP : dev/shtanko/algorithms/leetcode/BeautifulPartitions {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/BeautifulSubsets {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/BeautifulSubsetsBacktracking : dev/shtanko/algorithms/leetcode/BeautifulSubsets {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/BeautifulSubsetsBitset : dev/shtanko/algorithms/leetcode/BeautifulSubsets {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/BeautifulSubsetsDPIterative : dev/shtanko/algorithms/leetcode/BeautifulSubsets {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/BeautifulSubsetsDPIterativeOpt : dev/shtanko/algorithms/leetcode/BeautifulSubsets {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/BeautifulSubsetsDPMemo : dev/shtanko/algorithms/leetcode/BeautifulSubsets {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/BeautifulSubsetsRecOpt : dev/shtanko/algorithms/leetcode/BeautifulSubsets {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/BestTeamScore {
	public abstract fun invoke ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/BestTeamScoreDP : dev/shtanko/algorithms/leetcode/BestTeamScore {
	public fun <init> ()V
	public fun invoke ([I[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/BinaryGap {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/BinaryNumberToIntBinary : dev/shtanko/algorithms/leetcode/BinaryNumberToIntStrategy {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)I
}

public final class dev/shtanko/algorithms/leetcode/BinaryNumberToIntBit : dev/shtanko/algorithms/leetcode/BinaryNumberToIntStrategy {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/BinaryNumberToIntStrategy {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/BinarySubArraysWithSum {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/BinarySubArraysWithSumOnePass : dev/shtanko/algorithms/leetcode/BinarySubArraysWithSum {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/BinarySubArraysWithSumPrefixSum : dev/shtanko/algorithms/leetcode/BinarySubArraysWithSum {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/BinarySubArraysWithSumSlidingWindow : dev/shtanko/algorithms/leetcode/BinarySubArraysWithSum {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/BinaryTree {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/BinaryTree$Companion;
	public fun <init> ()V
	public final fun getRoot ()Ldev/shtanko/algorithms/leetcode/TreeNode;
	public final fun printLevelOrder ()V
	public final fun setRoot (Ldev/shtanko/algorithms/leetcode/TreeNode;)V
}

public final class dev/shtanko/algorithms/leetcode/BinaryTree$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/BinaryTreeCameras {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/BinaryTreeCamerasDFS : dev/shtanko/algorithms/leetcode/BinaryTreeCameras {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/BinaryTreeCamerasDFS$Companion;
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/BinaryTreeCamerasDFS$Companion {
}

public final class dev/shtanko/algorithms/leetcode/BinaryTreeCamerasDP : dev/shtanko/algorithms/leetcode/BinaryTreeCameras {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/BinaryTreeCamerasDP$Companion;
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/BinaryTreeCamerasDP$Companion {
}

public final class dev/shtanko/algorithms/leetcode/BinaryTreeCamerasGreedy : dev/shtanko/algorithms/leetcode/BinaryTreeCameras {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/BinaryTreeMaximumPathSum {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/BinaryTreeMaximumPathSum;
	public final fun maxPathSum (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/BinaryTreePaths {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/BinaryTreePathsBFSQueue : dev/shtanko/algorithms/leetcode/BinaryTreePaths {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/BinaryTreePathsBFSStack : dev/shtanko/algorithms/leetcode/BinaryTreePaths {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/BinaryTreePathsRecursion : dev/shtanko/algorithms/leetcode/BinaryTreePaths {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/BinaryTreePruning {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/BinaryTreePruningRecursion : dev/shtanko/algorithms/leetcode/BinaryTreePruning {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/BinaryTreePruningSimple : dev/shtanko/algorithms/leetcode/BinaryTreePruning {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/BinaryWatch {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/BinaryWatch;
	public final fun invoke (I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/BitwiseComplement {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/BitwiseComplementBitmask : dev/shtanko/algorithms/leetcode/BitwiseComplement {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/BitwiseComplementBruteForce : dev/shtanko/algorithms/leetcode/BitwiseComplement {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/BitwiseComplementBuiltInFunc : dev/shtanko/algorithms/leetcode/BitwiseComplement {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/BitwiseComplementFlipBit : dev/shtanko/algorithms/leetcode/BitwiseComplement {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/BoatsToSavePeople {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/BoatsToSavePeopleBF : dev/shtanko/algorithms/leetcode/BoatsToSavePeople {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/BoldWordsInString {
	public fun <init> ()V
	public final fun invoke ([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/BottomUpMergeSort : dev/shtanko/algorithms/leetcode/SortListStrategy {
	public fun <init> ()V
	public final fun getNextSubList ()Ldev/shtanko/algorithms/leetcode/ListNode;
	public final fun getTail ()Ldev/shtanko/algorithms/leetcode/ListNode;
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
	public final fun setNextSubList (Ldev/shtanko/algorithms/leetcode/ListNode;)V
	public final fun setTail (Ldev/shtanko/algorithms/leetcode/ListNode;)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/BraceExpansion2 {
	public abstract fun braceExpansion2 (Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/BraceExpansion2DFS : dev/shtanko/algorithms/leetcode/BraceExpansion2 {
	public fun <init> ()V
	public fun braceExpansion2 (Ljava/lang/String;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/BrickWall {
	public abstract fun invoke (Ljava/util/List;)I
}

public final class dev/shtanko/algorithms/leetcode/BrickWallBetterBruteForce : dev/shtanko/algorithms/leetcode/BrickWall {
	public fun <init> ()V
	public fun invoke (Ljava/util/List;)I
}

public final class dev/shtanko/algorithms/leetcode/BrickWallBruteForce : dev/shtanko/algorithms/leetcode/BrickWall {
	public fun <init> ()V
	public fun invoke (Ljava/util/List;)I
}

public final class dev/shtanko/algorithms/leetcode/BrickWallHashMap : dev/shtanko/algorithms/leetcode/BrickWall {
	public fun <init> ()V
	public fun invoke (Ljava/util/List;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/BrowserHistory {
	public abstract fun back (I)Ljava/lang/String;
	public abstract fun forward (I)Ljava/lang/String;
	public abstract fun visit (Ljava/lang/String;)V
}

public final class dev/shtanko/algorithms/leetcode/BrowserHistoryArray : dev/shtanko/algorithms/leetcode/BrowserHistory {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/BrowserHistoryArray$Companion;
	public fun <init> (Ljava/lang/String;)V
	public fun back (I)Ljava/lang/String;
	public fun forward (I)Ljava/lang/String;
	public fun visit (Ljava/lang/String;)V
}

public final class dev/shtanko/algorithms/leetcode/BrowserHistoryArray$Companion {
}

public final class dev/shtanko/algorithms/leetcode/BrowserHistoryList : dev/shtanko/algorithms/leetcode/BrowserHistory {
	public fun <init> (Ljava/lang/String;)V
	public fun back (I)Ljava/lang/String;
	public fun forward (I)Ljava/lang/String;
	public fun visit (Ljava/lang/String;)V
}

public final class dev/shtanko/algorithms/leetcode/BrowserHistoryStack : dev/shtanko/algorithms/leetcode/BrowserHistory {
	public fun <init> (Ljava/lang/String;)V
	public fun back (I)Ljava/lang/String;
	public fun forward (I)Ljava/lang/String;
	public fun visit (Ljava/lang/String;)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/BstToGst {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/BstToGstBruteForce : dev/shtanko/algorithms/leetcode/BstToGst {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/BstToGstInOrder : dev/shtanko/algorithms/leetcode/BstToGst {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/BstToGstInOrderIterative : dev/shtanko/algorithms/leetcode/BstToGst {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/BstToGstMorrisTraversal : dev/shtanko/algorithms/leetcode/BstToGst {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/BuddyStringsKt {
	public static final fun buddyStrings (Lkotlin/Pair;)Z
}

public final class dev/shtanko/algorithms/leetcode/BuildArrayWithStackOperations {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/BuildArrayWithStackOperations$Companion;
	public fun <init> ()V
	public final fun invoke ([II)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/BuildArrayWithStackOperations$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/BuildMatrixWithConditions {
	public abstract fun invoke (I[[I[[I)[[I
}

public final class dev/shtanko/algorithms/leetcode/BuildMatrixWithConditionsDFS : dev/shtanko/algorithms/leetcode/BuildMatrixWithConditions {
	public fun <init> ()V
	public fun invoke (I[[I[[I)[[I
}

public final class dev/shtanko/algorithms/leetcode/BuildMatrixWithConditionsKahn : dev/shtanko/algorithms/leetcode/BuildMatrixWithConditions {
	public fun <init> ()V
	public fun invoke (I[[I[[I)[[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/BulbSwitcher {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/BulbSwitcherMath : dev/shtanko/algorithms/leetcode/BulbSwitcher {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/BurstBalloons {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/BurstBalloonsDP : dev/shtanko/algorithms/leetcode/BurstBalloons {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/BurstBalloonsMemoization : dev/shtanko/algorithms/leetcode/BurstBalloons {
	public fun <init> ()V
	public final fun burst ([[I[III)I
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/BusRoutes {
	public abstract fun invoke ([[III)I
}

public final class dev/shtanko/algorithms/leetcode/BusRoutesBFS : dev/shtanko/algorithms/leetcode/BusRoutes {
	public fun <init> ()V
	public fun invoke ([[III)I
}

public final class dev/shtanko/algorithms/leetcode/BusRoutesBFS2 : dev/shtanko/algorithms/leetcode/BusRoutes {
	public fun <init> ()V
	public fun invoke ([[III)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/BuyTwoChocolates {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/BuyTwoChocolates$CheckEveryPairOfChocolate : dev/shtanko/algorithms/leetcode/BuyTwoChocolates {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/BuyTwoChocolates$CheckEveryPairOfChocolate;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([II)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/BuyTwoChocolates$CountingSort : dev/shtanko/algorithms/leetcode/BuyTwoChocolates {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/BuyTwoChocolates$CountingSort;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([II)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/BuyTwoChocolates$Greedy : dev/shtanko/algorithms/leetcode/BuyTwoChocolates {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/BuyTwoChocolates$Greedy;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([II)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/BuyTwoChocolates$OnePass : dev/shtanko/algorithms/leetcode/BuyTwoChocolates {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/BuyTwoChocolates$OnePass;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([II)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/BuyTwoChocolates$Simple : dev/shtanko/algorithms/leetcode/BuyTwoChocolates {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/BuyTwoChocolates$Simple;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([II)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/BuyTwoChocolates$TwoPasses : dev/shtanko/algorithms/leetcode/BuyTwoChocolates {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/BuyTwoChocolates$TwoPasses;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([II)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/CBSLinearScan : dev/shtanko/algorithms/leetcode/CountBinarySubstrings {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/CESearchWithArray : dev/shtanko/algorithms/leetcode/CountingElements {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/CESearchingWithHashSet : dev/shtanko/algorithms/leetcode/CountingElements {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/CESearchingWithSortedArray : dev/shtanko/algorithms/leetcode/CountingElements {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/CachingRows : dev/shtanko/algorithms/leetcode/NumMatrix {
	public fun <init> ([[I)V
	public fun sumRegion (IIII)I
}

public final class dev/shtanko/algorithms/leetcode/CachingSmarter : dev/shtanko/algorithms/leetcode/NumMatrix {
	public fun <init> ([[I)V
	public fun sumRegion (IIII)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CalculationStrategy {
	public abstract fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CanArrange {
	public abstract fun invoke ([II)Z
}

public final class dev/shtanko/algorithms/leetcode/CanArrangeHashing : dev/shtanko/algorithms/leetcode/CanArrange {
	public fun <init> ()V
	public fun invoke ([II)Z
}

public final class dev/shtanko/algorithms/leetcode/CanArrangeTwoPointers : dev/shtanko/algorithms/leetcode/CanArrange {
	public fun <init> ()V
	public fun invoke ([II)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/CanBeEqual {
	public abstract fun invoke ([I[I)Z
}

public final class dev/shtanko/algorithms/leetcode/CanBeEqual1Dictionary : dev/shtanko/algorithms/leetcode/CanBeEqual {
	public fun <init> ()V
	public fun invoke ([I[I)Z
}

public final class dev/shtanko/algorithms/leetcode/CanBeEqualCounting : dev/shtanko/algorithms/leetcode/CanBeEqual {
	public fun <init> ()V
	public fun invoke ([I[I)Z
}

public final class dev/shtanko/algorithms/leetcode/CanBeEqualMap : dev/shtanko/algorithms/leetcode/CanBeEqualStrategy {
	public fun <init> ()V
	public fun invoke ([I[I)Z
}

public final class dev/shtanko/algorithms/leetcode/CanBeEqualSort : dev/shtanko/algorithms/leetcode/CanBeEqualStrategy {
	public fun <init> ()V
	public fun invoke ([I[I)Z
}

public final class dev/shtanko/algorithms/leetcode/CanBeEqualSorting : dev/shtanko/algorithms/leetcode/CanBeEqual {
	public fun <init> ()V
	public fun invoke ([I[I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/CanBeEqualStrategy {
	public abstract fun invoke ([I[I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/CanBeValid {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/CanBeValidCountingBrackets : dev/shtanko/algorithms/leetcode/CanBeValid {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/CanBeValidLeftRight : dev/shtanko/algorithms/leetcode/CanBeValid {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/CanJumpKt {
	public static final fun canJump ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/CanMakeArithmeticProgressionKt {
	public static final fun canMakeArithmeticProgression ([I)Z
	public static final fun canMakeArithmeticProgressionSet ([I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/CanMakeSubsequence {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/CanMakeSubsequence$TwoPointers : dev/shtanko/algorithms/leetcode/CanMakeSubsequence {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/CanMakeSubsequence$TwoPointers;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/CanMergeBST {
	public abstract fun invoke (Ljava/util/List;)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/CanMergeBSTImpl : dev/shtanko/algorithms/leetcode/CanMergeBST {
	public fun <init> ()V
	public fun invoke (Ljava/util/List;)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/CanPartitionKSubsets {
	public abstract fun invoke ([II)Z
}

public final class dev/shtanko/algorithms/leetcode/CanPartitionKSubsetsDP : dev/shtanko/algorithms/leetcode/CanPartitionKSubsets {
	public fun <init> ()V
	public fun invoke ([II)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/CanPlaceFlowers {
	public abstract fun invoke ([II)Z
}

public final class dev/shtanko/algorithms/leetcode/CanPlaceFlowersGreedy : dev/shtanko/algorithms/leetcode/CanPlaceFlowers {
	public fun <init> ()V
	public fun invoke ([II)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/CanSeePersonsCount {
	public abstract fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/CanSeePersonsCountStack : dev/shtanko/algorithms/leetcode/CanSeePersonsCount {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CanSortArray {
	public abstract fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/CanSortArrayBackwardPass : dev/shtanko/algorithms/leetcode/CanSortArray {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/CanWinNimKt {
	public static final fun canWinNim (I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/Candy {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/Candy2Arrays : dev/shtanko/algorithms/leetcode/Candy {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/CandyArray : dev/shtanko/algorithms/leetcode/Candy {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/CandyBruteForce : dev/shtanko/algorithms/leetcode/Candy {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/CandyMath : dev/shtanko/algorithms/leetcode/Candy {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CarPooling {
	public abstract fun invoke ([[II)Z
}

public final class dev/shtanko/algorithms/leetcode/CarPoolingInterval : dev/shtanko/algorithms/leetcode/CarPooling {
	public fun <init> ()V
	public fun invoke ([[II)Z
}

public final class dev/shtanko/algorithms/leetcode/CarPoolingMeetingRoom : dev/shtanko/algorithms/leetcode/CarPooling {
	public fun <init> ()V
	public fun invoke ([[II)Z
}

public final class dev/shtanko/algorithms/leetcode/CarPoolingStream : dev/shtanko/algorithms/leetcode/CarPooling {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/CarPoolingStream$Companion;
	public fun <init> ()V
	public fun invoke ([[II)Z
}

public final class dev/shtanko/algorithms/leetcode/CarPoolingStream$Companion {
}

public final class dev/shtanko/algorithms/leetcode/CascadingSubsets : dev/shtanko/algorithms/leetcode/Subsets {
	public fun <init> ()V
	public fun invoke ([I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/CatAndMouse {
	public abstract fun catMouseGame ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/CatAndMouseMinimax : dev/shtanko/algorithms/leetcode/CatAndMouse {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/CatAndMouseMinimax$Companion;
	public fun <init> ()V
	public fun catMouseGame ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/CatAndMouseMinimax$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/CenterOfStarGraph {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/CenterOfStarGraphGreedy : dev/shtanko/algorithms/leetcode/CenterOfStarGraph {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ChalkReplacer {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/ChalkReplacerKt {
	public static final fun getChalkReplacerBs ()Ldev/shtanko/algorithms/leetcode/ChalkReplacer;
	public static final fun getChalkReplacerPrefixSum ()Ldev/shtanko/algorithms/leetcode/ChalkReplacer;
}

public abstract interface class dev/shtanko/algorithms/leetcode/ChampagneTower {
	public abstract fun invoke (III)D
}

public final class dev/shtanko/algorithms/leetcode/ChampagneTowerSimulation : dev/shtanko/algorithms/leetcode/ChampagneTower {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/ChampagneTowerSimulation$Companion;
	public fun <init> ()V
	public fun invoke (III)D
}

public final class dev/shtanko/algorithms/leetcode/ChampagneTowerSimulation$Companion {
}

public final class dev/shtanko/algorithms/leetcode/CharacterType : java/lang/Enum {
	public static final field DIGIT Ldev/shtanko/algorithms/leetcode/CharacterType;
	public static final field LOWER_CASE Ldev/shtanko/algorithms/leetcode/CharacterType;
	public static final field UPPER_CASE Ldev/shtanko/algorithms/leetcode/CharacterType;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Ldev/shtanko/algorithms/leetcode/CharacterType;
	public static fun values ()[Ldev/shtanko/algorithms/leetcode/CharacterType;
}

public abstract interface class dev/shtanko/algorithms/leetcode/CheckCompletenessOfBinaryTree {
	public abstract fun isCompleteTree (Ldev/shtanko/algorithms/leetcode/TreeNode;)Z
}

public final class dev/shtanko/algorithms/leetcode/CheckCompletenessOfBinaryTreeBFS : dev/shtanko/algorithms/leetcode/CheckCompletenessOfBinaryTree {
	public fun <init> ()V
	public fun isCompleteTree (Ldev/shtanko/algorithms/leetcode/TreeNode;)Z
}

public final class dev/shtanko/algorithms/leetcode/CheckCompletenessOfBinaryTreeDFS : dev/shtanko/algorithms/leetcode/CheckCompletenessOfBinaryTree {
	public fun <init> ()V
	public fun isCompleteTree (Ldev/shtanko/algorithms/leetcode/TreeNode;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/CheckIfExist {
	public abstract fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/CheckIfExistHashMap : dev/shtanko/algorithms/leetcode/CheckIfExist {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/CheckPossibility {
	public abstract fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/CheckPossibilityGreedy : dev/shtanko/algorithms/leetcode/CheckPossibility {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/CheckStraightLine {
	public abstract fun invoke ([[I)Z
}

public final class dev/shtanko/algorithms/leetcode/CheckStraightLineSlopeProperty : dev/shtanko/algorithms/leetcode/CheckStraightLine {
	public fun <init> ()V
	public fun invoke ([[I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/CheckWays {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/CheckWaysDFS : dev/shtanko/algorithms/leetcode/CheckWays {
	public fun <init> ()V
	public final fun getResult ()I
	public fun invoke ([[I)I
	public final fun setResult (I)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/CherryPickup {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/CherryPickup2DPBottomUp : dev/shtanko/algorithms/leetcode/CherryPickup2Strategy {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/CherryPickup2DPTopDown : dev/shtanko/algorithms/leetcode/CherryPickup2Strategy {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CherryPickup2Strategy {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/CherryPickupBottomUp : dev/shtanko/algorithms/leetcode/CherryPickup {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/CherryPickupTopDown : dev/shtanko/algorithms/leetcode/CherryPickup {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/CherryPickupTopDown$Companion;
	public fun <init> ()V
	public final fun getN ()I
	public fun invoke ([[I)I
	public final fun setN (I)V
}

public final class dev/shtanko/algorithms/leetcode/CherryPickupTopDown$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/CircularDeque {
	public abstract fun deleteFront ()Z
	public abstract fun deleteLast ()Z
	public abstract fun getFront ()I
	public abstract fun getRear ()I
	public abstract fun insertFront (I)Z
	public abstract fun insertLast (I)Z
	public abstract fun isEmpty ()Z
	public abstract fun isFull ()Z
}

public final class dev/shtanko/algorithms/leetcode/CircularDequeArray : dev/shtanko/algorithms/leetcode/CircularDeque {
	public fun <init> (I)V
	public fun deleteFront ()Z
	public fun deleteLast ()Z
	public fun getFront ()I
	public fun getRear ()I
	public fun insertFront (I)Z
	public fun insertLast (I)Z
	public fun isEmpty ()Z
	public fun isFull ()Z
}

public final class dev/shtanko/algorithms/leetcode/CircularDequeLinkedList : dev/shtanko/algorithms/leetcode/CircularDeque {
	public fun <init> (I)V
	public fun deleteFront ()Z
	public fun deleteLast ()Z
	public fun getFront ()I
	public fun getRear ()I
	public fun insertFront (I)Z
	public fun insertLast (I)Z
	public fun isEmpty ()Z
	public fun isFull ()Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/CircularPermutation {
	public abstract fun invoke (II)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/CircularPermutationGrayCode : dev/shtanko/algorithms/leetcode/CircularPermutation {
	public fun <init> ()V
	public fun invoke (II)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/CircularQueue {
	public fun <init> (I)V
	public final fun deQueue ()Z
	public final fun enQueue (I)Z
	public final fun getK ()I
	public final fun isEmpty ()Z
	public final fun isFull ()Z
	public final fun rear ()I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CircularSentence {
	public abstract fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/CircularSentenceBF : dev/shtanko/algorithms/leetcode/CircularSentence {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/CircularSentenceSpaceOpt : dev/shtanko/algorithms/leetcode/CircularSentence {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/ClimbingStairs {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/ClimbingStairsBinetsMethod : dev/shtanko/algorithms/leetcode/ClimbingStairs {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/ClimbingStairsBruteForce : dev/shtanko/algorithms/leetcode/ClimbingStairs {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/ClimbingStairsDP : dev/shtanko/algorithms/leetcode/ClimbingStairs {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/ClimbingStairsFibonacci : dev/shtanko/algorithms/leetcode/ClimbingStairs {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/ClimbingStairsFibonacciFormula : dev/shtanko/algorithms/leetcode/ClimbingStairs {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/ClimbingStairsFibonacciFormula$Companion;
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/ClimbingStairsFibonacciFormula$Companion {
}

public final class dev/shtanko/algorithms/leetcode/ClimbingStairsRecursionMemo : dev/shtanko/algorithms/leetcode/ClimbingStairs {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CloseStrings {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/CloseStringsBitwise : dev/shtanko/algorithms/leetcode/CloseStrings {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/CloseStringsMap : dev/shtanko/algorithms/leetcode/CloseStrings {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/CloseStringsSort : dev/shtanko/algorithms/leetcode/CloseStrings {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/ClosestBST {
	public abstract fun closestValue (Ldev/shtanko/algorithms/leetcode/TreeNode;D)I
}

public final class dev/shtanko/algorithms/leetcode/ClosestBSTBinarySearch : dev/shtanko/algorithms/leetcode/ClosestBST {
	public fun <init> ()V
	public fun closestValue (Ldev/shtanko/algorithms/leetcode/TreeNode;D)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ClosestDessertCost {
	public abstract fun invoke ([I[II)I
}

public final class dev/shtanko/algorithms/leetcode/ClosestDessertCostBacktracking : dev/shtanko/algorithms/leetcode/ClosestDessertCost {
	public fun <init> ()V
	public fun invoke ([I[II)I
}

public final class dev/shtanko/algorithms/leetcode/ClosestDivisorsKt {
	public static final fun closestDivisors (I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ClosestMeetingNode {
	public abstract fun invoke ([III)I
}

public final class dev/shtanko/algorithms/leetcode/ClosestMeetingNodeDFS : dev/shtanko/algorithms/leetcode/ClosestMeetingNode {
	public fun <init> ()V
	public fun invoke ([III)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CoinChange {
	public abstract fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CoinChange2 {
	public abstract fun change (I[I)I
}

public final class dev/shtanko/algorithms/leetcode/CoinChange2BottomUp : dev/shtanko/algorithms/leetcode/CoinChange2 {
	public fun <init> ()V
	public fun change (I[I)I
}

public final class dev/shtanko/algorithms/leetcode/CoinChange2SpaceOpt : dev/shtanko/algorithms/leetcode/CoinChange2 {
	public fun <init> ()V
	public fun change (I[I)I
}

public final class dev/shtanko/algorithms/leetcode/CoinChange2TopDown : dev/shtanko/algorithms/leetcode/CoinChange2 {
	public fun <init> ()V
	public fun change (I[I)I
}

public final class dev/shtanko/algorithms/leetcode/CoinChangeDP : dev/shtanko/algorithms/leetcode/CoinChange {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CoinPath {
	public abstract fun invoke ([II)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/CoinPathDP : dev/shtanko/algorithms/leetcode/CoinPath {
	public fun <init> ()V
	public fun invoke ([II)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/CoinPathMemo : dev/shtanko/algorithms/leetcode/CoinPath {
	public fun <init> ()V
	public fun invoke ([II)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/CollectApples {
	public abstract fun minTime (I[[ILjava/util/List;)I
}

public final class dev/shtanko/algorithms/leetcode/CollectApplesDFS : dev/shtanko/algorithms/leetcode/CollectApples {
	public fun <init> ()V
	public fun minTime (I[[ILjava/util/List;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CombinationIterator {
	public abstract fun hasNext ()Z
	public abstract fun next ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/CombinationIteratorImpl : dev/shtanko/algorithms/leetcode/CombinationIterator {
	public fun <init> (Ljava/lang/String;I)V
	public fun hasNext ()Z
	public fun next ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/CombinationSum2 {
	public abstract fun invoke ([II)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/CombinationSum2Compact : dev/shtanko/algorithms/leetcode/CombinationSum2 {
	public fun <init> ()V
	public fun invoke ([II)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/CombinationSum2Compact$TreeNode {
	public fun <init> (IILjava/util/List;)V
	public synthetic fun <init> (IILjava/util/List;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()I
	public final fun component2 ()I
	public final fun component3 ()Ljava/util/List;
	public final fun copy (IILjava/util/List;)Ldev/shtanko/algorithms/leetcode/CombinationSum2Compact$TreeNode;
	public static synthetic fun copy$default (Ldev/shtanko/algorithms/leetcode/CombinationSum2Compact$TreeNode;IILjava/util/List;ILjava/lang/Object;)Ldev/shtanko/algorithms/leetcode/CombinationSum2Compact$TreeNode;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getPath ()Ljava/util/List;
	public final fun getStartIndex ()I
	public final fun getTarget ()I
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/CombinationSum4 {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/CombinationSum4BottomUp : dev/shtanko/algorithms/leetcode/CombinationSum4 {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/CombinationSum4TopDown : dev/shtanko/algorithms/leetcode/CombinationSum4 {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/CombinationSumKt {
	public static final fun combinationSum ([II)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/Combinations {
	public abstract fun invoke (II)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/CombinationsBacktracking : dev/shtanko/algorithms/leetcode/Combinations {
	public fun <init> ()V
	public fun invoke (II)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/Comparator2 : java/util/Comparator {
	public fun <init> ()V
	public synthetic fun compare (Ljava/lang/Object;Ljava/lang/Object;)I
	public fun compare (Ljava/util/Map$Entry;Ljava/util/Map$Entry;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CompareVersionNums {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/CompareVersionNumsStream : dev/shtanko/algorithms/leetcode/CompareVersionNums {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/CompareVersionNumsStream$VersionStream {
	public fun <init> (Ljava/lang/String;)V
	public final fun getIndex ()I
	public final fun getVersionPart ()I
	public final fun isAvailable ()Z
	public final fun readVersionPart ()I
	public final fun setIndex (I)V
	public final fun setVersionPart (I)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/ComponentValue {
	public abstract fun invoke ([I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/ComponentValueImpl : dev/shtanko/algorithms/leetcode/ComponentValue {
	public fun <init> ()V
	public fun invoke ([I[[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ConcatenatedWords {
	public abstract fun findAllConcatenatedWordsInADict ([Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/ConcatenatedWordsDP : dev/shtanko/algorithms/leetcode/ConcatenatedWords {
	public fun <init> ()V
	public fun findAllConcatenatedWordsInADict ([Ljava/lang/String;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/ConsecutiveCharactersStrategy {
	public abstract fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ConstrainedSubsequenceSum {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/ConstrainedSubsequenceSumDP : dev/shtanko/algorithms/leetcode/ConstrainedSubsequenceSum {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/ConstrainedSubsequenceSumDeque : dev/shtanko/algorithms/leetcode/ConstrainedSubsequenceSum {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/ConstrainedSubsequenceSumQueue : dev/shtanko/algorithms/leetcode/ConstrainedSubsequenceSum {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/ConstrainedSubsequenceSumQueueOpt : dev/shtanko/algorithms/leetcode/ConstrainedSubsequenceSum {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/Construct2DArray {
	public abstract fun invoke ([III)[[I
}

public final class dev/shtanko/algorithms/leetcode/Construct2DArrayKt {
	public static final fun getConstruct2DArrayMath ()Ldev/shtanko/algorithms/leetcode/Construct2DArray;
}

public abstract interface class dev/shtanko/algorithms/leetcode/ConstructBinaryTree {
	public abstract fun buildTree ([I[I)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/ConstructBinaryTree2 {
	public abstract fun buildTree ([I[I)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/ConstructBinaryTree2Recursive : dev/shtanko/algorithms/leetcode/ConstructBinaryTree2 {
	public fun <init> ()V
	public fun buildTree ([I[I)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/ConstructBinaryTreeRecursion : dev/shtanko/algorithms/leetcode/ConstructBinaryTree {
	public fun <init> ()V
	public fun buildTree ([I[I)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/ConstructQuadTree {
	public abstract fun construct ([[I)Ldev/shtanko/algorithms/leetcode/QuadTreeNode;
}

public final class dev/shtanko/algorithms/leetcode/ConstructQuadTreeRecursive : dev/shtanko/algorithms/leetcode/ConstructQuadTree {
	public fun <init> ()V
	public fun construct ([[I)Ldev/shtanko/algorithms/leetcode/QuadTreeNode;
	public final fun helper ([[IIII)Ldev/shtanko/algorithms/leetcode/QuadTreeNode;
}

public final class dev/shtanko/algorithms/leetcode/ConstructStringFromBinaryTreeRecursion : dev/shtanko/algorithms/leetcode/ConstructStringFromBinaryTreeStrategy {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ConstructStringFromBinaryTreeStack : dev/shtanko/algorithms/leetcode/ConstructStringFromBinaryTreeStrategy {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/ConstructStringFromBinaryTreeStrategy {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ContainerWithMostWaterBruteForce : dev/shtanko/algorithms/leetcode/ContainerWithMostWaterStrategy {
	public fun <init> ()V
	public fun maxArea ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ContainerWithMostWaterStrategy {
	public abstract fun maxArea ([I)I
}

public final class dev/shtanko/algorithms/leetcode/ContainerWithMostWaterTwoPointer : dev/shtanko/algorithms/leetcode/ContainerWithMostWaterStrategy {
	public fun <init> ()V
	public fun maxArea ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ContainsDuplicate2 {
	public abstract fun invoke ([II)Z
}

public final class dev/shtanko/algorithms/leetcode/ContainsDuplicateBehavior : dev/shtanko/algorithms/leetcode/ContainsDuplicate2 {
	public fun <init> (Ljava/util/Set;)V
	public fun invoke ([II)Z
}

public final class dev/shtanko/algorithms/leetcode/ContainsDuplicateBinarySearchTree : dev/shtanko/algorithms/leetcode/ContainsDuplicate2 {
	public fun <init> ()V
	public fun invoke ([II)Z
}

public final class dev/shtanko/algorithms/leetcode/ContainsDuplicateHash : dev/shtanko/algorithms/leetcode/ContainsDuplicate2 {
	public fun <init> ()V
	public fun invoke ([II)Z
}

public final class dev/shtanko/algorithms/leetcode/ContainsDuplicateLinear : dev/shtanko/algorithms/leetcode/ContainsDuplicate2 {
	public fun <init> ()V
	public fun invoke ([II)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/ContainsDuplicateStrategy {
	public abstract fun invoke ([I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/ContiguousArray {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/ContiguousArrayExtraArray : dev/shtanko/algorithms/leetcode/ContiguousArray {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/ContiguousArrayHashMap : dev/shtanko/algorithms/leetcode/ContiguousArray {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ContinuousSubarraySum {
	public abstract fun invoke ([II)Z
}

public final class dev/shtanko/algorithms/leetcode/ContinuousSubarraySumPrefixSum : dev/shtanko/algorithms/leetcode/ContinuousSubarraySum {
	public fun <init> ()V
	public fun invoke ([II)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/ContinuousSubarrays {
	public abstract fun invoke ([I)J
}

public final class dev/shtanko/algorithms/leetcode/ContinuousSubarrays$MonotonicDeque : dev/shtanko/algorithms/leetcode/ContinuousSubarrays {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/ContinuousSubarrays$MonotonicDeque;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I)J
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ContinuousSubarrays$OptimizedTwoPointer : dev/shtanko/algorithms/leetcode/ContinuousSubarrays {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/ContinuousSubarrays$OptimizedTwoPointer;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I)J
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ContinuousSubarrays$PriorityQueueStrategy : dev/shtanko/algorithms/leetcode/ContinuousSubarrays {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/ContinuousSubarrays$PriorityQueueStrategy;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I)J
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ContinuousSubarrays$SortedMap : dev/shtanko/algorithms/leetcode/ContinuousSubarrays {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/ContinuousSubarrays$SortedMap;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I)J
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/CorpFlightBookingsKt {
	public static final fun corpFlightBookings ([[II)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountAllPossibleRoutes {
	public abstract fun invoke ([IIII)I
}

public final class dev/shtanko/algorithms/leetcode/CountAllPossibleRoutesIter : dev/shtanko/algorithms/leetcode/CountAllPossibleRoutes {
	public fun <init> ()V
	public fun invoke ([IIII)I
}

public final class dev/shtanko/algorithms/leetcode/CountAllPossibleRoutesRec : dev/shtanko/algorithms/leetcode/CountAllPossibleRoutes {
	public fun <init> ()V
	public fun invoke ([IIII)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountBalls {
	public static final field ARR_SIZE I
	public static final field Companion Ldev/shtanko/algorithms/leetcode/CountBalls$Companion;
	public abstract fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/CountBalls$Companion {
	public static final field ARR_SIZE I
}

public final class dev/shtanko/algorithms/leetcode/CountBalls2 : dev/shtanko/algorithms/leetcode/CountBalls {
	public fun <init> ()V
	public fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/CountBallsBruteforce : dev/shtanko/algorithms/leetcode/CountBalls {
	public fun <init> ()V
	public fun invoke (II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountBinarySubstrings {
	public abstract fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountCharacters {
	public abstract fun invoke ([Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/CountCharactersArray : dev/shtanko/algorithms/leetcode/CountCharacters {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/CountCharactersHashMap : dev/shtanko/algorithms/leetcode/CountCharacters {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/CountCharactersStd : dev/shtanko/algorithms/leetcode/CountCharacters {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountComponents {
	public abstract fun invoke (I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/CountComponentsDFS : dev/shtanko/algorithms/leetcode/CountComponents {
	public fun <init> ()V
	public fun invoke (I[[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountConsistentStrings {
	public abstract fun invoke (Ljava/lang/String;[Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/CountConsistentStringsMap : dev/shtanko/algorithms/leetcode/CountConsistentStrings {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;[Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountDifferentPalindromicSubsequences {
	public abstract fun countPalindromicSubsequences (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/CountDifferentPalindromicSubsequencesDP : dev/shtanko/algorithms/leetcode/CountDifferentPalindromicSubsequences {
	public fun <init> ()V
	public fun countPalindromicSubsequences (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountFairPairs {
	public abstract fun invoke ([III)J
}

public final class dev/shtanko/algorithms/leetcode/CountFairPairsBinarySearch : dev/shtanko/algorithms/leetcode/CountFairPairs {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/CountFairPairsBinarySearch;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([III)J
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/CountFairPairsTwoPointers : dev/shtanko/algorithms/leetcode/CountFairPairs {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/CountFairPairsTwoPointers;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([III)J
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/CountGoodNodesInBinaryTree {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/CountGoodNodesInBinaryTree$Companion;
	public fun <init> ()V
	public final fun goodNodes (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/CountGoodNodesInBinaryTree$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountGoodNumbers {
	public abstract fun invoke (J)I
}

public final class dev/shtanko/algorithms/leetcode/CountGoodNumbersImpl : dev/shtanko/algorithms/leetcode/CountGoodNumbers {
	public fun <init> ()V
	public fun invoke (J)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountGoodStrings {
	public abstract fun invoke (IIII)I
}

public final class dev/shtanko/algorithms/leetcode/CountGoodStringsDPIterative : dev/shtanko/algorithms/leetcode/CountGoodStrings {
	public fun <init> ()V
	public fun invoke (IIII)I
}

public final class dev/shtanko/algorithms/leetcode/CountGoodStringsDPRecursive : dev/shtanko/algorithms/leetcode/CountGoodStrings {
	public fun <init> ()V
	public fun invoke (IIII)I
}

public final class dev/shtanko/algorithms/leetcode/CountGoodTripletsKt {
	public static final fun countGoodTriplets ([IIII)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountHiddenSequences {
	public abstract fun numberOfArrays ([III)I
}

public final class dev/shtanko/algorithms/leetcode/CountHiddenSequencesSF : dev/shtanko/algorithms/leetcode/CountHiddenSequences {
	public fun <init> ()V
	public fun numberOfArrays ([III)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountHighestScoreNodes {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/CountHighestScoreNodesDfs : dev/shtanko/algorithms/leetcode/CountHighestScoreNodes {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountHomogenous {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/CountHomogenousCountingStreaks : dev/shtanko/algorithms/leetcode/CountHomogenous {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountKDifference {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/CountKDifferenceBruteForce : dev/shtanko/algorithms/leetcode/CountKDifference {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/CountKDifferenceMap : dev/shtanko/algorithms/leetcode/CountKDifference {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/CountLargestGroupKt {
	public static final fun countLargestGroup (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountMaxOrSubsets {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/CountMaxOrSubsetsDPBitwise : dev/shtanko/algorithms/leetcode/CountMaxOrSubsets {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/CountMaxOrSubsetsDPBitwise$Companion;
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/CountMaxOrSubsetsDPBitwise$Companion {
}

public final class dev/shtanko/algorithms/leetcode/CountNegativesBinary : dev/shtanko/algorithms/leetcode/AbstractCountNegativesStrategy {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/CountNegativesTwoPointers : dev/shtanko/algorithms/leetcode/AbstractCountNegativesStrategy {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountNicePairs {
	public abstract fun invoke ([I)I
	public fun rev (I)I
}

public final class dev/shtanko/algorithms/leetcode/CountNicePairs$DefaultImpls {
	public static fun rev (Ldev/shtanko/algorithms/leetcode/CountNicePairs;I)I
}

public final class dev/shtanko/algorithms/leetcode/CountNicePairsSF : dev/shtanko/algorithms/leetcode/CountNicePairs {
	public fun <init> ()V
	public fun invoke ([I)I
	public fun rev (I)I
}

public final class dev/shtanko/algorithms/leetcode/CountNicePairsTwoSum : dev/shtanko/algorithms/leetcode/CountNicePairs {
	public fun <init> ()V
	public fun invoke ([I)I
	public fun rev (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountNodes {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/CountNodesBitrise : dev/shtanko/algorithms/leetcode/CountNodes {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/CountNodesIterative : dev/shtanko/algorithms/leetcode/CountNodes {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountNumberOfTeams {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/CountNumberOfTeamsSolution : dev/shtanko/algorithms/leetcode/CountNumberOfTeams {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/CountOdds {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/CountOdds;
	public final fun invoke (II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountOrders {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/CountOrdersBottomUp : dev/shtanko/algorithms/leetcode/CountOrders {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/CountOrdersFactorial : dev/shtanko/algorithms/leetcode/CountOrders {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/CountOrdersRecursion : dev/shtanko/algorithms/leetcode/CountOrders {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountPairs {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/CountPairsTwoSum : dev/shtanko/algorithms/leetcode/CountPairs {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/CountPairsTwoSum$Companion;
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/CountPairsTwoSum$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountPalindromicStrategy {
}

public final class dev/shtanko/algorithms/leetcode/CountPalindromicStrategy$CountLetters : dev/shtanko/algorithms/leetcode/CountPalindromicStrategy, dev/shtanko/algorithms/leetcode/CountPalindromicSubsequence {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/CountPalindromicStrategy$CountLetters;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/lang/String;)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/CountPalindromicStrategy$PreComputeFirstAndLastIndices : dev/shtanko/algorithms/leetcode/CountPalindromicStrategy, dev/shtanko/algorithms/leetcode/CountPalindromicSubsequence {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/CountPalindromicStrategy$PreComputeFirstAndLastIndices;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/lang/String;)I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountPalindromicSubsequence {
	public abstract fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountPaths {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/CountPathsDFSMemo : dev/shtanko/algorithms/leetcode/CountPaths {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/CountPathsSortDP : dev/shtanko/algorithms/leetcode/CountPaths {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountPoints {
	public abstract fun invoke ([[I[[I)[I
}

public final class dev/shtanko/algorithms/leetcode/CountPointsSort : dev/shtanko/algorithms/leetcode/CountPoints {
	public fun <init> ()V
	public fun invoke ([[I[[I)[I
}

public final class dev/shtanko/algorithms/leetcode/CountPrimesBrutForce : dev/shtanko/algorithms/leetcode/CountPrimesStrategy {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountPrimesStrategy {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/CountPrimesTimeComplexity : dev/shtanko/algorithms/leetcode/CountPrimesStrategy {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountPyramids {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/CountPyramidsDP : dev/shtanko/algorithms/leetcode/CountPyramids {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/CountPyramidsDP2 : dev/shtanko/algorithms/leetcode/CountPyramids {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountRangeSum {
	public abstract fun invoke ([III)I
}

public final class dev/shtanko/algorithms/leetcode/CountRangeSumSegmentTree : dev/shtanko/algorithms/leetcode/CountRangeSum {
	public fun <init> ()V
	public fun invoke ([III)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountSeniors {
	public abstract fun invoke ([Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/CountSeniorsBruteForce : dev/shtanko/algorithms/leetcode/CountSeniors {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/CountSeniorsBruteForce$Companion;
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/CountSeniorsBruteForce$Companion {
}

public final class dev/shtanko/algorithms/leetcode/CountSortedVowelBottomUp : dev/shtanko/algorithms/leetcode/CountSortedVowelStrings {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/CountSortedVowelBruteForce : dev/shtanko/algorithms/leetcode/CountSortedVowelStrings {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/CountSortedVowelMath : dev/shtanko/algorithms/leetcode/CountSortedVowelStrings {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/CountSortedVowelMath$Companion;
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/CountSortedVowelMath$Companion {
}

public final class dev/shtanko/algorithms/leetcode/CountSortedVowelRecursion : dev/shtanko/algorithms/leetcode/CountSortedVowelStrings {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountSortedVowelStrings {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/CountSortedVowelTopDynamic : dev/shtanko/algorithms/leetcode/CountSortedVowelStrings {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/CountSquares {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/CountSquares;
	public final fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountStudents {
	public abstract fun invoke ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/CountStudentsArray : dev/shtanko/algorithms/leetcode/CountStudents {
	public fun <init> ()V
	public fun invoke ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/CountStudentsCounting : dev/shtanko/algorithms/leetcode/CountStudents {
	public fun <init> ()V
	public fun invoke ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/CountStudentsStack : dev/shtanko/algorithms/leetcode/CountStudents {
	public fun <init> ()V
	public fun invoke ([I[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountSubIslands {
	public abstract fun invoke ([[I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/CountSubIslandsBFS : dev/shtanko/algorithms/leetcode/CountSubIslands {
	public fun <init> ()V
	public fun invoke ([[I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/CountSubIslandsDFS : dev/shtanko/algorithms/leetcode/CountSubIslands {
	public fun <init> ()V
	public fun invoke ([[I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/CountSubIslandsUnionFind : dev/shtanko/algorithms/leetcode/CountSubIslands {
	public fun <init> ()V
	public fun invoke ([[I[[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountSubTrees {
	public abstract fun invoke (I[[ILjava/lang/String;)[I
}

public final class dev/shtanko/algorithms/leetcode/CountSubTreesDFS : dev/shtanko/algorithms/leetcode/CountSubTrees {
	public fun <init> ()V
	public fun invoke (I[[ILjava/lang/String;)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountSubarrays {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/CountSubarraysMap : dev/shtanko/algorithms/leetcode/CountSubarrays {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountSubarraysMaxElement {
	public abstract fun invoke ([II)J
}

public final class dev/shtanko/algorithms/leetcode/CountSubarraysMaxElementMaxElement : dev/shtanko/algorithms/leetcode/CountSubarraysMaxElement {
	public fun <init> ()V
	public fun invoke ([II)J
}

public final class dev/shtanko/algorithms/leetcode/CountSubarraysMaxElementSlidingWindow : dev/shtanko/algorithms/leetcode/CountSubarraysMaxElement {
	public fun <init> ()V
	public fun invoke ([II)J
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountSubarraysWithFixedBounds {
	public abstract fun countSubarrays ([III)J
}

public final class dev/shtanko/algorithms/leetcode/CountSubarraysWithFixedBoundsSlidingWindow : dev/shtanko/algorithms/leetcode/CountSubarraysWithFixedBounds {
	public fun <init> ()V
	public fun countSubarrays ([III)J
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountSubgraphsForEachDiameter {
	public abstract fun invoke (I[[I)[I
}

public final class dev/shtanko/algorithms/leetcode/CountSubgraphsForEachDiameterDFS : dev/shtanko/algorithms/leetcode/CountSubgraphsForEachDiameter {
	public fun <init> ()V
	public fun invoke (I[[I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountSubmatricesWithAllOnes {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/CountSubmatricesWithAllOnesStack : dev/shtanko/algorithms/leetcode/CountSubmatricesWithAllOnes {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountTheRepetitions {
	public abstract fun invoke (Ljava/lang/String;ILjava/lang/String;I)I
}

public final class dev/shtanko/algorithms/leetcode/CountTheRepetitionsBetterBruteForce : dev/shtanko/algorithms/leetcode/CountTheRepetitions {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/CountTheRepetitionsBetterBruteForce$Companion;
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;ILjava/lang/String;I)I
}

public final class dev/shtanko/algorithms/leetcode/CountTheRepetitionsBetterBruteForce$Companion {
}

public final class dev/shtanko/algorithms/leetcode/CountTheRepetitionsBruteForce : dev/shtanko/algorithms/leetcode/CountTheRepetitions {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;ILjava/lang/String;I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountTriplets {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/CountTripletsBruteForce : dev/shtanko/algorithms/leetcode/CountTriplets {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountUnguarded {
	public abstract fun invoke (II[[I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/CountUnguardedSolution : dev/shtanko/algorithms/leetcode/CountUnguarded {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/CountUnguardedSolution;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (II[[I[[I)I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountUnreachablePairs {
	public abstract fun invoke (I[[I)J
}

public final class dev/shtanko/algorithms/leetcode/CountUnreachablePairsDFS : dev/shtanko/algorithms/leetcode/CountUnreachablePairs {
	public fun <init> ()V
	public fun invoke (I[[I)J
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountVowelsPermutation {
}

public final class dev/shtanko/algorithms/leetcode/CountVowelsPermutation$BottomUp : dev/shtanko/algorithms/leetcode/CountVowelsPermutationStrategy {
	public fun <init> ()V
	public fun invoke (I)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/CountVowelsPermutation$Matrix : dev/shtanko/algorithms/leetcode/CountVowelsPermutationStrategy {
	public fun <init> ()V
	public fun invoke (I)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/CountVowelsPermutation$OptimizedSpace : dev/shtanko/algorithms/leetcode/CountVowelsPermutationStrategy {
	public fun <init> ()V
	public fun invoke (I)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/CountVowelsPermutation$TopDown : dev/shtanko/algorithms/leetcode/CountVowelsPermutationStrategy {
	public fun <init> ()V
	public fun invoke (I)I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountVowelsPermutationStrategy {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/CounterMap : java/util/HashMap {
	public fun <init> ()V
	public final fun add (II)V
	public fun containsKey (Ljava/lang/Integer;)Z
	public final fun containsKey (Ljava/lang/Object;)Z
	public fun containsValue (Ljava/lang/Integer;)Z
	public final fun containsValue (Ljava/lang/Object;)Z
	public final fun entrySet ()Ljava/util/Set;
	public fun get (I)Ljava/lang/Integer;
	public final fun get (Ljava/lang/Object;)Ljava/lang/Integer;
	public final synthetic fun get (Ljava/lang/Object;)Ljava/lang/Object;
	public fun getEntries ()Ljava/util/Set;
	public fun getKeys ()Ljava/util/Set;
	public fun getOrDefault (Ljava/lang/Integer;Ljava/lang/Integer;)Ljava/lang/Integer;
	public final fun getOrDefault (Ljava/lang/Object;Ljava/lang/Integer;)Ljava/lang/Integer;
	public final synthetic fun getOrDefault (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
	public fun getSize ()I
	public fun getValues ()Ljava/util/Collection;
	public final fun keySet ()Ljava/util/Set;
	public fun remove (Ljava/lang/Integer;)Ljava/lang/Integer;
	public fun remove (Ljava/lang/Integer;Ljava/lang/Integer;)Z
	public final fun remove (Ljava/lang/Object;)Ljava/lang/Integer;
	public final synthetic fun remove (Ljava/lang/Object;)Ljava/lang/Object;
	public final fun remove (Ljava/lang/Object;Ljava/lang/Object;)Z
	public final fun size ()I
	public final fun values ()Ljava/util/Collection;
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountingBits {
	public abstract fun invoke (I)[I
}

public final class dev/shtanko/algorithms/leetcode/CountingBitsPopCount : dev/shtanko/algorithms/leetcode/CountingBits {
	public fun <init> ()V
	public fun invoke (I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CountingElements {
	public abstract fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CourseSchedule {
	public abstract fun invoke (I[[I)Z
}

public final class dev/shtanko/algorithms/leetcode/CourseScheduleDFS : dev/shtanko/algorithms/leetcode/CourseSchedule {
	public fun <init> ()V
	public fun invoke (I[[I)Z
}

public final class dev/shtanko/algorithms/leetcode/CourseScheduleKahn : dev/shtanko/algorithms/leetcode/CourseSchedule {
	public fun <init> ()V
	public fun invoke (I[[I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/CousinsInBinaryTree2 {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/CousinsInBinaryTree2BFS : dev/shtanko/algorithms/leetcode/CousinsInBinaryTree2 {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/CrackingSafe {
	public abstract fun invoke (II)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/CrackingSafeHierholzersAlgorithm : dev/shtanko/algorithms/leetcode/CrackingSafe {
	public fun <init> ()V
	public fun invoke (II)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/CrackingSafeInverseBurrowsWheelerTransform : dev/shtanko/algorithms/leetcode/CrackingSafe {
	public fun <init> ()V
	public fun invoke (II)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/CrawlerLogFolder {
	public abstract fun invoke ([Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/CrawlerLogFolderCounter : dev/shtanko/algorithms/leetcode/CrawlerLogFolder {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/CrawlerLogFolderFold : dev/shtanko/algorithms/leetcode/CrawlerLogFolder {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/CrawlerLogFolderStack : dev/shtanko/algorithms/leetcode/CrawlerLogFolder {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CreateBinaryTree {
	public abstract fun invoke ([[I)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/CreateBinaryTreeHashMap : dev/shtanko/algorithms/leetcode/CreateBinaryTree {
	public fun <init> ()V
	public fun invoke ([[I)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/CreateTargetArrayKt {
	public static final fun createTargetArray (Lkotlin/Pair;)[I
	public static final fun createTargetArray2 (Lkotlin/Pair;)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CriticalConnections {
	public abstract fun invoke (ILjava/util/List;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/CriticalConnectionsGraph : dev/shtanko/algorithms/leetcode/CriticalConnections {
	public fun <init> ()V
	public fun invoke (ILjava/util/List;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/CumulativeSum : dev/shtanko/algorithms/leetcode/KInversePairsArray {
	public fun <init> ()V
	public fun invoke (II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/CustomSortString {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/CustomSortStringComparator : dev/shtanko/algorithms/leetcode/CustomSortString {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/CustomSortStringFreqTable : dev/shtanko/algorithms/leetcode/CustomSortString {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/CycleDetection : dev/shtanko/algorithms/leetcode/CriticalConnections {
	public fun <init> ()V
	public fun invoke (ILjava/util/List;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/DPDayVariant : dev/shtanko/algorithms/leetcode/MinCostTickets {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/DPDayVariant$Companion;
	public fun <init> ()V
	public fun invoke ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/DPDayVariant$Companion {
}

public final class dev/shtanko/algorithms/leetcode/DPKadanesAlgorithm : dev/shtanko/algorithms/leetcode/MaximumSubarray {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/DPWindowVariant : dev/shtanko/algorithms/leetcode/MinCostTickets {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/DPWindowVariant$Companion;
	public fun <init> ()V
	public fun invoke ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/DPWindowVariant$Companion {
}

public final class dev/shtanko/algorithms/leetcode/DSU {
	public fun <init> (I)V
	public final fun find (I)I
	public final fun getRoot ()[I
	public final fun getSize ()[I
	public final fun setRoot ([I)V
	public final fun setSize ([I)V
	public final fun union (II)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/DailyTemperatures {
	public abstract fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/DailyTemperaturesArr : dev/shtanko/algorithms/leetcode/DailyTemperatures {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/DailyTemperaturesDeque : dev/shtanko/algorithms/leetcode/DailyTemperatures {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/DailyTemperaturesStack : dev/shtanko/algorithms/leetcode/DailyTemperatures {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/DayOfTheWeekKt {
	public static final fun dayOfTheWeek (Lkotlin/Triple;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/DecodeMessage {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/DecodeMessageBruteForce : dev/shtanko/algorithms/leetcode/DecodeMessage {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/DecodeMessageSB : dev/shtanko/algorithms/leetcode/DecodeMessage {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/DecodeString {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/DecodeStringRecursive : dev/shtanko/algorithms/leetcode/DecodeString {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/DecodeStringStack : dev/shtanko/algorithms/leetcode/DecodeString {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/DecodeWays {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/DecodeWays2ConstantSpaceDynamicProgramming : dev/shtanko/algorithms/leetcode/DecodeWays2Strategy {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/DecodeWays2DynamicProgramming : dev/shtanko/algorithms/leetcode/DecodeWays2Strategy {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/DecodeWays2RecursionWithMemoization : dev/shtanko/algorithms/leetcode/DecodeWays2Strategy {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/DecodeWays2Strategy {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/DecodeWaysDP : dev/shtanko/algorithms/leetcode/DecodeWays {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/DecodedStringAtIndex {
	public abstract fun invoke (Ljava/lang/String;I)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/DecodedStringAtIndexSolution : dev/shtanko/algorithms/leetcode/DecodedStringAtIndex {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;I)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/DecompressRLElistKt {
	public static final fun decompressRLEList ([I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/DeepestLeavesSum {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/DeepestLeavesSumBFS : dev/shtanko/algorithms/leetcode/DeepestLeavesSum {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/DeepestLeavesSumDFS : dev/shtanko/algorithms/leetcode/DeepestLeavesSum {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/DeepestLeavesSumOptimizedBFS : dev/shtanko/algorithms/leetcode/DeepestLeavesSum {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/DefangingIPAddressKt {
	public static final fun defangIPaddr (Ljava/lang/String;)Ljava/lang/String;
	public static final fun defangIPaddrNaive (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/DefuseTheBomb {
	public abstract fun invoke ([II)[I
}

public final class dev/shtanko/algorithms/leetcode/DefuseTheBombSlidingWindow : dev/shtanko/algorithms/leetcode/DefuseTheBomb {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/DefuseTheBombSlidingWindow;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([II)[I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/DegreeCount : dev/shtanko/algorithms/leetcode/CenterOfStarGraph {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/DegreeOfArray {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/DegreeOfArray;
	public final fun findShortestSubArray ([I)I
}

public final class dev/shtanko/algorithms/leetcode/DelNodesKt {
	public static final fun delNodes (Ldev/shtanko/algorithms/leetcode/TreeNode;[I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/DeleteAndEarn {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/DeleteAndEarnBest : dev/shtanko/algorithms/leetcode/DeleteAndEarn {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/DeleteAndEarnBottomUp : dev/shtanko/algorithms/leetcode/DeleteAndEarn {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/DeleteAndEarnBottomUpOpt : dev/shtanko/algorithms/leetcode/DeleteAndEarn {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/DeleteAndEarnIterative : dev/shtanko/algorithms/leetcode/DeleteAndEarn {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/DeleteAndEarnTopDown : dev/shtanko/algorithms/leetcode/DeleteAndEarn {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/DeleteTreeNodes {
	public abstract fun invoke (I[I[I)I
}

public final class dev/shtanko/algorithms/leetcode/DeleteTreeNodesBruteForce : dev/shtanko/algorithms/leetcode/DeleteTreeNodes {
	public fun <init> ()V
	public fun invoke (I[I[I)I
}

public final class dev/shtanko/algorithms/leetcode/DeleteTreeNodesDFS : dev/shtanko/algorithms/leetcode/DeleteTreeNodes {
	public fun <init> ()V
	public fun invoke (I[I[I)I
}

public final class dev/shtanko/algorithms/leetcode/DesignHashMap {
	public fun <init> ()V
	public final fun get (I)I
	public final fun put (II)V
	public final fun remove (I)V
}

public final class dev/shtanko/algorithms/leetcode/DesignHashMap$ListNode {
	public fun <init> (II)V
	public final fun getKey ()I
	public final fun getNext ()Ldev/shtanko/algorithms/leetcode/DesignHashMap$ListNode;
	public final fun getValue ()I
	public final fun setNext (Ldev/shtanko/algorithms/leetcode/DesignHashMap$ListNode;)V
	public final fun setValue (I)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/DesignHashSet {
	public abstract fun add (I)V
	public abstract fun contains (I)Z
	public abstract fun remove (I)V
}

public final class dev/shtanko/algorithms/leetcode/DesignHashSetBitSet : dev/shtanko/algorithms/leetcode/DesignHashSet {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/DesignHashSetBitSet$Companion;
	public fun <init> ()V
	public fun add (I)V
	public fun contains (I)Z
	public fun remove (I)V
}

public final class dev/shtanko/algorithms/leetcode/DesignHashSetBitSet$Companion {
}

public final class dev/shtanko/algorithms/leetcode/DesignHashSetImpl : dev/shtanko/algorithms/leetcode/DesignHashSet {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/DesignHashSetImpl$Companion;
	public fun <init> ()V
	public fun add (I)V
	public fun contains (I)Z
	public final fun getList ()[Ldev/shtanko/algorithms/leetcode/DesignList;
	public fun remove (I)V
	public final fun setList ([Ldev/shtanko/algorithms/leetcode/DesignList;)V
}

public final class dev/shtanko/algorithms/leetcode/DesignHashSetImpl$Companion {
}

public final class dev/shtanko/algorithms/leetcode/DesignHashSetSimple : dev/shtanko/algorithms/leetcode/DesignHashSet {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/DesignHashSetSimple$Companion;
	public fun <init> ()V
	public fun add (I)V
	public fun contains (I)Z
	public fun remove (I)V
}

public final class dev/shtanko/algorithms/leetcode/DesignHashSetSimple$Companion {
}

public final class dev/shtanko/algorithms/leetcode/DesignLinkedList {
	public fun <init> ()V
	public final fun addAtHead (I)V
	public final fun addAtIndex (II)V
	public final fun addAtTail (I)V
	public final fun deleteAtIndex (I)V
	public final fun get (I)I
}

public final class dev/shtanko/algorithms/leetcode/DesignLinkedList$ListNode {
	public fun <init> (ILdev/shtanko/algorithms/leetcode/DesignLinkedList$ListNode;Ldev/shtanko/algorithms/leetcode/DesignLinkedList$ListNode;)V
	public synthetic fun <init> (ILdev/shtanko/algorithms/leetcode/DesignLinkedList$ListNode;Ldev/shtanko/algorithms/leetcode/DesignLinkedList$ListNode;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()I
	public final fun component2 ()Ldev/shtanko/algorithms/leetcode/DesignLinkedList$ListNode;
	public final fun component3 ()Ldev/shtanko/algorithms/leetcode/DesignLinkedList$ListNode;
	public final fun copy (ILdev/shtanko/algorithms/leetcode/DesignLinkedList$ListNode;Ldev/shtanko/algorithms/leetcode/DesignLinkedList$ListNode;)Ldev/shtanko/algorithms/leetcode/DesignLinkedList$ListNode;
	public static synthetic fun copy$default (Ldev/shtanko/algorithms/leetcode/DesignLinkedList$ListNode;ILdev/shtanko/algorithms/leetcode/DesignLinkedList$ListNode;Ldev/shtanko/algorithms/leetcode/DesignLinkedList$ListNode;ILjava/lang/Object;)Ldev/shtanko/algorithms/leetcode/DesignLinkedList$ListNode;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getNext ()Ldev/shtanko/algorithms/leetcode/DesignLinkedList$ListNode;
	public final fun getPrev ()Ldev/shtanko/algorithms/leetcode/DesignLinkedList$ListNode;
	public final fun getValue ()I
	public fun hashCode ()I
	public final fun setNext (Ldev/shtanko/algorithms/leetcode/DesignLinkedList$ListNode;)V
	public final fun setPrev (Ldev/shtanko/algorithms/leetcode/DesignLinkedList$ListNode;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/DesignList {
	public fun <init> ()V
	public final fun getHead ()Ldev/shtanko/algorithms/leetcode/DesignListNode;
	public final fun getTail ()Ldev/shtanko/algorithms/leetcode/DesignListNode;
	public final fun setHead (Ldev/shtanko/algorithms/leetcode/DesignListNode;)V
	public final fun setTail (Ldev/shtanko/algorithms/leetcode/DesignListNode;)V
}

public final class dev/shtanko/algorithms/leetcode/DesignListNode {
	public fun <init> ()V
	public fun <init> (Ljava/lang/Integer;)V
	public synthetic fun <init> (Ljava/lang/Integer;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ljava/lang/Integer;
	public final fun copy (Ljava/lang/Integer;)Ldev/shtanko/algorithms/leetcode/DesignListNode;
	public static synthetic fun copy$default (Ldev/shtanko/algorithms/leetcode/DesignListNode;Ljava/lang/Integer;ILjava/lang/Object;)Ldev/shtanko/algorithms/leetcode/DesignListNode;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getNext ()Ldev/shtanko/algorithms/leetcode/DesignListNode;
	public final fun getPre ()Ldev/shtanko/algorithms/leetcode/DesignListNode;
	public final fun getValue ()Ljava/lang/Integer;
	public fun hashCode ()I
	public final fun setNext (Ldev/shtanko/algorithms/leetcode/DesignListNode;)V
	public final fun setPre (Ldev/shtanko/algorithms/leetcode/DesignListNode;)V
	public final fun setValue (Ljava/lang/Integer;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/DesignParkingSystem {
	public fun <init> (III)V
	public final fun addCar (I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/DesignTicTacToe {
	public abstract fun move (III)I
}

public final class dev/shtanko/algorithms/leetcode/DestinationCityHashMap : dev/shtanko/algorithms/leetcode/DestinationCityStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/util/List;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/DestinationCitySet : dev/shtanko/algorithms/leetcode/DestinationCityStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/util/List;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/DestinationCityStrategy {
	public abstract fun invoke (Ljava/util/List;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/DestinationCityStrategyBF : dev/shtanko/algorithms/leetcode/DestinationCityStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/util/List;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/DestroyingAsteroids {
	public abstract fun invoke (I[I)Z
}

public final class dev/shtanko/algorithms/leetcode/DestroyingAsteroidsGreedy : dev/shtanko/algorithms/leetcode/DestroyingAsteroids {
	public fun <init> ()V
	public fun invoke (I[I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/DetectCapital {
	public abstract fun detectCapitalUse (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/DetectCapitalCharacter : dev/shtanko/algorithms/leetcode/DetectCapital {
	public fun <init> ()V
	public fun detectCapitalUse (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/DetectCapitalRegex : dev/shtanko/algorithms/leetcode/DetectCapital {
	public fun <init> ()V
	public fun detectCapitalUse (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/DiStringMatchKt {
	public static final fun diStringMatch (Ljava/lang/String;)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/DiagonalMatrixSort {
	public abstract fun diagonalSort ([[I)[[I
}

public final class dev/shtanko/algorithms/leetcode/DiagonalMatrixSortMap : dev/shtanko/algorithms/leetcode/DiagonalMatrixSort {
	public fun <init> ()V
	public fun diagonalSort ([[I)[[I
}

public final class dev/shtanko/algorithms/leetcode/DiagonalMatrixSortSF : dev/shtanko/algorithms/leetcode/DiagonalMatrixSort {
	public fun <init> ()V
	public fun diagonalSort ([[I)[[I
}

public final class dev/shtanko/algorithms/leetcode/DiagonalMatrixSortSFArray : dev/shtanko/algorithms/leetcode/DiagonalMatrixSort {
	public fun <init> ()V
	public fun diagonalSort ([[I)[[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/DiagonalTraverse2 {
	public abstract fun invoke (Ljava/util/List;)[I
}

public final class dev/shtanko/algorithms/leetcode/DiagonalTraverse2BFS : dev/shtanko/algorithms/leetcode/DiagonalTraverse2 {
	public fun <init> ()V
	public fun invoke (Ljava/util/List;)[I
}

public final class dev/shtanko/algorithms/leetcode/DiagonalTraverse2Group : dev/shtanko/algorithms/leetcode/DiagonalTraverse2 {
	public fun <init> ()V
	public fun invoke (Ljava/util/List;)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/DiameterOfBinaryTree {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/DiameterOfBinaryTreeMaxDepth : dev/shtanko/algorithms/leetcode/DiameterOfBinaryTree {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/DiffWaysToCompute {
	public abstract fun invoke (Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/DiffWaysToComputeDivideAndConquer : dev/shtanko/algorithms/leetcode/DiffWaysToCompute {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/DiffWaysToComputeRecursive : dev/shtanko/algorithms/leetcode/DiffWaysToCompute {
	public fun <init> ()V
	public final fun invoke (IIC)I
	public fun invoke (Ljava/lang/String;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/DigitCount {
	public abstract fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/DigitCountFreqArray : dev/shtanko/algorithms/leetcode/DigitCount {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/DinnerPlates : dev/shtanko/algorithms/leetcode/DinnerPlatesDS {
	public fun <init> (I)V
	public final fun getCapacity ()I
	public fun pop ()I
	public fun popAtStack (I)I
	public fun push (I)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/DinnerPlatesDS {
	public abstract fun pop ()I
	public abstract fun popAtStack (I)I
	public abstract fun push (I)V
}

public final class dev/shtanko/algorithms/leetcode/DinnerPlatesTree : dev/shtanko/algorithms/leetcode/DinnerPlatesDS {
	public fun <init> (I)V
	public final fun getCapacity ()I
	public fun pop ()I
	public fun popAtStack (I)I
	public fun push (I)V
}

public final class dev/shtanko/algorithms/leetcode/DisjointIntervals {
	public fun <init> ()V
	public final fun addNum (I)V
	public final fun getIntervals ()[[I
	public final fun getMap ()Ljava/util/TreeMap;
	public final fun setMap (Ljava/util/TreeMap;)V
}

public final class dev/shtanko/algorithms/leetcode/DisjointSetUnion : dev/shtanko/algorithms/leetcode/DistanceLimitedPathsExist {
	public fun <init> ()V
	public fun invoke (I[[I[[I)[Z
}

public final class dev/shtanko/algorithms/leetcode/DisjointSetUnion$UnionFind {
	public fun <init> (I)V
	public final fun areConnected (II)Z
	public final fun find (I)I
	public final fun join (II)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/DistanceKTree {
	public abstract fun distanceK (Ldev/shtanko/algorithms/leetcode/TreeNode;Ldev/shtanko/algorithms/leetcode/TreeNode;I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/DistanceKTreeBFS : dev/shtanko/algorithms/leetcode/DistanceKTree {
	public fun <init> ()V
	public fun distanceK (Ldev/shtanko/algorithms/leetcode/TreeNode;Ldev/shtanko/algorithms/leetcode/TreeNode;I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/DistanceKTreeDFS : dev/shtanko/algorithms/leetcode/DistanceKTree {
	public fun <init> ()V
	public fun distanceK (Ldev/shtanko/algorithms/leetcode/TreeNode;Ldev/shtanko/algorithms/leetcode/TreeNode;I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/DistanceKTreeParentPointers : dev/shtanko/algorithms/leetcode/DistanceKTree {
	public fun <init> ()V
	public fun distanceK (Ldev/shtanko/algorithms/leetcode/TreeNode;Ldev/shtanko/algorithms/leetcode/TreeNode;I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/DistanceLimitedPathsExist {
	public abstract fun invoke (I[[I[[I)[Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/DistantBarcodes {
	public abstract fun rearrangeBarcodes ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/DistantBarcodesMap : dev/shtanko/algorithms/leetcode/DistantBarcodes {
	public fun <init> ()V
	public fun rearrangeBarcodes ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/DistantBarcodesQueue : dev/shtanko/algorithms/leetcode/DistantBarcodes {
	public fun <init> ()V
	public fun rearrangeBarcodes ([I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/DistinctCharactersEqual {
	public abstract fun isItPossible (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/DistinctCharactersEqualArray : dev/shtanko/algorithms/leetcode/DistinctCharactersEqual {
	public fun <init> ()V
	public fun isItPossible (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/DistinctCharactersEqualMap : dev/shtanko/algorithms/leetcode/DistinctCharactersEqual {
	public fun <init> ()V
	public fun isItPossible (Ljava/lang/String;Ljava/lang/String;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/DistinctSubseq2 {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/DistinctSubseq2DP : dev/shtanko/algorithms/leetcode/DistinctSubseq2 {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/DistinctSubseq2DPConstSpace : dev/shtanko/algorithms/leetcode/DistinctSubseq2 {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/DistinctSubsequences {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/DistinctSubsequencesDP : dev/shtanko/algorithms/leetcode/DistinctSubsequences {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/DistributeCandiesKt {
	public static final fun distributeCandies (II)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/DistributeCoins {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/DistributeCoinsDFS : dev/shtanko/algorithms/leetcode/DistributeCoins {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/DistributeCookies {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/DistributeCookiesBacktracking : dev/shtanko/algorithms/leetcode/DistributeCookies {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/DistributeRepeatingIntegers {
	public abstract fun invoke ([I[I)Z
}

public final class dev/shtanko/algorithms/leetcode/DistributeRepeatingIntegersBottomUp : dev/shtanko/algorithms/leetcode/DistributeRepeatingIntegers {
	public fun <init> ()V
	public fun invoke ([I[I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/DivideArrayWithMaxDifference {
	public abstract fun invoke ([II)[[I
}

public final class dev/shtanko/algorithms/leetcode/DivideArrayWithMaxDifferenceSort : dev/shtanko/algorithms/leetcode/DivideArrayWithMaxDifference {
	public fun <init> ()V
	public fun invoke ([II)[[I
}

public final class dev/shtanko/algorithms/leetcode/DivideIntegersBitShifting : dev/shtanko/algorithms/leetcode/DivideTwoIntegers {
	public fun <init> ()V
	public fun divide (II)I
}

public final class dev/shtanko/algorithms/leetcode/DivideIntegersBitShifting2 : dev/shtanko/algorithms/leetcode/DivideTwoIntegers {
	public fun <init> ()V
	public fun divide (II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/DividePlayers {
	public abstract fun invoke ([I)J
}

public final class dev/shtanko/algorithms/leetcode/DividePlayersMap : dev/shtanko/algorithms/leetcode/DividePlayers {
	public fun <init> ()V
	public fun invoke ([I)J
}

public abstract interface class dev/shtanko/algorithms/leetcode/DivideTwoIntegers {
	public abstract fun divide (II)I
}

public final class dev/shtanko/algorithms/leetcode/Division {
	public fun <init> ()V
	public final fun getMaxStr ()Ljava/lang/String;
	public final fun getMaxVal ()F
	public final fun getMinStr ()Ljava/lang/String;
	public final fun getMinVal ()F
	public final fun setMaxStr (Ljava/lang/String;)V
	public final fun setMaxVal (F)V
	public final fun setMinStr (Ljava/lang/String;)V
	public final fun setMinVal (F)V
}

public final class dev/shtanko/algorithms/leetcode/DivisorGameKt {
	public static final fun divisorGame (I)Z
	public static final fun divisorGameBruteForce (I)Z
	public static final fun divisorGameNaive (I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/Dota2Senate {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/Dota2SenateBooleanArray : dev/shtanko/algorithms/leetcode/Dota2Senate {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/Dota2SenateGreedy : dev/shtanko/algorithms/leetcode/Dota2Senate {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/Dota2SenateSingleQueue : dev/shtanko/algorithms/leetcode/Dota2Senate {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/Dota2SenateTwoQueues : dev/shtanko/algorithms/leetcode/Dota2Senate {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/DoubleIt {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/DoubleItRecursive : dev/shtanko/algorithms/leetcode/DoubleIt {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/DoubleItReversing : dev/shtanko/algorithms/leetcode/DoubleIt {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/DoubleItStack : dev/shtanko/algorithms/leetcode/DoubleIt {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/DoubleItTwoPointers : dev/shtanko/algorithms/leetcode/DoubleIt {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/DoublyListNode {
	public fun <init> ()V
	public fun <init> (ILdev/shtanko/algorithms/leetcode/DoublyListNode;Ldev/shtanko/algorithms/leetcode/DoublyListNode;)V
	public synthetic fun <init> (ILdev/shtanko/algorithms/leetcode/DoublyListNode;Ldev/shtanko/algorithms/leetcode/DoublyListNode;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()I
	public final fun component2 ()Ldev/shtanko/algorithms/leetcode/DoublyListNode;
	public final fun component3 ()Ldev/shtanko/algorithms/leetcode/DoublyListNode;
	public final fun copy (ILdev/shtanko/algorithms/leetcode/DoublyListNode;Ldev/shtanko/algorithms/leetcode/DoublyListNode;)Ldev/shtanko/algorithms/leetcode/DoublyListNode;
	public static synthetic fun copy$default (Ldev/shtanko/algorithms/leetcode/DoublyListNode;ILdev/shtanko/algorithms/leetcode/DoublyListNode;Ldev/shtanko/algorithms/leetcode/DoublyListNode;ILjava/lang/Object;)Ldev/shtanko/algorithms/leetcode/DoublyListNode;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getNext ()Ldev/shtanko/algorithms/leetcode/DoublyListNode;
	public final fun getPrev ()Ldev/shtanko/algorithms/leetcode/DoublyListNode;
	public final fun getValue ()I
	public fun hashCode ()I
	public final fun setNext (Ldev/shtanko/algorithms/leetcode/DoublyListNode;)V
	public final fun setPrev (Ldev/shtanko/algorithms/leetcode/DoublyListNode;)V
	public final fun setValue (I)V
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/DungeonGame {
	public abstract fun calculateMinimumHP ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/DungeonGameDP : dev/shtanko/algorithms/leetcode/DungeonGame {
	public fun <init> ()V
	public fun calculateMinimumHP ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/DuplicateZerosKt {
	public static final fun duplicateZeros ([I)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/EditDistance {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/EditDistanceDP : dev/shtanko/algorithms/leetcode/EditDistance {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/EliminateMaxNumOfMonsters {
	public abstract fun invoke ([I[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/EliminateMaximumStrategy {
}

public final class dev/shtanko/algorithms/leetcode/EliminateMaximumStrategy$Heap : dev/shtanko/algorithms/leetcode/EliminateMaxNumOfMonsters, dev/shtanko/algorithms/leetcode/EliminateMaximumStrategy {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/EliminateMaximumStrategy$Heap;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I[I)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/EliminateMaximumStrategy$Sort : dev/shtanko/algorithms/leetcode/EliminateMaxNumOfMonsters, dev/shtanko/algorithms/leetcode/EliminateMaximumStrategy {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/EliminateMaximumStrategy$Sort;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I[I)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/EmployeeImportance {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/EmployeeImportance;
	public final fun getImportance (Ljava/util/List;I)I
}

public final class dev/shtanko/algorithms/leetcode/EmployeeImportance$Employee {
	public fun <init> ()V
	public fun <init> (IILjava/util/List;)V
	public synthetic fun <init> (IILjava/util/List;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()I
	public final fun component2 ()I
	public final fun component3 ()Ljava/util/List;
	public final fun copy (IILjava/util/List;)Ldev/shtanko/algorithms/leetcode/EmployeeImportance$Employee;
	public static synthetic fun copy$default (Ldev/shtanko/algorithms/leetcode/EmployeeImportance$Employee;IILjava/util/List;ILjava/lang/Object;)Ldev/shtanko/algorithms/leetcode/EmployeeImportance$Employee;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getId ()I
	public final fun getImportance ()I
	public final fun getSubordinates ()Ljava/util/List;
	public fun hashCode ()I
	public final fun setId (I)V
	public final fun setImportance (I)V
	public final fun setSubordinates (Ljava/util/List;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/Encrypter {
	public fun <init> ([C[Ljava/lang/String;[Ljava/lang/String;)V
	public final fun decrypt (Ljava/lang/String;)I
	public final fun encrypt (Ljava/lang/String;)Ljava/lang/String;
	public final fun getCount ()Ljava/util/Map;
	public final fun getEnc ()Ljava/util/Map;
	public final fun getKeys ()[C
	public final fun getValues ()[Ljava/lang/String;
	public final fun setCount (Ljava/util/Map;)V
	public final fun setEnc (Ljava/util/Map;)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/EqualMatrixPairs {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/EqualMatrixPairsTrie : dev/shtanko/algorithms/leetcode/EqualMatrixPairs {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/EqualOnes : dev/shtanko/algorithms/leetcode/ThreeEqualParts {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/EqualSubstring {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;I)I
}

public final class dev/shtanko/algorithms/leetcode/EqualSubstringSlidingWindow : dev/shtanko/algorithms/leetcode/EqualSubstring {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/EscapeLargeMaze {
	public abstract fun invoke ([[I[I[I)Z
}

public final class dev/shtanko/algorithms/leetcode/EscapeLargeMazeBFS : dev/shtanko/algorithms/leetcode/EscapeLargeMaze {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/EscapeLargeMazeBFS$Companion;
	public fun <init> ()V
	public fun invoke ([[I[I[I)Z
}

public final class dev/shtanko/algorithms/leetcode/EscapeLargeMazeBFS$Companion {
}

public final class dev/shtanko/algorithms/leetcode/Euclidean : dev/shtanko/algorithms/leetcode/GreatestCommonDivisorOfArray {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/EvalRPN {
	public abstract fun invoke ([Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/EvaluateBooleanBinaryTree {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Z
}

public final class dev/shtanko/algorithms/leetcode/EvaluateBooleanBinaryTreeDFS : dev/shtanko/algorithms/leetcode/EvaluateBooleanBinaryTree {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Z
}

public final class dev/shtanko/algorithms/leetcode/EvaluateBooleanBinaryTreeDFSIterative : dev/shtanko/algorithms/leetcode/EvaluateBooleanBinaryTree {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/EvaluateDivision {
	public abstract fun calcEquation (Ljava/util/List;[DLjava/util/List;)[D
}

public final class dev/shtanko/algorithms/leetcode/EvaluateDivisionDFS : dev/shtanko/algorithms/leetcode/EvaluateDivision {
	public fun <init> ()V
	public fun calcEquation (Ljava/util/List;[DLjava/util/List;)[D
}

public abstract interface class dev/shtanko/algorithms/leetcode/EvenOddTree {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Z
}

public final class dev/shtanko/algorithms/leetcode/EvenOddTreeBFS : dev/shtanko/algorithms/leetcode/EvenOddTree {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Z
}

public final class dev/shtanko/algorithms/leetcode/EvenOddTreeBSF : dev/shtanko/algorithms/leetcode/EvenOddTree {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/ExcelSheetColumnTitle {
	public abstract fun invoke (I)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ExcelSheetColumnTitleSB : dev/shtanko/algorithms/leetcode/ExcelSheetColumnTitle {
	public fun <init> ()V
	public fun invoke (I)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/ExtraCharactersInString {
	public abstract fun invoke (Ljava/lang/String;[Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/ExtraCharactersInStringBottomUp : dev/shtanko/algorithms/leetcode/ExtraCharactersInString {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;[Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/ExtraCharactersInStringBottomUpTrie : dev/shtanko/algorithms/leetcode/ExtraCharactersInString {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;[Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/ExtraCharactersInStringTopDown : dev/shtanko/algorithms/leetcode/ExtraCharactersInString {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;[Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/ExtraCharactersInStringTopDownTrie : dev/shtanko/algorithms/leetcode/ExtraCharactersInString {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;[Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/FG2Backtracking : dev/shtanko/algorithms/leetcode/FlipGame2 {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/FG2BruteForce : dev/shtanko/algorithms/leetcode/FlipGame2 {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/FRPOneMap : dev/shtanko/algorithms/leetcode/FindAndReplacePattern {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/FRPTwoMaps : dev/shtanko/algorithms/leetcode/FindAndReplacePattern {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/FactorCombinations {
	public abstract fun invoke (I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/FactorCombinationsImpl : dev/shtanko/algorithms/leetcode/FactorCombinations {
	public fun <init> ()V
	public fun invoke (I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/FactorCombinationsImpl2 : dev/shtanko/algorithms/leetcode/FactorCombinations {
	public fun <init> ()V
	public fun invoke (I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/FairCandySwapKt {
	public static final fun fairCandySwap (Lkotlin/Pair;)[I
}

public final class dev/shtanko/algorithms/leetcode/FibonacciBottomUp : dev/shtanko/algorithms/leetcode/FibonacciStrategy {
	public fun <init> ()V
	public fun invoke (I)J
}

public final class dev/shtanko/algorithms/leetcode/FibonacciIterative : dev/shtanko/algorithms/leetcode/FibonacciStrategy {
	public fun <init> ()V
	public fun invoke (I)J
}

public final class dev/shtanko/algorithms/leetcode/FibonacciIterativeTopDown : dev/shtanko/algorithms/leetcode/FibonacciStrategy {
	public fun <init> ()V
	public fun invoke (I)J
}

public final class dev/shtanko/algorithms/leetcode/FibonacciMath : dev/shtanko/algorithms/leetcode/FibonacciStrategy {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/FibonacciMath$Companion;
	public fun <init> ()V
	public fun invoke (I)J
}

public final class dev/shtanko/algorithms/leetcode/FibonacciMath$Companion {
}

public final class dev/shtanko/algorithms/leetcode/FibonacciMatrixExponentiation : dev/shtanko/algorithms/leetcode/FibonacciStrategy {
	public fun <init> ()V
	public fun invoke (I)J
}

public final class dev/shtanko/algorithms/leetcode/FibonacciOptimizedRecursion : dev/shtanko/algorithms/leetcode/FibonacciStrategy {
	public fun <init> ()V
	public fun invoke (I)J
}

public final class dev/shtanko/algorithms/leetcode/FibonacciRecursion : dev/shtanko/algorithms/leetcode/FibonacciStrategy {
	public fun <init> ()V
	public fun invoke (I)J
}

public abstract interface class dev/shtanko/algorithms/leetcode/FibonacciStrategy {
	public abstract fun invoke (I)J
}

public final class dev/shtanko/algorithms/leetcode/FibonacciTopDown : dev/shtanko/algorithms/leetcode/FibonacciStrategy {
	public fun <init> ()V
	public fun invoke (I)J
}

public abstract interface class dev/shtanko/algorithms/leetcode/FillingBookcaseShelves {
	public abstract fun invoke ([[II)I
}

public final class dev/shtanko/algorithms/leetcode/FillingBookcaseShelvesBottomUp : dev/shtanko/algorithms/leetcode/FillingBookcaseShelves {
	public fun <init> ()V
	public fun invoke ([[II)I
}

public final class dev/shtanko/algorithms/leetcode/FillingBookcaseShelvesTopDown : dev/shtanko/algorithms/leetcode/FillingBookcaseShelves {
	public fun <init> ()V
	public fun invoke ([[II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FinalPrices {
	public abstract fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/FinalPrices$StackStrategy : dev/shtanko/algorithms/leetcode/FinalPrices {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/FinalPrices$StackStrategy;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I)[I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/FinalReachableBuilding : dev/shtanko/algorithms/leetcode/FurthestBuilding {
	public fun <init> ()V
	public fun invoke ([III)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/Find132Pattern {
	public abstract fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/Find132PatternOnePass : dev/shtanko/algorithms/leetcode/Find132Pattern {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindAllDuplicatesInArray {
	public abstract fun invoke ([I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/FindAllDuplicatesInArrayImpl : dev/shtanko/algorithms/leetcode/FindAllDuplicatesInArray {
	public fun <init> ()V
	public fun invoke ([I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/FindAllDuplicatesInArrayMap : dev/shtanko/algorithms/leetcode/FindAllDuplicatesInArray {
	public fun <init> ()V
	public fun invoke ([I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/FindAllDuplicatesInArraySet : dev/shtanko/algorithms/leetcode/FindAllDuplicatesInArray {
	public fun <init> ()V
	public fun invoke ([I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindAllGroupsOfFarmland {
	public abstract fun invoke ([[I)[[I
}

public final class dev/shtanko/algorithms/leetcode/FindAllGroupsOfFarmlandBFS : dev/shtanko/algorithms/leetcode/FindAllGroupsOfFarmland {
	public fun <init> ()V
	public fun invoke ([[I)[[I
}

public final class dev/shtanko/algorithms/leetcode/FindAllGroupsOfFarmlandDFS : dev/shtanko/algorithms/leetcode/FindAllGroupsOfFarmland {
	public fun <init> ()V
	public fun invoke ([[I)[[I
}

public final class dev/shtanko/algorithms/leetcode/FindAnagramMappings {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/FindAnagramMappings;
	public final fun invoke ([I[I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindAnagrams {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/FindAnagramsHashTable : dev/shtanko/algorithms/leetcode/FindAnagrams {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/FindAnagramsShort : dev/shtanko/algorithms/leetcode/FindAnagrams {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindAndReplacePattern {
	public abstract fun invoke ([Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindArrayDifference {
	public abstract fun findDifference ([I[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/FindArrayDifferenceBF : dev/shtanko/algorithms/leetcode/FindArrayDifference {
	public fun <init> ()V
	public fun findDifference ([I[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/FindArrayDifferenceHashSet : dev/shtanko/algorithms/leetcode/FindArrayDifference {
	public fun <init> ()V
	public fun findDifference ([I[I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindBall {
	public abstract fun invoke ([[I)[I
}

public final class dev/shtanko/algorithms/leetcode/FindBallDFS : dev/shtanko/algorithms/leetcode/FindBall {
	public fun <init> ()V
	public fun invoke ([[I)[I
}

public final class dev/shtanko/algorithms/leetcode/FindBallDP : dev/shtanko/algorithms/leetcode/FindBall {
	public fun <init> ()V
	public fun invoke ([[I)[I
}

public final class dev/shtanko/algorithms/leetcode/FindBallIterative : dev/shtanko/algorithms/leetcode/FindBall {
	public fun <init> ()V
	public fun invoke ([[I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindBottomLeftTreeVal {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/FindBottomLeftTreeValBFS : dev/shtanko/algorithms/leetcode/FindBottomLeftTreeVal {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/FindBottomLeftTreeValDFS : dev/shtanko/algorithms/leetcode/FindBottomLeftTreeVal {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public abstract class dev/shtanko/algorithms/leetcode/FindBuildingStrategy {
}

public final class dev/shtanko/algorithms/leetcode/FindBuildingStrategy$BruteForce : dev/shtanko/algorithms/leetcode/FindBuildingStrategy, dev/shtanko/algorithms/leetcode/FindBuildings {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/FindBuildingStrategy$BruteForce;
	public fun invoke ([I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindBuildings {
	public abstract fun invoke ([I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindChampion2 {
	public abstract fun invoke (I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/FindChampion2InDegreeCount : dev/shtanko/algorithms/leetcode/FindChampion2 {
	public fun <init> ()V
	public fun invoke (I[[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindCheapestPrice {
	public abstract fun invoke (I[[IIII)I
}

public final class dev/shtanko/algorithms/leetcode/FindCheapestPriceBFS : dev/shtanko/algorithms/leetcode/FindCheapestPrice {
	public fun <init> ()V
	public fun invoke (I[[IIII)I
}

public final class dev/shtanko/algorithms/leetcode/FindCheapestPriceBellmanFord : dev/shtanko/algorithms/leetcode/FindCheapestPrice {
	public fun <init> ()V
	public fun invoke (I[[IIII)I
}

public final class dev/shtanko/algorithms/leetcode/FindCheapestPriceDijkstra : dev/shtanko/algorithms/leetcode/FindCheapestPrice {
	public fun <init> ()V
	public fun invoke (I[[IIII)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindClosestPalindrome {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/FindClosestPalindromeBS : dev/shtanko/algorithms/leetcode/FindClosestPalindrome {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/FindClosestPalindromeRange : dev/shtanko/algorithms/leetcode/FindClosestPalindrome {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindCommonCharacters {
	public abstract fun invoke ([Ljava/lang/String;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindCriticalEdges {
	public abstract fun invoke (I[[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/FindCriticalEdgesKruskal : dev/shtanko/algorithms/leetcode/FindCriticalEdges {
	public fun <init> ()V
	public fun invoke (I[[I)Ljava/util/List;
	public final fun union (II[I)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindDifference {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)C
}

public final class dev/shtanko/algorithms/leetcode/FindDifferenceBitwise : dev/shtanko/algorithms/leetcode/FindDifference {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)C
}

public final class dev/shtanko/algorithms/leetcode/FindDifferenceSimple : dev/shtanko/algorithms/leetcode/FindDifference {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)C
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindDuplicate {
	public abstract fun invoke ([Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/FindDuplicateArray : dev/shtanko/algorithms/leetcode/FindDuplicateNumber {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/FindDuplicateBS : dev/shtanko/algorithms/leetcode/FindDuplicateNumber {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/FindDuplicateBruteForce : dev/shtanko/algorithms/leetcode/FindDuplicate {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/FindDuplicateHashMap : dev/shtanko/algorithms/leetcode/FindDuplicate {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/FindDuplicateMap : dev/shtanko/algorithms/leetcode/FindDuplicateNumber {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindDuplicateNumber {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/FindDuplicateSet : dev/shtanko/algorithms/leetcode/FindDuplicateNumber {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/FindDuplicateSort : dev/shtanko/algorithms/leetcode/FindDuplicateNumber {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindDuplicateSubtrees {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/FindDuplicateSubtreesMap : dev/shtanko/algorithms/leetcode/FindDuplicateSubtrees {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/FindDuplicateTortoise : dev/shtanko/algorithms/leetcode/FindDuplicateNumber {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindEventualSafeStates {
	public abstract fun eventualSafeNodes ([[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/FindEventualSafeStatesDFS : dev/shtanko/algorithms/leetcode/FindEventualSafeStates {
	public fun <init> ()V
	public fun eventualSafeNodes ([[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/FindEventualSafeStatesKahn : dev/shtanko/algorithms/leetcode/FindEventualSafeStates {
	public fun <init> ()V
	public fun eventualSafeNodes ([[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/FindEventualSafeStatesKt {
	public static final fun safeStatesDFS (ILjava/util/List;[Z[Z)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindFinalValue {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/FindFinalValueHashMap : dev/shtanko/algorithms/leetcode/FindFinalValue {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindGoodStrings {
	public abstract fun invoke (ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/FindGoodStringsDFS : dev/shtanko/algorithms/leetcode/FindGoodStrings {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/FindGoodStringsDFS$Companion;
	public fun <init> ()V
	public fun invoke (ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/FindGoodStringsDFS$Companion {
}

public final class dev/shtanko/algorithms/leetcode/FindGoodStringsDFS$DfsParams {
	public fun <init> (IIZZI[C[C[C[I[I)V
	public final fun component1 ()I
	public final fun component10 ()[I
	public final fun component2 ()I
	public final fun component3 ()Z
	public final fun component4 ()Z
	public final fun component5 ()I
	public final fun component6 ()[C
	public final fun component7 ()[C
	public final fun component8 ()[C
	public final fun component9 ()[I
	public final fun copy (IIZZI[C[C[C[I[I)Ldev/shtanko/algorithms/leetcode/FindGoodStringsDFS$DfsParams;
	public static synthetic fun copy$default (Ldev/shtanko/algorithms/leetcode/FindGoodStringsDFS$DfsParams;IIZZI[C[C[C[I[IILjava/lang/Object;)Ldev/shtanko/algorithms/leetcode/FindGoodStringsDFS$DfsParams;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getDp ()[I
	public final fun getEvil ()[C
	public final fun getEvilMatched ()I
	public final fun getI ()I
	public final fun getLeftBound ()Z
	public final fun getLps ()[I
	public final fun getN ()I
	public final fun getRightBound ()Z
	public final fun getS1 ()[C
	public final fun getS2 ()[C
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindJudge {
	public abstract fun invoke (I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/FindJudgeOneArray : dev/shtanko/algorithms/leetcode/FindJudge {
	public fun <init> ()V
	public fun invoke (I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/FindJudgeTwoArrays : dev/shtanko/algorithms/leetcode/FindJudge {
	public fun <init> ()V
	public fun invoke (I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/FindKClosestElements {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/FindKClosestElements;
	public final fun bsFindTheLeftBound ([III)Ljava/util/List;
	public final fun bsSlidingWindow ([III)Ljava/util/List;
	public final fun sortWithCustomComparator ([III)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindKPairs {
	public abstract fun invoke ([II)I
}

public abstract class dev/shtanko/algorithms/leetcode/FindKStrategy {
}

public final class dev/shtanko/algorithms/leetcode/FindKStrategy$BruteForce : dev/shtanko/algorithms/leetcode/FindKStrategy, dev/shtanko/algorithms/leetcode/FindKPairs {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/FindKStrategy$BruteForce;
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/FindKStrategy$Hashmap : dev/shtanko/algorithms/leetcode/FindKStrategy, dev/shtanko/algorithms/leetcode/FindKPairs {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/FindKStrategy$Hashmap;
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/FindKStrategy$TwoPointers : dev/shtanko/algorithms/leetcode/FindKStrategy, dev/shtanko/algorithms/leetcode/FindKPairs {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/FindKStrategy$TwoPointers;
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindKthBit {
	public abstract fun invoke (II)C
}

public final class dev/shtanko/algorithms/leetcode/FindKthBitwise : dev/shtanko/algorithms/leetcode/FindKthBit {
	public fun <init> ()V
	public fun invoke (II)C
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindKthLargest {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/FindKthLargestCountingSort : dev/shtanko/algorithms/leetcode/FindKthLargest {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/FindKthLargestMinHeap : dev/shtanko/algorithms/leetcode/FindKthLargest {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/FindKthLargestQuickSelect : dev/shtanko/algorithms/leetcode/FindKthLargest {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/FindKthLargestSort : dev/shtanko/algorithms/leetcode/FindKthLargest {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindKthNumber {
	public abstract fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/FindKthNumberPrefixTree : dev/shtanko/algorithms/leetcode/FindKthNumber {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/FindKthNumberPrefixTree;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (II)I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindKthPositive {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/FindKthPositiveImpl : dev/shtanko/algorithms/leetcode/FindKthPositive {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindLargestValueInEachTreeRow {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindLeastNumOfUniqueInts {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/FindLeastNumOfUniqueIntsCountingSort : dev/shtanko/algorithms/leetcode/FindLeastNumOfUniqueInts {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/FindLeastNumOfUniqueIntsHeap : dev/shtanko/algorithms/leetcode/FindLeastNumOfUniqueInts {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/FindLeastNumOfUniqueIntsSort : dev/shtanko/algorithms/leetcode/FindLeastNumOfUniqueInts {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindLeaves {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/FindLeavesDFS : dev/shtanko/algorithms/leetcode/FindLeaves {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/FindLeavesDFS2 : dev/shtanko/algorithms/leetcode/FindLeaves {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/FindLenOfShortestSubarrayTwoPointers : dev/shtanko/algorithms/leetcode/FindLengthOfShortestSubarray {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/FindLenOfShortestSubarrayTwoPointers;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I)I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindLengthOfShortestSubarray {
	public abstract fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindLongestChain {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/FindLongestChainIterative : dev/shtanko/algorithms/leetcode/FindLongestChain {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/FindLongestChainRecursive : dev/shtanko/algorithms/leetcode/FindLongestChain {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/FindLuckyMap : dev/shtanko/algorithms/leetcode/FindLuckyStrategy {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/FindLuckyStraightForward : dev/shtanko/algorithms/leetcode/FindLuckyStrategy {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindLuckyStrategy {
	public abstract fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindMatrix {
	public abstract fun invoke ([I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindMaxAverage {
	public abstract fun invoke ([II)D
}

public final class dev/shtanko/algorithms/leetcode/FindMaxAverage1 : dev/shtanko/algorithms/leetcode/FindMaxAverage {
	public fun <init> ()V
	public fun invoke ([II)D
}

public final class dev/shtanko/algorithms/leetcode/FindMaxAverage2 : dev/shtanko/algorithms/leetcode/FindMaxAverage {
	public fun <init> ()V
	public fun invoke ([II)D
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindMaxK {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/FindMaxKBitwise : dev/shtanko/algorithms/leetcode/FindMaxK {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/FindMaxKBruteForce : dev/shtanko/algorithms/leetcode/FindMaxK {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/FindMaxKOnePass : dev/shtanko/algorithms/leetcode/FindMaxK {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/FindMaxKTwoPass : dev/shtanko/algorithms/leetcode/FindMaxK {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/FindMaxKTwoPointer : dev/shtanko/algorithms/leetcode/FindMaxK {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindMedianSortedArrays {
	public abstract fun invoke ([I[I)D
}

public final class dev/shtanko/algorithms/leetcode/FindMedianSortedArraysBS : dev/shtanko/algorithms/leetcode/FindMedianSortedArrays {
	public fun <init> ()V
	public fun invoke ([I[I)D
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindMinArrowShots {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/FindMinArrowShotsKt {
	public static final fun getFindMinArrowShots ()Ldev/shtanko/algorithms/leetcode/FindMinArrowShots;
	public static final fun getFindMinArrowShotsGreedy ()Ldev/shtanko/algorithms/leetcode/FindMinArrowShots;
}

public final class dev/shtanko/algorithms/leetcode/FindMinInRotatedSortedArrKt {
	public static final fun findMinInRotatedSortedArr ([I)I
}

public final class dev/shtanko/algorithms/leetcode/FindMinStartValueKt {
	public static final fun findMinStartValue ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindMissingObservations {
	public abstract fun invoke ([III)[I
}

public final class dev/shtanko/algorithms/leetcode/FindMissingObservationsMath : dev/shtanko/algorithms/leetcode/FindMissingObservations {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/FindMissingObservationsMath;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([III)[I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindModeInBinarySearchTree {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindModeInBinarySearchTreeStrategy {
}

public final class dev/shtanko/algorithms/leetcode/FindModeInBinarySearchTreeStrategy$BFS : dev/shtanko/algorithms/leetcode/FindModeInBinarySearchTree, dev/shtanko/algorithms/leetcode/FindModeInBinarySearchTreeStrategy {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/FindModeInBinarySearchTreeStrategy$BFS;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)[I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/FindModeInBinarySearchTreeStrategy$DFS : dev/shtanko/algorithms/leetcode/FindModeInBinarySearchTree, dev/shtanko/algorithms/leetcode/FindModeInBinarySearchTreeStrategy {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/FindModeInBinarySearchTreeStrategy$DFS;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)[I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/FindModeInBinarySearchTreeStrategy$DFSArray : dev/shtanko/algorithms/leetcode/FindModeInBinarySearchTree, dev/shtanko/algorithms/leetcode/FindModeInBinarySearchTreeStrategy {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/FindModeInBinarySearchTreeStrategy$DFSArray;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)[I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/FindModeInBinarySearchTreeStrategy$DFSList : dev/shtanko/algorithms/leetcode/FindModeInBinarySearchTree, dev/shtanko/algorithms/leetcode/FindModeInBinarySearchTreeStrategy {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/FindModeInBinarySearchTreeStrategy$DFSList;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)[I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/FindModeInBinarySearchTreeStrategy$IterativeDFS : dev/shtanko/algorithms/leetcode/FindModeInBinarySearchTree, dev/shtanko/algorithms/leetcode/FindModeInBinarySearchTreeStrategy {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/FindModeInBinarySearchTreeStrategy$IterativeDFS;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)[I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/FindModeInBinarySearchTreeStrategy$MorrisTraversal : dev/shtanko/algorithms/leetcode/FindModeInBinarySearchTree, dev/shtanko/algorithms/leetcode/FindModeInBinarySearchTreeStrategy {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/FindModeInBinarySearchTreeStrategy$MorrisTraversal;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)[I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/FindNearestRightNodeSentinel : dev/shtanko/algorithms/leetcode/FindNearestRightNodeStrategy {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;Ldev/shtanko/algorithms/leetcode/TreeNode;)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/FindNearestRightNodeSizeMeasurements : dev/shtanko/algorithms/leetcode/FindNearestRightNodeStrategy {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;Ldev/shtanko/algorithms/leetcode/TreeNode;)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/FindNearestRightNodeSizePreorderTraversal : dev/shtanko/algorithms/leetcode/FindNearestRightNodeStrategy {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;Ldev/shtanko/algorithms/leetcode/TreeNode;)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindNearestRightNodeStrategy {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;Ldev/shtanko/algorithms/leetcode/TreeNode;)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/FindNearestRightNodeTwoQueues : dev/shtanko/algorithms/leetcode/FindNearestRightNodeStrategy {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;Ldev/shtanko/algorithms/leetcode/TreeNode;)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindNumOfLIS {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/FindNumOfLISBottomUp : dev/shtanko/algorithms/leetcode/FindNumOfLIS {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/FindNumOfLISTopDown : dev/shtanko/algorithms/leetcode/FindNumOfLIS {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/FindNumbersKt {
	public static final fun findNumbers ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindOriginalArray {
	public abstract fun findOriginalArray ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/FindOriginalArrayMatch : dev/shtanko/algorithms/leetcode/FindOriginalArray {
	public fun <init> ()V
	public fun findOriginalArray ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/FindPeakElementIterativeBinarySearch : dev/shtanko/algorithms/leetcode/FindPeakElementStrategy {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/FindPeakElementLinear : dev/shtanko/algorithms/leetcode/FindPeakElementStrategy {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/FindPeakElementRecursiveBinarySearch : dev/shtanko/algorithms/leetcode/FindPeakElementStrategy {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindPeakElementStrategy {
	public abstract fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindPermutation {
	public abstract fun invoke (Ljava/lang/String;)[I
}

public final class dev/shtanko/algorithms/leetcode/FindPermutationReversing : dev/shtanko/algorithms/leetcode/FindPermutation {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)[I
}

public final class dev/shtanko/algorithms/leetcode/FindPermutationStack : dev/shtanko/algorithms/leetcode/FindPermutation {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)[I
}

public final class dev/shtanko/algorithms/leetcode/FindPermutationTwoPointers : dev/shtanko/algorithms/leetcode/FindPermutation {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindPivotIndex {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/FindPivotIndexPrefixSum : dev/shtanko/algorithms/leetcode/FindPivotIndex {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindPivotInteger {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/FindPivotIntegerBS : dev/shtanko/algorithms/leetcode/FindPivotInteger {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/FindPivotIntegerBruteForce : dev/shtanko/algorithms/leetcode/FindPivotInteger {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/FindPivotIntegerLookupTable : dev/shtanko/algorithms/leetcode/FindPivotInteger {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/FindPivotIntegerLookupTable$Companion;
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/FindPivotIntegerLookupTable$Companion {
}

public final class dev/shtanko/algorithms/leetcode/FindPivotIntegerMath : dev/shtanko/algorithms/leetcode/FindPivotInteger {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/FindPivotIntegerTwoPointer : dev/shtanko/algorithms/leetcode/FindPivotInteger {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindPolygonWithLargestPerimeter {
	public abstract fun invoke ([I)J
}

public final class dev/shtanko/algorithms/leetcode/FindPolygonWithLargestPerimeterSort : dev/shtanko/algorithms/leetcode/FindPolygonWithLargestPerimeter {
	public fun <init> ()V
	public fun invoke ([I)J
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindScore {
	public abstract fun invoke ([I)J
}

public final class dev/shtanko/algorithms/leetcode/FindScore$Heap : dev/shtanko/algorithms/leetcode/FindScore {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/FindScore$Heap;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I)J
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/FindScore$Sorting : dev/shtanko/algorithms/leetcode/FindScore {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/FindScore$Sorting;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I)J
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/FindSmallestSetOfVertices {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/FindSmallestSetOfVertices;
	public final fun invoke (ILjava/util/List;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindSpecialInt {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/FindSpecialIntBS : dev/shtanko/algorithms/leetcode/FindSpecialInt {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/FindSpecialIntCheckElement : dev/shtanko/algorithms/leetcode/FindSpecialInt {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/FindSpecialIntHashMap : dev/shtanko/algorithms/leetcode/FindSpecialInt {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/FindSubstring : dev/shtanko/algorithms/leetcode/AbstractFindSubstring {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;[Ljava/lang/String;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindTheCity {
	public abstract fun invoke (I[[II)I
}

public final class dev/shtanko/algorithms/leetcode/FindTheCityBellmanFord : dev/shtanko/algorithms/leetcode/FindTheCity {
	public fun <init> ()V
	public fun invoke (I[[II)I
}

public final class dev/shtanko/algorithms/leetcode/FindTheCityDijkstra : dev/shtanko/algorithms/leetcode/FindTheCity {
	public fun <init> ()V
	public fun invoke (I[[II)I
}

public final class dev/shtanko/algorithms/leetcode/FindTheCityFloydWarshall : dev/shtanko/algorithms/leetcode/FindTheCity {
	public fun <init> ()V
	public fun invoke (I[[II)I
}

public final class dev/shtanko/algorithms/leetcode/FindTheCitySPFA : dev/shtanko/algorithms/leetcode/FindTheCity {
	public fun <init> ()V
	public fun invoke (I[[II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindTheLongestSubstring {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/FindTheLongestSubstringBitmask : dev/shtanko/algorithms/leetcode/FindTheLongestSubstring {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/FindTheLongestSubstringBitmask;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/lang/String;)I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindTheWinner {
	public abstract fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/FindTheWinnerIterative : dev/shtanko/algorithms/leetcode/FindTheWinner {
	public fun <init> ()V
	public fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/FindTheWinnerRecursion : dev/shtanko/algorithms/leetcode/FindTheWinner {
	public fun <init> ()V
	public fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/FindTheWinnerSimulation : dev/shtanko/algorithms/leetcode/FindTheWinner {
	public fun <init> ()V
	public fun invoke (II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindUniqueBinaryString {
	public abstract fun invoke ([Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/FindUniqueBinaryStringImpl : dev/shtanko/algorithms/leetcode/FindUniqueBinaryString {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/FindUniqueBinaryStringOneLine : dev/shtanko/algorithms/leetcode/FindUniqueBinaryString {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/FindUniqueBinaryStringStream : dev/shtanko/algorithms/leetcode/FindUniqueBinaryString {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindUnsortedSubArray {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/FindUnsortedSubArrayBetterBruteForce : dev/shtanko/algorithms/leetcode/FindUnsortedSubArray {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/FindUnsortedSubArrayBruteForce : dev/shtanko/algorithms/leetcode/FindUnsortedSubArray {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/FindUnsortedSubArrayConstSpace : dev/shtanko/algorithms/leetcode/FindUnsortedSubArray {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/FindUnsortedSubArraySort : dev/shtanko/algorithms/leetcode/FindUnsortedSubArray {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/FindUnsortedSubArrayStack : dev/shtanko/algorithms/leetcode/FindUnsortedSubArray {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FindWinners {
	public abstract fun invoke ([[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/FindWinnersCounting : dev/shtanko/algorithms/leetcode/FindWinners {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/FindWinnersCounting$Companion;
	public fun <init> ()V
	public fun invoke ([[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/FindWinnersCounting$Companion {
}

public final class dev/shtanko/algorithms/leetcode/FindWinnersHashSet : dev/shtanko/algorithms/leetcode/FindWinners {
	public fun <init> ()V
	public fun invoke ([[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/FindWinnersMap : dev/shtanko/algorithms/leetcode/FindWinners {
	public fun <init> ()V
	public fun invoke ([[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/FindWinnersSetMap : dev/shtanko/algorithms/leetcode/FindWinners {
	public fun <init> ()V
	public fun invoke ([[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/FindWordsKt {
	public static final fun invoke ([Ljava/lang/String;)[Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/FirstMissingPositive {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/FirstMissingPositiveBoolArray : dev/shtanko/algorithms/leetcode/FirstMissingPositive {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/FirstMissingPositiveCycleSort : dev/shtanko/algorithms/leetcode/FirstMissingPositive {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/FirstMissingPositiveHashKey : dev/shtanko/algorithms/leetcode/FirstMissingPositive {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FirstUniqChar {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/FirstUniqCharArray : dev/shtanko/algorithms/leetcode/FirstUniqChar {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FlattenBinaryTree {
	public abstract fun flatten (Ldev/shtanko/algorithms/leetcode/TreeNode;)V
}

public final class dev/shtanko/algorithms/leetcode/FlattenRecursion : dev/shtanko/algorithms/leetcode/FlattenBinaryTree {
	public fun <init> ()V
	public fun flatten (Ldev/shtanko/algorithms/leetcode/TreeNode;)V
}

public final class dev/shtanko/algorithms/leetcode/FlattenStack : dev/shtanko/algorithms/leetcode/FlattenBinaryTree {
	public fun <init> ()V
	public fun flatten (Ldev/shtanko/algorithms/leetcode/TreeNode;)V
}

public final class dev/shtanko/algorithms/leetcode/FlipAndInvertImageKt {
	public static final fun flipAndInvertImage ([[I)[[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FlipEquivalentBinaryTrees {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;Ldev/shtanko/algorithms/leetcode/TreeNode;)Z
}

public final class dev/shtanko/algorithms/leetcode/FlipEquivalentBinaryTreesForm : dev/shtanko/algorithms/leetcode/FlipEquivalentBinaryTrees {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;Ldev/shtanko/algorithms/leetcode/TreeNode;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/FlipGame2 {
	public abstract fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/FloodFill {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/FloodFill;
	public final fun invoke ([[IIII)[[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FoodRatings {
	public abstract fun changeRating (Ljava/lang/String;I)V
	public abstract fun highestRated (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/FoodRatingsPriorityQueue : dev/shtanko/algorithms/leetcode/FoodRatings {
	public fun <init> ([Ljava/lang/String;[Ljava/lang/String;[I)V
	public fun changeRating (Ljava/lang/String;I)V
	public fun highestRated (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/FoodRatingsSortedSet : dev/shtanko/algorithms/leetcode/FoodRatings {
	public fun <init> ([Ljava/lang/String;[Ljava/lang/String;[I)V
	public fun changeRating (Ljava/lang/String;I)V
	public fun highestRated (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/FourKeysKeyboard {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/FourKeysKeyboardDP : dev/shtanko/algorithms/leetcode/FourKeysKeyboard {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/FourKeysKeyboardMath : dev/shtanko/algorithms/leetcode/FourKeysKeyboard {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/FourKeysKeyboardMath$Companion;
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/FourKeysKeyboardMath$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/FourSum {
	public abstract fun invoke ([II)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/FourSumHashSet : dev/shtanko/algorithms/leetcode/FourSum {
	public fun <init> ()V
	public fun invoke ([II)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/FourSumTwoPointers : dev/shtanko/algorithms/leetcode/FourSum {
	public fun <init> ()V
	public fun invoke ([II)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/FractionAddition {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/FractionAdditionRegex : dev/shtanko/algorithms/leetcode/FractionAddition {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/FreedomTrail {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/FreedomTrailDP : dev/shtanko/algorithms/leetcode/FreedomTrail {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/FrequencyBucketSort : dev/shtanko/algorithms/leetcode/FrequencySort {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/FrequencyCounter : dev/shtanko/algorithms/leetcode/FindMatrix {
	public fun <init> ()V
	public fun invoke ([I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/FrequencyIntersection : dev/shtanko/algorithms/leetcode/FindCommonCharacters {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/FrequencySort {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/FrequencySortPQ : dev/shtanko/algorithms/leetcode/FrequencySort {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/FrogJump {
	public abstract fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/FrogJumpBottomUpDp : dev/shtanko/algorithms/leetcode/FrogJump {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/FrogJumpTopDownDp : dev/shtanko/algorithms/leetcode/FrogJump {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/FrogPosition {
	public abstract fun invoke (I[[III)D
}

public final class dev/shtanko/algorithms/leetcode/FrogPositionBFS : dev/shtanko/algorithms/leetcode/FrogPosition {
	public fun <init> ()V
	public fun invoke (I[[III)D
}

public abstract interface class dev/shtanko/algorithms/leetcode/FruitIntoBaskets {
	public abstract fun totalFruit ([I)I
}

public final class dev/shtanko/algorithms/leetcode/FruitIntoBasketsSlidingWindow : dev/shtanko/algorithms/leetcode/FruitIntoBaskets {
	public fun <init> ()V
	public fun totalFruit ([I)I
}

public final class dev/shtanko/algorithms/leetcode/FruitIntoBasketsSlidingWindow2 : dev/shtanko/algorithms/leetcode/FruitIntoBaskets {
	public fun <init> ()V
	public fun totalFruit ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FullBloomFlowers {
	public abstract fun invoke ([[I[I)[I
}

public final class dev/shtanko/algorithms/leetcode/FullBloomFlowersBS : dev/shtanko/algorithms/leetcode/FullBloomFlowers {
	public fun <init> ()V
	public fun invoke ([[I[I)[I
}

public final class dev/shtanko/algorithms/leetcode/FullBloomFlowersPQ : dev/shtanko/algorithms/leetcode/FullBloomFlowers {
	public fun <init> ()V
	public fun invoke ([[I[I)[I
}

public final class dev/shtanko/algorithms/leetcode/FullBloomFlowersSimplerBS : dev/shtanko/algorithms/leetcode/FullBloomFlowers {
	public fun <init> ()V
	public fun invoke ([[I[I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/FurthestBuilding {
	public abstract fun invoke ([III)I
}

public final class dev/shtanko/algorithms/leetcode/FurthestBuildingMaxHeap : dev/shtanko/algorithms/leetcode/FurthestBuilding {
	public fun <init> ()V
	public fun invoke ([III)I
}

public final class dev/shtanko/algorithms/leetcode/FurthestBuildingMinHeap : dev/shtanko/algorithms/leetcode/FurthestBuilding {
	public fun <init> ()V
	public fun invoke ([III)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/GCDTraversal {
	public abstract fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/GCDTraversalGraph : dev/shtanko/algorithms/leetcode/GCDTraversal {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/GCDTraversalGraph$Companion;
	public fun <init> ()V
	public fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/GCDTraversalGraph$Companion {
}

public final class dev/shtanko/algorithms/leetcode/GVTAdvancedIterativeDFS : dev/shtanko/algorithms/leetcode/GraphValidTree {
	public fun <init> ()V
	public fun validTree (I[[I)Z
}

public final class dev/shtanko/algorithms/leetcode/GVTAdvancedUnionFind : dev/shtanko/algorithms/leetcode/GraphValidTree {
	public fun <init> ()V
	public fun validTree (I[[I)Z
}

public final class dev/shtanko/algorithms/leetcode/GVTSimpleIterativeDFS : dev/shtanko/algorithms/leetcode/GraphValidTree {
	public fun <init> ()V
	public fun validTree (I[[I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/GarbageCollection {
	public abstract fun invoke ([Ljava/lang/String;[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/GarbageCollectionStrategy {
}

public final class dev/shtanko/algorithms/leetcode/GarbageCollectionStrategy$HashMap : dev/shtanko/algorithms/leetcode/GarbageCollection, dev/shtanko/algorithms/leetcode/GarbageCollectionStrategy {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/GarbageCollectionStrategy$HashMap;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([Ljava/lang/String;[I)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/GarbageCollectionStrategy$HashMapInPlace : dev/shtanko/algorithms/leetcode/GarbageCollection, dev/shtanko/algorithms/leetcode/GarbageCollectionStrategy {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/GarbageCollectionStrategy$HashMapInPlace;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([Ljava/lang/String;[I)I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/GasStation {
	public abstract fun canCompleteCircuit ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/GasStationBruteForce : dev/shtanko/algorithms/leetcode/GasStation {
	public fun <init> ()V
	public fun canCompleteCircuit ([I[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/GcdOfStrings {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/GcdOfStringsImpl : dev/shtanko/algorithms/leetcode/GcdOfStrings {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/GenerateParentheses {
	public abstract fun invoke (I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/GenerateParenthesesBacktracking : dev/shtanko/algorithms/leetcode/GenerateParentheses {
	public fun <init> ()V
	public fun invoke (I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/GenerateParenthesesBruteForce : dev/shtanko/algorithms/leetcode/GenerateParentheses {
	public fun <init> ()V
	public fun invoke (I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/GenerateParenthesesClosureNumber : dev/shtanko/algorithms/leetcode/GenerateParentheses {
	public fun <init> ()V
	public fun invoke (I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/GenerateTreesKt {
	public static final fun invoke (I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/GetAncestorsInAcyclicGraph {
	public abstract fun invoke (I[[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/GetAncestorsInAcyclicGraphDFS : dev/shtanko/algorithms/leetcode/GetAncestorsInAcyclicGraph {
	public fun <init> ()V
	public fun invoke (I[[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/GetAncestorsInAcyclicGraphDFSOpt : dev/shtanko/algorithms/leetcode/GetAncestorsInAcyclicGraph {
	public fun <init> ()V
	public fun invoke (I[[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/GetAncestorsInAcyclicGraphSort : dev/shtanko/algorithms/leetcode/GetAncestorsInAcyclicGraph {
	public fun <init> ()V
	public fun invoke (I[[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/GetAveragesPrefixSum : dev/shtanko/algorithms/leetcode/KRadiusSubarrayAverages {
	public fun <init> ()V
	public fun getAverages ([II)[I
}

public final class dev/shtanko/algorithms/leetcode/GetAveragesSlidingWindow : dev/shtanko/algorithms/leetcode/KRadiusSubarrayAverages {
	public fun <init> ()V
	public fun getAverages ([II)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/GetDescentPeriods {
	public abstract fun invoke ([I)J
}

public final class dev/shtanko/algorithms/leetcode/GetDescentPeriodsOnePass : dev/shtanko/algorithms/leetcode/GetDescentPeriods {
	public fun <init> ()V
	public fun invoke ([I)J
}

public final class dev/shtanko/algorithms/leetcode/GetDescentPeriodsSimple : dev/shtanko/algorithms/leetcode/GetDescentPeriods {
	public fun <init> ()V
	public fun invoke ([I)J
}

public abstract interface class dev/shtanko/algorithms/leetcode/GetDirections {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;II)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/GetDirectionsBFS : dev/shtanko/algorithms/leetcode/GetDirections {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/GetDirectionsBFS$Companion;
	public static final field STATE_ERROR I
	public static final field STATE_FINISHED I
	public static final field STATE_IDLE I
	public static final field STATE_RECORDING I
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;II)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/GetDirectionsBFS$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/GetFinalState {
	public abstract fun invoke ([III)[I
}

public final class dev/shtanko/algorithms/leetcode/GetFinalState$ArrayStrategy : dev/shtanko/algorithms/leetcode/GetFinalState {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/GetFinalState$ArrayStrategy;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([III)[I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/GetFinalState$HeapStrategy : dev/shtanko/algorithms/leetcode/GetFinalState {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/GetFinalState$HeapStrategy;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([III)[I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/GetLastMoment {
	public abstract fun invoke (I[I[I)I
}

public final class dev/shtanko/algorithms/leetcode/GetLastMomentSolution : dev/shtanko/algorithms/leetcode/GetLastMoment {
	public fun <init> ()V
	public fun invoke (I[I[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/GetLucky {
	public abstract fun invoke (Ljava/lang/String;I)I
}

public final class dev/shtanko/algorithms/leetcode/GetLuckySolution : dev/shtanko/algorithms/leetcode/GetLucky {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/GetMaximumGold {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/GetMaximumGoldBacktracking : dev/shtanko/algorithms/leetcode/GetMaximumGold {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/GetMaximumGoldDFS : dev/shtanko/algorithms/leetcode/GetMaximumGold {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/GetMaximumScore {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/GetMaximumScore$Companion;
	public fun <init> ()V
	public final fun maxSum ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/GetMaximumScore$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/GetSumAbsoluteDifferences {
	public abstract fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/GetSumAbsoluteDifferencesPrefixSum : dev/shtanko/algorithms/leetcode/GetSumAbsoluteDifferences {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/GetSumAbsoluteDifferencesPrefixSum2 : dev/shtanko/algorithms/leetcode/GetSumAbsoluteDifferences {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/GetWinner {
	public abstract fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/GetWinnerStrategy {
}

public final class dev/shtanko/algorithms/leetcode/GetWinnerStrategy$NoQueueSolution : dev/shtanko/algorithms/leetcode/GetWinner, dev/shtanko/algorithms/leetcode/GetWinnerStrategy {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/GetWinnerStrategy$NoQueueSolution;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([II)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/GetWinnerStrategy$QueueSolution : dev/shtanko/algorithms/leetcode/GetWinner, dev/shtanko/algorithms/leetcode/GetWinnerStrategy {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/GetWinnerStrategy$QueueSolution;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([II)I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/GlobalAndLocalInversions {
	public abstract fun isIdealPermutation ([I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/GoalParser {
	public abstract fun interpret (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/GoalParserBruteForce : dev/shtanko/algorithms/leetcode/GoalParser {
	public fun <init> ()V
	public fun interpret (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/GoalParserRegex : dev/shtanko/algorithms/leetcode/GoalParser {
	public fun <init> ()V
	public fun interpret (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/GraphConnectivityWithThreshold {
	public abstract fun areConnected (II[[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/GraphConnectivityWithThresholdUnion : dev/shtanko/algorithms/leetcode/GraphConnectivityWithThreshold {
	public fun <init> ()V
	public fun areConnected (II[[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/GraphConnectivityWithThresholdUnion$UnionFind {
	public fun <init> (I)V
	public final fun find (I)I
	public final fun getParent ()[I
	public final fun getSize ()[I
	public final fun setParent ([I)V
	public final fun setSize ([I)V
	public final fun union (II)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/GraphValidTree {
	public abstract fun validTree (I[[I)Z
}

public final class dev/shtanko/algorithms/leetcode/GrayCode {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/GrayCode;
	public final fun backtracking (I)Ljava/util/List;
	public final fun getNextNum ()I
	public final fun iteration (I)Ljava/util/List;
	public final fun recursion (I)Ljava/util/List;
	public final fun setNextNum (I)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/GreatestCommonDivisorOfArray {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/GreatestCommonDivisorOfArrayBF : dev/shtanko/algorithms/leetcode/GreatestCommonDivisorOfArray {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/GreatestCommonDivisorOfArrayFunc : dev/shtanko/algorithms/leetcode/GreatestCommonDivisorOfArray {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/GreedyIPO : dev/shtanko/algorithms/leetcode/IPO {
	public fun <init> ()V
	public fun invoke (II[I[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/GroupAnagrams {
	public abstract fun invoke ([Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/GroupAnagramsMap : dev/shtanko/algorithms/leetcode/GroupAnagrams {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/GroupByCharacter : dev/shtanko/algorithms/leetcode/CountBinarySubstrings {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/GroupThePeople {
	public abstract fun invoke ([I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/GroupThePeopleGreedy : dev/shtanko/algorithms/leetcode/GroupThePeople {
	public fun <init> ()V
	public fun invoke ([I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/GrumpyBookstoreOwner {
	public abstract fun invoke ([I[II)I
}

public final class dev/shtanko/algorithms/leetcode/GrumpyBookstoreOwnerSlidingWindow : dev/shtanko/algorithms/leetcode/GrumpyBookstoreOwner {
	public fun <init> ()V
	public fun invoke ([I[II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/HalvesAreAlike {
	public abstract fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/HalvesAreAlikeBruteForce : dev/shtanko/algorithms/leetcode/HalvesAreAlike {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/HalvesAreAlikeCount : dev/shtanko/algorithms/leetcode/HalvesAreAlike {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/HammingDistanceKt {
	public static final fun hammingDistance (II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/HammingWeight {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/HammingWeightAnd : dev/shtanko/algorithms/leetcode/HammingWeight {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/HammingWeightAnd$Companion;
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/HammingWeightAnd$Companion {
}

public final class dev/shtanko/algorithms/leetcode/HammingWeightSolution : dev/shtanko/algorithms/leetcode/HammingWeight {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/HammingWeightStd : dev/shtanko/algorithms/leetcode/HammingWeight {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/HammingWeightUnsignedShiftRight : dev/shtanko/algorithms/leetcode/HammingWeight {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/HammingWeightXor : dev/shtanko/algorithms/leetcode/HammingWeight {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/HandOfStraights {
	public abstract fun invoke ([II)Z
}

public final class dev/shtanko/algorithms/leetcode/HandOfStraightsMap : dev/shtanko/algorithms/leetcode/HandOfStraights {
	public fun <init> ()V
	public fun invoke ([II)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/HappyString {
	public abstract fun invoke (II)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/HappyStringDFS : dev/shtanko/algorithms/leetcode/HappyString {
	public fun <init> ()V
	public fun invoke (II)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/HappyStringMath : dev/shtanko/algorithms/leetcode/HappyString {
	public fun <init> ()V
	public fun invoke (II)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/HeightChecker {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/HeightCheckerBubbleSort : dev/shtanko/algorithms/leetcode/HeightChecker {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/HeightCheckerCountingSort : dev/shtanko/algorithms/leetcode/HeightChecker {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/HeightCheckerHeapSort : dev/shtanko/algorithms/leetcode/HeightChecker {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/HeightCheckerIterative : dev/shtanko/algorithms/leetcode/HeightChecker {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/HeightCheckerMergeSort : dev/shtanko/algorithms/leetcode/HeightChecker {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/HeightCheckerRadixSort : dev/shtanko/algorithms/leetcode/HeightChecker {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/HeightCheckerStdSort : dev/shtanko/algorithms/leetcode/HeightChecker {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/HierholzersAlgorithm : dev/shtanko/algorithms/leetcode/ValidArrangementOfPairs {
	public fun <init> ()V
	public fun invoke ([[I)[[I
}

public final class dev/shtanko/algorithms/leetcode/HighFivePriorityQueue : dev/shtanko/algorithms/leetcode/HighFiveStrategy {
	public fun <init> ()V
	public fun invoke ([[I)[[I
}

public final class dev/shtanko/algorithms/leetcode/HighFiveSort : dev/shtanko/algorithms/leetcode/HighFiveStrategy {
	public fun <init> ()V
	public fun invoke ([[I)[[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/HighFiveStrategy {
	public abstract fun invoke ([[I)[[I
}

public final class dev/shtanko/algorithms/leetcode/HighestOneBit : dev/shtanko/algorithms/leetcode/BitwiseComplement {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/HighestOneBit$Companion;
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/HighestOneBit$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/IPO {
	public abstract fun invoke (II[I[I)I
}

public final class dev/shtanko/algorithms/leetcode/IPWorkingBackward : dev/shtanko/algorithms/leetcode/IsPossible {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/IPWorkingBackwardOptmz : dev/shtanko/algorithms/leetcode/IsPossible {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/IdealPermutationLinearScan : dev/shtanko/algorithms/leetcode/GlobalAndLocalInversions {
	public fun <init> ()V
	public fun isIdealPermutation ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/IdealPermutationRememberMinimum : dev/shtanko/algorithms/leetcode/GlobalAndLocalInversions {
	public fun <init> ()V
	public fun isIdealPermutation ([I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/ImageOverlap {
	public abstract fun largestOverlap ([[I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/ImageOverlapImagineConvolution : dev/shtanko/algorithms/leetcode/ImageOverlap {
	public fun <init> ()V
	public fun largestOverlap ([[I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/ImageOverlapLinear : dev/shtanko/algorithms/leetcode/ImageOverlap {
	public fun <init> ()V
	public fun largestOverlap ([[I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/ImageOverlapShiftAndCount : dev/shtanko/algorithms/leetcode/ImageOverlap {
	public fun <init> ()V
	public fun largestOverlap ([[I[[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ImageSmoother {
	public abstract fun invoke ([[I)[[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ImageSmootherStrategy {
}

public final class dev/shtanko/algorithms/leetcode/ImageSmootherStrategy$ConstantSpaceSmoothenedImage : dev/shtanko/algorithms/leetcode/ImageSmoother, dev/shtanko/algorithms/leetcode/ImageSmootherStrategy {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/ImageSmootherStrategy$ConstantSpaceSmoothenedImage;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([[I)[[I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ImageSmootherStrategy$ImageSmootherBitwise : dev/shtanko/algorithms/leetcode/ImageSmoother, dev/shtanko/algorithms/leetcode/ImageSmootherStrategy {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/ImageSmootherStrategy$ImageSmootherBitwise;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([[I)[[I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ImageSmootherStrategy$NewSmoothenedImage : dev/shtanko/algorithms/leetcode/ImageSmoother, dev/shtanko/algorithms/leetcode/ImageSmootherStrategy {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/ImageSmootherStrategy$NewSmoothenedImage;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([[I)[[I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ImprovedFinalReachableBuilding : dev/shtanko/algorithms/leetcode/FurthestBuilding {
	public fun <init> ()V
	public fun invoke ([III)I
}

public final class dev/shtanko/algorithms/leetcode/IncreasingOrderSearchTreeKt {
	public static final fun increasingBST (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ldev/shtanko/algorithms/leetcode/TreeNode;
	public static final fun inorder (Ldev/shtanko/algorithms/leetcode/TreeNode;Ljava/util/List;)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/IncreasingSubsequences {
	public abstract fun findSubsequences ([I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/IncreasingSubsequencesBacktracking : dev/shtanko/algorithms/leetcode/IncreasingSubsequences {
	public fun <init> ()V
	public fun findSubsequences ([I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/IncrementalStack {
	public abstract fun increment (II)V
	public abstract fun pop ()I
	public abstract fun push (I)V
}

public final class dev/shtanko/algorithms/leetcode/IncrementalStackArray : dev/shtanko/algorithms/leetcode/IncrementalStack {
	public fun <init> (I)V
	public fun increment (II)V
	public fun pop ()I
	public fun push (I)V
}

public final class dev/shtanko/algorithms/leetcode/IncrementalStackLazy : dev/shtanko/algorithms/leetcode/IncrementalStack {
	public fun <init> (I)V
	public fun increment (II)V
	public fun pop ()I
	public fun push (I)V
}

public final class dev/shtanko/algorithms/leetcode/IncrementalStackLinkedList : dev/shtanko/algorithms/leetcode/IncrementalStack {
	public fun <init> (I)V
	public final fun getMaxSize ()I
	public fun increment (II)V
	public fun pop ()I
	public fun push (I)V
}

public final class dev/shtanko/algorithms/leetcode/IndexedWord {
	public fun <init> (Ljava/lang/String;I)V
	public final fun getIndex ()I
	public final fun getWord ()Ljava/lang/String;
	public final fun setIndex (I)V
	public final fun setWord (Ljava/lang/String;)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/InsertGCD {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/InsertGCDSolution : dev/shtanko/algorithms/leetcode/InsertGCD {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/InsertGCDSolution;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/InsertInterval {
	public abstract fun invoke ([[I[I)[[I
}

public final class dev/shtanko/algorithms/leetcode/InsertIntervalBinarySearch : dev/shtanko/algorithms/leetcode/InsertInterval {
	public fun <init> ()V
	public fun invoke ([[I[I)[[I
}

public final class dev/shtanko/algorithms/leetcode/InsertIntervalLinearSearch : dev/shtanko/algorithms/leetcode/InsertInterval {
	public fun <init> ()V
	public fun invoke ([[I[I)[[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/IntegerBreak {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/IntegerBreakDP : dev/shtanko/algorithms/leetcode/IntegerBreak {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/IntegerReplacement {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/IntegerReplacementBinary : dev/shtanko/algorithms/leetcode/IntegerReplacement {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/IntegerReplacementBitCount : dev/shtanko/algorithms/leetcode/IntegerReplacement {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/IntegerToEnglishWords {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/IntegerToEnglishWords$Companion;
	public fun <init> ()V
	public final fun numberToWords (I)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/IntegerToEnglishWords$Companion {
}

public final class dev/shtanko/algorithms/leetcode/InterleavingString1D : dev/shtanko/algorithms/leetcode/InterleavingStringStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/InterleavingString2D : dev/shtanko/algorithms/leetcode/InterleavingStringStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/InterleavingStringBruteForce : dev/shtanko/algorithms/leetcode/InterleavingStringStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/InterleavingStringRecursionWithMemo : dev/shtanko/algorithms/leetcode/InterleavingStringStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/InterleavingStringStrategy {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/IntersectionBinarySearch : dev/shtanko/algorithms/leetcode/IntersectionStrategy {
	public fun <init> ()V
	public fun invoke ([I[I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/IntersectionOfTwoArrays2 {
	public abstract fun invoke ([I[I)[I
}

public final class dev/shtanko/algorithms/leetcode/IntersectionOfTwoArrays2Map : dev/shtanko/algorithms/leetcode/IntersectionOfTwoArrays2 {
	public fun <init> ()V
	public fun invoke ([I[I)[I
}

public final class dev/shtanko/algorithms/leetcode/IntersectionOfTwoArrays2Sort : dev/shtanko/algorithms/leetcode/IntersectionOfTwoArrays2 {
	public fun <init> ()V
	public fun invoke ([I[I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/IntersectionStrategy {
	public abstract fun invoke ([I[I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/IntersectionThreeSortedArrays {
	public abstract fun invoke ([I[I[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/IntersectionThreeSortedBruteForce : dev/shtanko/algorithms/leetcode/IntersectionThreeSortedArrays {
	public fun <init> ()V
	public fun invoke ([I[I[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/IntersectionThreeSortedThreePointers : dev/shtanko/algorithms/leetcode/IntersectionThreeSortedArrays {
	public fun <init> ()V
	public fun invoke ([I[I[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/IntersectionTwoPointers : dev/shtanko/algorithms/leetcode/IntersectionStrategy {
	public fun <init> ()V
	public fun invoke ([I[I)[I
}

public final class dev/shtanko/algorithms/leetcode/IntersectionTwoSets : dev/shtanko/algorithms/leetcode/IntersectionStrategy {
	public fun <init> ()V
	public fun invoke ([I[I)[I
}

public final class dev/shtanko/algorithms/leetcode/InvertTree : dev/shtanko/algorithms/leetcode/InvertTreeStrategy {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/InvertTreeRecursive : dev/shtanko/algorithms/leetcode/InvertTreeStrategy {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/InvertTreeStrategy {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/IsBoomerangKt {
	public static final fun isBoomerang ([[I)Z
}

public final class dev/shtanko/algorithms/leetcode/IsContainsDuplicateBitManipulation : dev/shtanko/algorithms/leetcode/ContainsDuplicateStrategy {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/IsContainsDuplicateBitManipulation$Companion;
	public fun <init> ()V
	public fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/IsContainsDuplicateBitManipulation$Companion {
}

public final class dev/shtanko/algorithms/leetcode/IsContainsDuplicateBrutForce : dev/shtanko/algorithms/leetcode/ContainsDuplicateStrategy {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/IsContainsDuplicateSort : dev/shtanko/algorithms/leetcode/ContainsDuplicateStrategy {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/IsContainsDuplicateSortSet : dev/shtanko/algorithms/leetcode/ContainsDuplicateStrategy {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/IsContainsDuplicateSortSetOptimized : dev/shtanko/algorithms/leetcode/ContainsDuplicateStrategy {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/IsContainsDuplicateSortSetSize : dev/shtanko/algorithms/leetcode/ContainsDuplicateStrategy {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/IsGraphBipartite {
	public abstract fun isBipartite ([[I)Z
}

public final class dev/shtanko/algorithms/leetcode/IsGraphBipartiteBFS : dev/shtanko/algorithms/leetcode/IsGraphBipartite {
	public fun <init> ()V
	public fun isBipartite ([[I)Z
}

public final class dev/shtanko/algorithms/leetcode/IsGraphBipartiteDFS : dev/shtanko/algorithms/leetcode/IsGraphBipartite {
	public fun <init> ()V
	public fun isBipartite ([[I)Z
}

public final class dev/shtanko/algorithms/leetcode/IsHappyKt {
	public static final fun isHappy (I)Z
}

public final class dev/shtanko/algorithms/leetcode/IsMatchKt {
	public static final fun isMatch (Lkotlin/Pair;)Z
}

public final class dev/shtanko/algorithms/leetcode/IsPalindromeKt {
	public static final fun isPalindrome (I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/IsPossible {
	public abstract fun invoke ([I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/IsPrefixOfWord {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/IsPrefixOfWord$BuiltInFunctions : dev/shtanko/algorithms/leetcode/IsPrefixOfWord {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/IsPrefixOfWord$BuiltInFunctions;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/IsPrefixOfWord$TwoPointersStrategy : dev/shtanko/algorithms/leetcode/IsPrefixOfWord {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/IsPrefixOfWord$TwoPointersStrategy;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/IsReachableAtTime {
	public abstract fun invoke (IIIII)Z
}

public final class dev/shtanko/algorithms/leetcode/IsReachableAtTimeMath : dev/shtanko/algorithms/leetcode/IsReachableAtTime {
	public fun <init> ()V
	public fun invoke (IIIII)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/IsSubsequence {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/IsSubsequenceDP : dev/shtanko/algorithms/leetcode/IsSubsequence {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/IsSubsequenceRecursion : dev/shtanko/algorithms/leetcode/IsSubsequence {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/IsSubsequenceTwoPointers : dev/shtanko/algorithms/leetcode/IsSubsequence {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/IsSumEqual {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/IsSumEqualImpl : dev/shtanko/algorithms/leetcode/IsSumEqual {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/IslandPerimeter {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/IslandPerimeterKt {
	public static final fun getCalculateIslandPerimeter ()Ldev/shtanko/algorithms/leetcode/IslandPerimeter;
	public static final fun getIslandPerimeterApproach1 ()Ldev/shtanko/algorithms/leetcode/IslandPerimeter;
}

public abstract interface class dev/shtanko/algorithms/leetcode/IsomorphicStrings {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/IsomorphicStringsOneLine : dev/shtanko/algorithms/leetcode/IsomorphicStrings {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/IteratePalindromes : dev/shtanko/algorithms/leetcode/PrimePalindrome {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/IteratePalindromes$Companion;
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/IteratePalindromes$Companion {
}

public final class dev/shtanko/algorithms/leetcode/IterativeInorder : dev/shtanko/algorithms/leetcode/ClosestBST {
	public fun <init> ()V
	public fun closestValue (Ldev/shtanko/algorithms/leetcode/TreeNode;D)I
}

public final class dev/shtanko/algorithms/leetcode/IterativeInorderTraversal : dev/shtanko/algorithms/leetcode/ValidateBinarySearchTree {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Z
}

public final class dev/shtanko/algorithms/leetcode/IterativeRobber : dev/shtanko/algorithms/leetcode/AbstractRobber {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/IterativeRobberMemo : dev/shtanko/algorithms/leetcode/AbstractRobber {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/IterativeTraversalValidRange : dev/shtanko/algorithms/leetcode/ValidateBinarySearchTree {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Z
}

public final class dev/shtanko/algorithms/leetcode/JP5BidirectionalBFS : dev/shtanko/algorithms/leetcode/JumpGame5Strategy {
	public fun <init> ()V
	public fun checkNeighbors (Ljava/util/Set;IILjava/util/List;)V
	public final fun getOther ()Ljava/util/List;
	public fun invoke ([I)I
	public final fun setOther (Ljava/util/List;)V
}

public final class dev/shtanko/algorithms/leetcode/JP5BidirectionalBFS2 : dev/shtanko/algorithms/leetcode/JumpGame5Strategy {
	public fun <init> ()V
	public fun checkNeighbors (Ljava/util/Set;IILjava/util/List;)V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/JP5BreadthFirstSearch : dev/shtanko/algorithms/leetcode/JumpGame5Strategy {
	public fun <init> ()V
	public fun checkNeighbors (Ljava/util/Set;IILjava/util/List;)V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/JobScheduling {
	public abstract fun invoke ([I[I[I)I
}

public final class dev/shtanko/algorithms/leetcode/JobSchedulingDp : dev/shtanko/algorithms/leetcode/JobScheduling {
	public fun <init> ()V
	public fun invoke ([I[I[I)I
}

public final class dev/shtanko/algorithms/leetcode/JudgeCircleKt {
	public static final fun judgeCircle (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/JumpGame2Kt {
	public static final fun jumpGame2 ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/JumpGame5Strategy {
	public fun checkNeighbors (Ljava/util/Set;IILjava/util/List;)V
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/JumpGame5Strategy$DefaultImpls {
	public static fun checkNeighbors (Ldev/shtanko/algorithms/leetcode/JumpGame5Strategy;Ljava/util/Set;IILjava/util/List;)V
}

public final class dev/shtanko/algorithms/leetcode/KClosestPointsQueue : dev/shtanko/algorithms/leetcode/KClosestPointsStrategy {
	public fun <init> ()V
	public fun getDistance ([I)I
	public fun invoke ([[II)[[I
}

public final class dev/shtanko/algorithms/leetcode/KClosestPointsSort : dev/shtanko/algorithms/leetcode/KClosestPointsStrategy {
	public fun <init> ()V
	public fun getDistance ([I)I
	public fun invoke ([[II)[[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/KClosestPointsStrategy {
	public fun getDistance ([I)I
	public abstract fun invoke ([[II)[[I
}

public final class dev/shtanko/algorithms/leetcode/KClosestPointsStrategy$DefaultImpls {
	public static fun getDistance (Ldev/shtanko/algorithms/leetcode/KClosestPointsStrategy;[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/KInversePairsArray {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/KInversePairsArray$Companion;
	public static final field DEFAULT_ARRAY_SIZE I
	public abstract fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/KInversePairsArray$Companion {
	public static final field DEFAULT_ARRAY_SIZE I
}

public final class dev/shtanko/algorithms/leetcode/KInversePairsArrayDP : dev/shtanko/algorithms/leetcode/KInversePairsArray {
	public fun <init> ()V
	public fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/KInversePairsArrayDP1D : dev/shtanko/algorithms/leetcode/KInversePairsArray {
	public fun <init> ()V
	public fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/KInversePairsArrayMemoization : dev/shtanko/algorithms/leetcode/KInversePairsArray {
	public fun <init> ()V
	public fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/KInversePairsArrayOptimizedDP : dev/shtanko/algorithms/leetcode/KInversePairsArray {
	public fun <init> ()V
	public fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/KInversePairsArrayRecursion : dev/shtanko/algorithms/leetcode/KInversePairsArray {
	public fun <init> ()V
	public fun invoke (II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/KRadiusSubarrayAverages {
	public abstract fun getAverages ([II)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/KSmallestPairs {
	public abstract fun invoke ([I[II)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/KSmallestPairsHeap : dev/shtanko/algorithms/leetcode/KSmallestPairs {
	public fun <init> ()V
	public fun invoke ([I[II)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/KTHDistinct {
	public abstract fun invoke ([Ljava/lang/String;I)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/KTHDistinctImpl : dev/shtanko/algorithms/leetcode/KTHDistinct {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;I)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/KWeakestRows {
	public abstract fun invoke ([[II)[I
}

public final class dev/shtanko/algorithms/leetcode/KWeakestRowsBF : dev/shtanko/algorithms/leetcode/KWeakestRows {
	public fun <init> ()V
	public fun invoke ([[II)[I
}

public final class dev/shtanko/algorithms/leetcode/KWeakestRowsPQ : dev/shtanko/algorithms/leetcode/KWeakestRows {
	public fun <init> ()V
	public fun invoke ([[II)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/KeysAndRooms {
	public abstract fun canVisitAllRooms (Ljava/util/List;)Z
}

public final class dev/shtanko/algorithms/leetcode/KeysAndRoomsDFS : dev/shtanko/algorithms/leetcode/KeysAndRooms {
	public fun <init> ()V
	public fun canVisitAllRooms (Ljava/util/List;)Z
}

public final class dev/shtanko/algorithms/leetcode/KeysAndRoomsRecursive : dev/shtanko/algorithms/leetcode/KeysAndRooms {
	public fun <init> ()V
	public fun canVisitAllRooms (Ljava/util/List;)Z
}

public final class dev/shtanko/algorithms/leetcode/KeysAndRoomsStraightForward : dev/shtanko/algorithms/leetcode/KeysAndRooms {
	public fun <init> ()V
	public fun canVisitAllRooms (Ljava/util/List;)Z
}

public final class dev/shtanko/algorithms/leetcode/KidsWithCandiesStraightForward : dev/shtanko/algorithms/leetcode/KidsWithCandiesStrategy {
	public fun <init> ()V
	public fun invoke ([II)[Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/KidsWithCandiesStrategy {
	public abstract fun invoke ([II)[Z
}

public final class dev/shtanko/algorithms/leetcode/KidsWithCandiesStream : dev/shtanko/algorithms/leetcode/KidsWithCandiesStrategy {
	public fun <init> ()V
	public fun invoke ([II)[Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/KnightDialer {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/KnightDialerBottomUp : dev/shtanko/algorithms/leetcode/KnightDialer {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/KnightDialerDP : dev/shtanko/algorithms/leetcode/KnightDialer {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/KnightProbability {
	public abstract fun invoke (IIII)D
}

public final class dev/shtanko/algorithms/leetcode/KnightProbabilityDP : dev/shtanko/algorithms/leetcode/KnightProbability {
	public fun <init> ()V
	public fun invoke (IIII)D
}

public final class dev/shtanko/algorithms/leetcode/KnightProbabilityMatrixExpo : dev/shtanko/algorithms/leetcode/KnightProbability {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/KnightProbabilityMatrixExpo$Companion;
	public fun <init> ()V
	public fun invoke (IIII)D
}

public final class dev/shtanko/algorithms/leetcode/KnightProbabilityMatrixExpo$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/KokoEatingBananas {
	public abstract fun minEatingSpeed ([II)I
}

public final class dev/shtanko/algorithms/leetcode/KokoEatingBananasBS : dev/shtanko/algorithms/leetcode/KokoEatingBananas {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/KokoEatingBananasBS$Companion;
	public fun <init> ()V
	public fun minEatingSpeed ([II)I
}

public final class dev/shtanko/algorithms/leetcode/KokoEatingBananasBS$Companion {
}

public final class dev/shtanko/algorithms/leetcode/KthFactorKt {
	public static final fun kthFactor (II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/KthLargestStream {
	public abstract fun add (I)I
}

public final class dev/shtanko/algorithms/leetcode/KthLargestStreamHeap : dev/shtanko/algorithms/leetcode/KthLargestStream {
	public fun <init> (I[I)V
	public fun add (I)I
	public final fun getK ()I
}

public abstract interface class dev/shtanko/algorithms/leetcode/KthSmallest {
	public abstract fun invoke ([[II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/KthSmallestPath {
	public abstract fun invoke ([II)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/KthSmallestPathImpl : dev/shtanko/algorithms/leetcode/KthSmallestPath {
	public fun <init> ()V
	public fun invoke ([II)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/KthSmallestPrimeFraction {
	public abstract fun invoke ([II)[I
}

public final class dev/shtanko/algorithms/leetcode/KthSmallestPrimeFractionBS : dev/shtanko/algorithms/leetcode/KthSmallestPrimeFraction {
	public fun <init> ()V
	public fun invoke ([II)[I
}

public abstract class dev/shtanko/algorithms/leetcode/KthSmallestStrategy {
}

public final class dev/shtanko/algorithms/leetcode/KthSmallestStrategy$BinarySearch : dev/shtanko/algorithms/leetcode/KthSmallestStrategy, dev/shtanko/algorithms/leetcode/KthSmallest {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/KthSmallestStrategy$BinarySearch;
	public fun invoke ([[II)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/KthSmallestStrategy$MinHeap : dev/shtanko/algorithms/leetcode/KthSmallestStrategy, dev/shtanko/algorithms/leetcode/KthSmallest {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/KthSmallestStrategy$MinHeap;
	public fun invoke ([[II)I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/KthSymbolInGrammar {
	public abstract fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/KthSymbolInGrammarDFS : dev/shtanko/algorithms/leetcode/KthSymbolInGrammar {
	public fun <init> ()V
	public fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/KthSymbolInGrammarIteration : dev/shtanko/algorithms/leetcode/KthSymbolInGrammar {
	public fun <init> ()V
	public fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/KthSymbolInGrammarMath : dev/shtanko/algorithms/leetcode/KthSymbolInGrammar {
	public fun <init> ()V
	public fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/KthSymbolInGrammarRecursion : dev/shtanko/algorithms/leetcode/KthSymbolInGrammar {
	public fun <init> ()V
	public fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/LCPDivideAndConquer : dev/shtanko/algorithms/leetcode/LongestCommonPrefix {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/LCPHorizontalScanning : dev/shtanko/algorithms/leetcode/LongestCommonPrefix {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/LCPVerticalScanning : dev/shtanko/algorithms/leetcode/LongestCommonPrefix {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/LFUCache {
	public abstract fun get (I)I
	public abstract fun put (II)V
}

public final class dev/shtanko/algorithms/leetcode/LFUCacheImpl : dev/shtanko/algorithms/leetcode/LFUCache {
	public fun <init> (I)V
	public fun get (I)I
	public fun put (II)V
}

public final class dev/shtanko/algorithms/leetcode/LLSSlidingWindow : dev/shtanko/algorithms/leetcode/LengthOfLongestSubstring {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/LLSSlidingWindow$Companion;
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/LLSSlidingWindow$Companion {
}

public final class dev/shtanko/algorithms/leetcode/LLSSlidingWindowOpt : dev/shtanko/algorithms/leetcode/LengthOfLongestSubstring {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/LLSSlidingWindowOpt$Companion;
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/LLSSlidingWindowOpt$Companion {
}

public final class dev/shtanko/algorithms/leetcode/LNSDivideAndConquer : dev/shtanko/algorithms/leetcode/LongestNiceSubstring {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/LPSIterativeDP : dev/shtanko/algorithms/leetcode/LongestPalindromicSubsequence {
	public fun <init> ()V
	public fun longestPalindromeSubseq (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/LPSOptimizedDP : dev/shtanko/algorithms/leetcode/LongestPalindromicSubsequence {
	public fun <init> ()V
	public fun longestPalindromeSubseq (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/LPSRecursiveDP : dev/shtanko/algorithms/leetcode/LongestPalindromicSubsequence {
	public fun <init> ()V
	public fun longestPalindromeSubseq (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/LRSBinarySearch : dev/shtanko/algorithms/leetcode/LongestRepeatingSubstring {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
	public fun search (IILjava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/LRSHashes : dev/shtanko/algorithms/leetcode/LongestRepeatingSubstring {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
	public fun search (IILjava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/LRSRabinKarp : dev/shtanko/algorithms/leetcode/LongestRepeatingSubstring {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/LRSRabinKarp$Companion;
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
	public fun search (IILjava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/LRSRabinKarp$Companion {
}

public final class dev/shtanko/algorithms/leetcode/LRUCache {
	public fun <init> (I)V
	public final fun get (I)I
	public final fun put (II)V
}

public final class dev/shtanko/algorithms/leetcode/LSCBottomUp : dev/shtanko/algorithms/leetcode/LongestStringChain {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/LSCTopDown : dev/shtanko/algorithms/leetcode/LongestStringChain {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/LargestColorValueInDirectedGraph {
	public abstract fun largestPathValue (Ljava/lang/String;[[I)I
}

public final class dev/shtanko/algorithms/leetcode/LargestColorValueInDirectedGraphSet : dev/shtanko/algorithms/leetcode/LargestColorValueInDirectedGraph {
	public fun <init> ()V
	public fun largestPathValue (Ljava/lang/String;[[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/LargestCombination {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/LargestCombinationBitCount : dev/shtanko/algorithms/leetcode/LargestCombination {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/LargestDivisibleSubset {
	public abstract fun invoke ([I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/LargestDivisibleSubsetDFS : dev/shtanko/algorithms/leetcode/LargestDivisibleSubset {
	public fun <init> ()V
	public fun invoke ([I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/LargestGoodInt {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/LargestGoodIntCompare : dev/shtanko/algorithms/leetcode/LargestGoodInt {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/LargestGoodIntSingleIteration : dev/shtanko/algorithms/leetcode/LargestGoodInt {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/LargestGoodIntSingleIteration$Companion;
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/LargestGoodIntSingleIteration$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/LargestIsland {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/LargestIslandComponentSizes : dev/shtanko/algorithms/leetcode/LargestIsland {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/LargestIslandDFS : dev/shtanko/algorithms/leetcode/LargestIsland {
	public fun <init> ()V
	public final fun check ([[III)I
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/LargestIslandUnionFind : dev/shtanko/algorithms/leetcode/LargestIsland {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/LargestLocalValuesInMatrix {
	public abstract fun invoke ([[I)[[I
}

public final class dev/shtanko/algorithms/leetcode/LargestLocalValuesInMatrixSolution : dev/shtanko/algorithms/leetcode/LargestLocalValuesInMatrix {
	public fun <init> ()V
	public fun invoke ([[I)[[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/LargestMerge {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/LargestMergeGreedy : dev/shtanko/algorithms/leetcode/LargestMerge {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/LargestMultipleOfThreeKt {
	public static final fun largestMultipleOfThree ([I)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/LargestNumber {
	public abstract fun invoke ([I)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/LargestNumberSort : dev/shtanko/algorithms/leetcode/LargestNumber {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/LargestNumberSort;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I)Ljava/lang/String;
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/LargestOddNumber {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/LargestOddNumberOddDigit : dev/shtanko/algorithms/leetcode/LargestOddNumber {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/LargestPalindromicNumber {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/LargestPalindromicNumberGreedy : dev/shtanko/algorithms/leetcode/LargestPalindromicNumber {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/LargestPerimeterTriangle {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/LargestPerimeterTriangleSort : dev/shtanko/algorithms/leetcode/LargestPerimeterTriangle {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/LargestUniqueNumber {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/LargestUniqueNumberBruteForce : dev/shtanko/algorithms/leetcode/LargestUniqueNumber {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/LargestUniqueNumberBruteForce$Companion;
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/LargestUniqueNumberBruteForce$Companion {
}

public final class dev/shtanko/algorithms/leetcode/LargestUniqueNumberHashMap : dev/shtanko/algorithms/leetcode/LargestUniqueNumber {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/LargestValueInEachTreeRowBFS : dev/shtanko/algorithms/leetcode/FindLargestValueInEachTreeRow {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/LargestValueInEachTreeRowDFS : dev/shtanko/algorithms/leetcode/FindLargestValueInEachTreeRow {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/LargestValueInEachTreeRowDFSIter : dev/shtanko/algorithms/leetcode/FindLargestValueInEachTreeRow {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/LargestVariance {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/LargestVarianceKadane : dev/shtanko/algorithms/leetcode/LargestVariance {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/LastSetBit : dev/shtanko/algorithms/leetcode/CountingBits {
	public fun <init> ()V
	public fun invoke (I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/LastStoneWeight {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/LastStoneWeightQueue : dev/shtanko/algorithms/leetcode/LastStoneWeight {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/LastStoneWeightSort : dev/shtanko/algorithms/leetcode/LastStoneWeight {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/LatestDayToCross {
	public abstract fun invoke (II[[I)I
}

public final class dev/shtanko/algorithms/leetcode/LatestDayToCrossBSBFS : dev/shtanko/algorithms/leetcode/LatestDayToCross {
	public fun <init> ()V
	public fun invoke (II[[I)I
}

public final class dev/shtanko/algorithms/leetcode/LatestDayToCrossBSDFS : dev/shtanko/algorithms/leetcode/LatestDayToCross {
	public fun <init> ()V
	public fun invoke (II[[I)I
}

public final class dev/shtanko/algorithms/leetcode/LatestDayToCrossDisjoint : dev/shtanko/algorithms/leetcode/LatestDayToCross {
	public fun <init> ()V
	public fun invoke (II[[I)I
}

public final class dev/shtanko/algorithms/leetcode/LatestDayToCrossUnion : dev/shtanko/algorithms/leetcode/LatestDayToCross {
	public fun <init> ()V
	public fun invoke (II[[I)I
}

public final class dev/shtanko/algorithms/leetcode/LeafSimilarDepthFirstSearch : dev/shtanko/algorithms/leetcode/LeafSimilarTrees {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;Ldev/shtanko/algorithms/leetcode/TreeNode;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/LeafSimilarTrees {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;Ldev/shtanko/algorithms/leetcode/TreeNode;)Z
}

public final class dev/shtanko/algorithms/leetcode/LeastSignificantBit : dev/shtanko/algorithms/leetcode/CountingBits {
	public fun <init> ()V
	public fun invoke (I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/LeetcodeProblem {
}

public abstract interface class dev/shtanko/algorithms/leetcode/LeftmostBuildingQueries {
	public abstract fun invoke ([I[[I)[I
}

public final class dev/shtanko/algorithms/leetcode/LeftmostBuildingQueries$MonotonicStack : dev/shtanko/algorithms/leetcode/LeftmostBuildingQueries {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/LeftmostBuildingQueries$MonotonicStack;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I[[I)[I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/LeftmostBuildingQueries$PriorityQueueStrategy : dev/shtanko/algorithms/leetcode/LeftmostBuildingQueries {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/LeftmostBuildingQueries$PriorityQueueStrategy;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I[[I)[I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/LemonadeChange {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/LemonadeChange$Companion;
	public fun <init> ()V
	public final fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/LemonadeChange$Companion {
}

public final class dev/shtanko/algorithms/leetcode/LengthOfLastWord {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/LengthOfLastWord;
	public final fun builtinString (Ljava/lang/String;)I
	public final fun oneLoopIteration (Ljava/lang/String;)I
	public final fun stringIndexManipulation (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/LengthOfLongestSubstring {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/LengthOfLongestSubstringBF : dev/shtanko/algorithms/leetcode/LengthOfLongestSubstring {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/LengthOfLongestSubstringBF$Companion;
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/LengthOfLongestSubstringBF$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/LetterCasePermutation {
	public abstract fun invoke (Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/LetterCasePermutationBFS : dev/shtanko/algorithms/leetcode/LetterCasePermutation {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/LetterCasePermutationDFS : dev/shtanko/algorithms/leetcode/LetterCasePermutation {
	public fun <init> ()V
	public final fun helper ([CLjava/util/List;I)V
	public fun invoke (Ljava/lang/String;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/LetterCombinations {
	public abstract fun invoke (Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/LetterCombinationsRecursion : dev/shtanko/algorithms/leetcode/LetterCombinations {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/LetterCombinationsRecursion$Companion;
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/LetterCombinationsRecursion$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/LetterTilePossibilities {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/LetterTilePossibilitiesDFS : dev/shtanko/algorithms/leetcode/LetterTilePossibilities {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/LevelOrderBottomKt {
	public static final fun levelOrderBottom (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/LevelOrderKt {
	public static final fun levelOrder (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/LexicographicSubsets : dev/shtanko/algorithms/leetcode/Subsets {
	public fun <init> ()V
	public fun invoke ([I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/LexicographicalNumbers {
	public abstract fun invoke (I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/LexicographicalNumbersDFS : dev/shtanko/algorithms/leetcode/LexicographicalNumbers {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/LexicographicalNumbersDFS;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (I)Ljava/util/List;
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/LinkedListCycle {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Z
}

public final class dev/shtanko/algorithms/leetcode/LinkedListCycleSolution : dev/shtanko/algorithms/leetcode/LinkedListCycle {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/LinkedListInBinaryTree {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;Ldev/shtanko/algorithms/leetcode/TreeNode;)Z
}

public final class dev/shtanko/algorithms/leetcode/LinkedListInBinaryTreeDFS : dev/shtanko/algorithms/leetcode/LinkedListInBinaryTree {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/LinkedListInBinaryTreeDFS;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;Ldev/shtanko/algorithms/leetcode/TreeNode;)Z
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/LinkedListInBinaryTreeIterative : dev/shtanko/algorithms/leetcode/LinkedListInBinaryTree {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/LinkedListInBinaryTreeIterative;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;Ldev/shtanko/algorithms/leetcode/TreeNode;)Z
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/LinkedListInBinaryTreeKMP : dev/shtanko/algorithms/leetcode/LinkedListInBinaryTree {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/LinkedListInBinaryTreeKMP;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;Ldev/shtanko/algorithms/leetcode/TreeNode;)Z
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/LinkedListRandomNode {
	public fun <init> (Ldev/shtanko/algorithms/leetcode/ListNode;)V
	public final fun getHead ()Ldev/shtanko/algorithms/leetcode/ListNode;
	public final fun getRandom ()I
}

public final class dev/shtanko/algorithms/leetcode/ListNode : java/lang/Comparable {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/ListNode$Companion;
	public fun <init> ()V
	public fun <init> (ILdev/shtanko/algorithms/leetcode/ListNode;)V
	public synthetic fun <init> (ILdev/shtanko/algorithms/leetcode/ListNode;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun compareTo (Ldev/shtanko/algorithms/leetcode/ListNode;)I
	public synthetic fun compareTo (Ljava/lang/Object;)I
	public final fun component1 ()I
	public final fun component2 ()Ldev/shtanko/algorithms/leetcode/ListNode;
	public final fun copy (ILdev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
	public static synthetic fun copy$default (Ldev/shtanko/algorithms/leetcode/ListNode;ILdev/shtanko/algorithms/leetcode/ListNode;ILjava/lang/Object;)Ldev/shtanko/algorithms/leetcode/ListNode;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getNext ()Ldev/shtanko/algorithms/leetcode/ListNode;
	public final fun getValue ()I
	public fun hashCode ()I
	public final fun prettyPrint ()V
	public final fun prettyPrinted ()Ljava/lang/String;
	public final fun setNext (Ldev/shtanko/algorithms/leetcode/ListNode;)V
	public final fun setValue (I)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ListNode$Companion {
	public final fun empty ()Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/ListNodeKt {
	public static final fun addIfNotNull (Ljava/util/Collection;Ldev/shtanko/algorithms/leetcode/ListNode;)V
	public static final fun isNotNull (Ldev/shtanko/algorithms/leetcode/ListNode;)Z
	public static final fun reverseList (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
	public static final fun toIntArray (Ldev/shtanko/algorithms/leetcode/ListNode;)[I
	public static final fun toList (Ldev/shtanko/algorithms/leetcode/ListNode;)Ljava/util/List;
	public static final fun toListNode (Ljava/util/List;)Ldev/shtanko/algorithms/leetcode/ListNode;
	public static final fun toListNode ([I)Ldev/shtanko/algorithms/leetcode/ListNode;
	public static final fun toListNode ([Ljava/lang/Integer;)Ldev/shtanko/algorithms/leetcode/ListNode;
	public static final fun toListOrEmpty (Ldev/shtanko/algorithms/leetcode/ListNode;)Ljava/util/List;
	public static final fun zip (Ldev/shtanko/algorithms/leetcode/ListNode;Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/ListTNode {
	public fun <init> ()V
	public fun <init> (Ljava/lang/Object;Ldev/shtanko/algorithms/leetcode/ListTNode;)V
	public synthetic fun <init> (Ljava/lang/Object;Ldev/shtanko/algorithms/leetcode/ListTNode;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ljava/lang/Object;
	public final fun component2 ()Ldev/shtanko/algorithms/leetcode/ListTNode;
	public final fun copy (Ljava/lang/Object;Ldev/shtanko/algorithms/leetcode/ListTNode;)Ldev/shtanko/algorithms/leetcode/ListTNode;
	public static synthetic fun copy$default (Ldev/shtanko/algorithms/leetcode/ListTNode;Ljava/lang/Object;Ldev/shtanko/algorithms/leetcode/ListTNode;ILjava/lang/Object;)Ldev/shtanko/algorithms/leetcode/ListTNode;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getNext ()Ldev/shtanko/algorithms/leetcode/ListTNode;
	public final fun getValue ()Ljava/lang/Object;
	public fun hashCode ()I
	public final fun setNext (Ldev/shtanko/algorithms/leetcode/ListTNode;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ListTNodeKt {
	public static final fun prettyPrint (Ldev/shtanko/algorithms/leetcode/ListTNode;)Ljava/lang/String;
	public static final fun toList (Ldev/shtanko/algorithms/leetcode/ListTNode;)Ljava/util/List;
	public static final fun toListTNode (Ljava/util/List;)Ldev/shtanko/algorithms/leetcode/ListTNode;
}

public final class dev/shtanko/algorithms/leetcode/LockOpenerBFS : dev/shtanko/algorithms/leetcode/OpenLock {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/LockOpenerBFS$Companion;
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/LockOpenerBFS$Companion {
}

public final class dev/shtanko/algorithms/leetcode/LogarithmicBounds : dev/shtanko/algorithms/leetcode/PowerfulIntegers {
	public fun <init> ()V
	public fun invoke (III)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/LongestArithmeticSubsequence {
	public abstract fun longestArithSeqLength ([I)I
}

public final class dev/shtanko/algorithms/leetcode/LongestArithmeticSubsequenceDP : dev/shtanko/algorithms/leetcode/LongestArithmeticSubsequence {
	public fun <init> ()V
	public fun longestArithSeqLength ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/LongestAwesome {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/LongestAwesomeImpl : dev/shtanko/algorithms/leetcode/LongestAwesome {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/LongestAwesomeImpl$Companion;
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/LongestAwesomeImpl$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/LongestCommonPrefix {
	public abstract fun invoke ([Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/LongestCommonPrefixLen {
	public abstract fun invoke ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/LongestCommonPrefixLenHashTable : dev/shtanko/algorithms/leetcode/LongestCommonPrefixLen {
	public fun <init> ()V
	public fun invoke ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/LongestCommonPrefixLenTrie : dev/shtanko/algorithms/leetcode/LongestCommonPrefixLen {
	public fun <init> ()V
	public fun invoke ([I[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/LongestCommonSubPath {
	public abstract fun invoke (I[[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/LongestCommonSubsequence {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/LongestCommonSubsequenceDP : dev/shtanko/algorithms/leetcode/LongestCommonSubsequence {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/LongestContinuousSubarray {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/LongestContinuousSubarrayDoubleDeque : dev/shtanko/algorithms/leetcode/LongestContinuousSubarray {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/LongestContinuousSubarrayMultiset : dev/shtanko/algorithms/leetcode/LongestContinuousSubarray {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/LongestContinuousSubarrayTwoHeaps : dev/shtanko/algorithms/leetcode/LongestContinuousSubarray {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/LongestCycle {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/LongestCycleDFS : dev/shtanko/algorithms/leetcode/LongestCycle {
	public fun <init> ()V
	public final fun dfs (I[ILjava/util/Map;[Z)V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/LongestCycleKahnsAlgorithm : dev/shtanko/algorithms/leetcode/LongestCycle {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/LongestHappyString {
	public abstract fun invoke (III)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/LongestHappyStringPriorityQueue : dev/shtanko/algorithms/leetcode/LongestHappyString {
	public fun <init> ()V
	public fun invoke (III)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/LongestHappyStringPriorityQueue$Pair {
	public fun <init> (IC)V
	public final fun component1 ()I
	public final fun component2 ()C
	public final fun copy (IC)Ldev/shtanko/algorithms/leetcode/LongestHappyStringPriorityQueue$Pair;
	public static synthetic fun copy$default (Ldev/shtanko/algorithms/leetcode/LongestHappyStringPriorityQueue$Pair;ICILjava/lang/Object;)Ldev/shtanko/algorithms/leetcode/LongestHappyStringPriorityQueue$Pair;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getCharacter ()C
	public final fun getCount ()I
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/LongestIdealSubsequence {
	public abstract fun invoke (Ljava/lang/String;I)I
}

public final class dev/shtanko/algorithms/leetcode/LongestIdealSubsequenceBottomUpDP : dev/shtanko/algorithms/leetcode/LongestIdealSubsequence {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;I)I
}

public final class dev/shtanko/algorithms/leetcode/LongestIdealSubsequenceTopDownDP : dev/shtanko/algorithms/leetcode/LongestIdealSubsequence {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/LongestIncreasingPath {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/LongestIncreasingPathDFS : dev/shtanko/algorithms/leetcode/LongestIncreasingPath {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/LongestIncreasingPathInMatrix {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/LongestIncreasingPathInMatrixDFS : dev/shtanko/algorithms/leetcode/LongestIncreasingPathInMatrix {
	public fun <init> ()V
	public final fun dfs ([[IIIII[[I)I
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/LongestIncreasingPathPeelingOnion : dev/shtanko/algorithms/leetcode/LongestIncreasingPath {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/LongestIncreasingSubsequence {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/LongestIncreasingSubsequence$BinarySearch : dev/shtanko/algorithms/leetcode/LongestIncreasingSubsequence {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/LongestIncreasingSubsequence$BinarySearch;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/LongestIncreasingSubsequence$BuildSubsequence : dev/shtanko/algorithms/leetcode/LongestIncreasingSubsequence {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/LongestIncreasingSubsequence$BuildSubsequence;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/LongestIncreasingSubsequence$DynamicProgramming : dev/shtanko/algorithms/leetcode/LongestIncreasingSubsequence {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/LongestIncreasingSubsequence$DynamicProgramming;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I)I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/LongestNiceSubstring {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/LongestObstacleCourse {
	public abstract fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/LongestObstacleCourseGreedyBS : dev/shtanko/algorithms/leetcode/LongestObstacleCourse {
	public fun <init> ()V
	public final fun getAnswer ()Ljava/util/List;
	public fun invoke ([I)[I
	public final fun setAnswer (Ljava/util/List;)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/LongestPalindromeConcatenating {
	public abstract fun longestPalindrome ([Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/LongestPalindromeConcatenatingArr : dev/shtanko/algorithms/leetcode/LongestPalindromeConcatenating {
	public fun <init> ()V
	public fun longestPalindrome ([Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/LongestPalindromeConcatenatingMap : dev/shtanko/algorithms/leetcode/LongestPalindromeConcatenating {
	public fun <init> ()V
	public fun longestPalindrome ([Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/LongestPalindromeKt {
	public static final fun longestPalindrome (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/LongestPalindromeLen {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/LongestPalindromeLenHashSet : dev/shtanko/algorithms/leetcode/LongestPalindromeLen {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/LongestPalindromicSubsequence {
	public abstract fun longestPalindromeSubseq (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/LongestPalindromicSubstring {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/LongestPalindromicSubstringBF : dev/shtanko/algorithms/leetcode/LongestPalindromicSubstring {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/LongestPalindromicSubstringDP : dev/shtanko/algorithms/leetcode/LongestPalindromicSubstring {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/LongestPalindromicSubstringExpand : dev/shtanko/algorithms/leetcode/LongestPalindromicSubstring {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/LongestPalindromicSubstringManacher : dev/shtanko/algorithms/leetcode/LongestPalindromicSubstring {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/LongestPath {
	public abstract fun invoke ([ILjava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/LongestPathDFS : dev/shtanko/algorithms/leetcode/LongestPath {
	public fun <init> ()V
	public final fun getRes ()I
	public fun invoke ([ILjava/lang/String;)I
	public final fun setRes (I)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/LongestRepeatingSubstring {
	public fun invoke (Ljava/lang/String;)I
	public fun search (IILjava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/LongestRepeatingSubstring$DefaultImpls {
	public static fun invoke (Ldev/shtanko/algorithms/leetcode/LongestRepeatingSubstring;Ljava/lang/String;)I
	public static fun search (Ldev/shtanko/algorithms/leetcode/LongestRepeatingSubstring;IILjava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/LongestStringChain {
	public abstract fun invoke ([Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/LongestSubarray {
	public abstract fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/LongestSubarrayMaxBitwise {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/LongestSubarrayMaxBitwiseKt {
	public static final fun getLongestSubarrayMaxBitwiseSolution ()Ldev/shtanko/algorithms/leetcode/LongestSubarrayMaxBitwise;
}

public final class dev/shtanko/algorithms/leetcode/LongestSubarraySlidingWindow : dev/shtanko/algorithms/leetcode/LongestSubarray {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/LongestSubarraySlidingWindow2 : dev/shtanko/algorithms/leetcode/LongestSubarray {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/LongestSubsequence {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/LongestSubsequenceDP : dev/shtanko/algorithms/leetcode/LongestSubsequence {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/LongestTripleSubstring {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/LongestTripleSubstring$OptimizedHashing : dev/shtanko/algorithms/leetcode/LongestTripleSubstring {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/LongestTripleSubstring$OptimizedHashing;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/lang/String;)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/LongestValidParenthesesBruteForce : dev/shtanko/algorithms/leetcode/LongestValidParenthesesStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/LongestValidParenthesesDP : dev/shtanko/algorithms/leetcode/LongestValidParenthesesStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/LongestValidParenthesesStack : dev/shtanko/algorithms/leetcode/LongestValidParenthesesStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/LongestValidParenthesesStrategy {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/LongestValidParenthesesWithoutExtraSpace : dev/shtanko/algorithms/leetcode/LongestValidParenthesesStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/LongestZigZagPath {
	public abstract fun longestZigZag (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/LongestZigZagPathDFS : dev/shtanko/algorithms/leetcode/LongestZigZagPath {
	public fun <init> ()V
	public fun longestZigZag (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/LoudAndRich {
	public abstract fun invoke ([[I[I)[I
}

public final class dev/shtanko/algorithms/leetcode/LoudAndRichDFS : dev/shtanko/algorithms/leetcode/LoudAndRich {
	public fun <init> ()V
	public fun invoke ([[I[I)[I
}

public final class dev/shtanko/algorithms/leetcode/LoudAndRichMap : dev/shtanko/algorithms/leetcode/LoudAndRich {
	public fun <init> ()V
	public fun invoke ([[I[I)[I
}

public final class dev/shtanko/algorithms/leetcode/LuckyNumbers : dev/shtanko/algorithms/leetcode/AbstractLuckyNumbers {
	public fun <init> ()V
	public fun invoke ([[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/LuckyNumbersSet : dev/shtanko/algorithms/leetcode/AbstractLuckyNumbers {
	public fun <init> ()V
	public fun invoke ([[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/MEVBruteForce : dev/shtanko/algorithms/leetcode/MaximumErasureValue {
	public fun <init> ()V
	public fun maximumUniqueSubarray ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MEVPrefixSum : dev/shtanko/algorithms/leetcode/MaximumErasureValue {
	public fun <init> ()V
	public fun maximumUniqueSubarray ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MEVPrefixSumCountArray : dev/shtanko/algorithms/leetcode/MaximumErasureValue {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/MEVPrefixSumCountArray$Companion;
	public fun <init> ()V
	public fun maximumUniqueSubarray ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MEVPrefixSumCountArray$Companion {
}

public final class dev/shtanko/algorithms/leetcode/MEVTwoPointerBooleanArray : dev/shtanko/algorithms/leetcode/MaximumErasureValue {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/MEVTwoPointerBooleanArray$Companion;
	public fun <init> ()V
	public fun maximumUniqueSubarray ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MEVTwoPointerBooleanArray$Companion {
}

public final class dev/shtanko/algorithms/leetcode/MEVTwoPointerCountMap : dev/shtanko/algorithms/leetcode/MaximumErasureValue {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/MEVTwoPointerCountMap$Companion;
	public fun <init> ()V
	public fun maximumUniqueSubarray ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MEVTwoPointerCountMap$Companion {
}

public final class dev/shtanko/algorithms/leetcode/MEVTwoPointerSet : dev/shtanko/algorithms/leetcode/MaximumErasureValue {
	public fun <init> ()V
	public fun maximumUniqueSubarray ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MNBinarySearch : dev/shtanko/algorithms/leetcode/MissingNumberInProgression {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MNLinearSearch : dev/shtanko/algorithms/leetcode/MissingNumberInProgression {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MSDivideAndConquer : dev/shtanko/algorithms/leetcode/MaximumSubarray {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MSHeap : dev/shtanko/algorithms/leetcode/MeetingScheduler {
	public fun <init> ()V
	public fun invoke ([[I[[II)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/MSTwoPointers : dev/shtanko/algorithms/leetcode/MeetingScheduler {
	public fun <init> ()V
	public fun invoke ([[I[[II)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/MWSSlidingLongestSubstring : dev/shtanko/algorithms/leetcode/MinimumWindowSubstring {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MWSSlidingWindow : dev/shtanko/algorithms/leetcode/MinimumWindowSubstring {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/MWSSlidingWindow$Companion;
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MWSSlidingWindow$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/MagicSquaresInGrid {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MagicSquaresInGridMagicSquare : dev/shtanko/algorithms/leetcode/MagicSquaresInGrid {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MagicSquaresInGridManualScan : dev/shtanko/algorithms/leetcode/MagicSquaresInGrid {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MajorityChecker {
	public fun <init> ([I)V
	public final fun getArr ()[I
	public final fun query (III)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MajorityElement {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MajorityElementBit : dev/shtanko/algorithms/leetcode/MajorityElement {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/MajorityElementBit$Companion;
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MajorityElementBit$Companion {
}

public final class dev/shtanko/algorithms/leetcode/MajorityElementDivideAndConquer : dev/shtanko/algorithms/leetcode/MajorityElement {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MajorityElementHashTable : dev/shtanko/algorithms/leetcode/MajorityElement {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MajorityElementRandomization : dev/shtanko/algorithms/leetcode/MajorityElement {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MajorityElementSorting : dev/shtanko/algorithms/leetcode/MajorityElement {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MakeAllStringsEqual {
	public abstract fun invoke ([Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/MakeAllStringsEqualArray : dev/shtanko/algorithms/leetcode/MakeAllStringsEqual {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/MakeArrayEqual {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/MakeArrayEqualBruteForce : dev/shtanko/algorithms/leetcode/MakeArrayEqual {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/MakeArrayEqualMath : dev/shtanko/algorithms/leetcode/MakeArrayEqual {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MakeArrayStrictlyIncreasing {
	public fun bisectRight ([II)I
	public abstract fun invoke ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/MakeArrayStrictlyIncreasing$DefaultImpls {
	public static fun bisectRight (Ldev/shtanko/algorithms/leetcode/MakeArrayStrictlyIncreasing;[II)I
}

public final class dev/shtanko/algorithms/leetcode/MakeArrayStrictlyIncreasingBottomUp : dev/shtanko/algorithms/leetcode/MakeArrayStrictlyIncreasing {
	public fun <init> ()V
	public fun bisectRight ([II)I
	public fun invoke ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/MakeArrayStrictlyIncreasingTopDown : dev/shtanko/algorithms/leetcode/MakeArrayStrictlyIncreasing {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/MakeArrayStrictlyIncreasingTopDown$Companion;
	public fun <init> ()V
	public fun bisectRight ([II)I
	public fun invoke ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/MakeArrayStrictlyIncreasingTopDown$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/MakeConnected {
	public fun findParent ([II)I
	public abstract fun invoke (I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/MakeConnected$DefaultImpls {
	public static fun findParent (Ldev/shtanko/algorithms/leetcode/MakeConnected;[II)I
}

public final class dev/shtanko/algorithms/leetcode/MakeConnectedBFS : dev/shtanko/algorithms/leetcode/MakeConnected {
	public fun <init> ()V
	public fun findParent ([II)I
	public fun invoke (I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/MakeConnectedDFS : dev/shtanko/algorithms/leetcode/MakeConnected {
	public fun <init> ()V
	public fun findParent ([II)I
	public fun invoke (I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/MakeConnectedNaiveUnionFind : dev/shtanko/algorithms/leetcode/MakeConnected {
	public fun <init> ()V
	public fun findParent ([II)I
	public fun invoke (I[[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MakeFancyString {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MakeFancyStringTwoPointer : dev/shtanko/algorithms/leetcode/MakeFancyString {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MakeLargestSpecialKt {
	public static final fun makeLargestSpecial (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/MakeTheStringGreat {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MakeTheStringGreatIteration : dev/shtanko/algorithms/leetcode/MakeTheStringGreat {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MakeTheStringGreatRecursion : dev/shtanko/algorithms/leetcode/MakeTheStringGreat {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MakeTheStringGreatStack : dev/shtanko/algorithms/leetcode/MakeTheStringGreat {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/MakeTheStringGreatStack$Companion;
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MakeTheStringGreatStack$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/Malloc {
	public abstract fun allocate (II)I
	public abstract fun free (I)I
}

public final class dev/shtanko/algorithms/leetcode/MathAndGeometry : dev/shtanko/algorithms/leetcode/RectangleArea {
	public fun <init> ()V
	public fun computeArea (IIIIIIII)I
}

public final class dev/shtanko/algorithms/leetcode/MathOptimalDivision : dev/shtanko/algorithms/leetcode/OptimalDivisionStrategy {
	public fun <init> ()V
	public fun invoke ([I)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MatrixBlockSum {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/MatrixBlockSum;
	public final fun invoke ([[II)[[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MatrixDiagonalSum {
	public abstract fun diagonalSum ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MatrixDiagonalSumIteration : dev/shtanko/algorithms/leetcode/MatrixDiagonalSum {
	public fun <init> ()V
	public fun diagonalSum ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MatrixRankTransform {
	public abstract fun invoke ([[I)[[I
}

public final class dev/shtanko/algorithms/leetcode/MatrixRankTransformMap : dev/shtanko/algorithms/leetcode/MatrixRankTransform {
	public fun <init> ()V
	public fun invoke ([[I)[[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MatrixReshape {
	public abstract fun invoke ([[III)[[I
}

public abstract class dev/shtanko/algorithms/leetcode/MatrixReshapeStrategy {
}

public final class dev/shtanko/algorithms/leetcode/MatrixReshapeStrategy$UsingDivision : dev/shtanko/algorithms/leetcode/MatrixReshape {
	public fun <init> ()V
	public fun invoke ([[III)[[I
}

public final class dev/shtanko/algorithms/leetcode/MatrixReshapeStrategy$UsingQueue : dev/shtanko/algorithms/leetcode/MatrixReshape {
	public fun <init> ()V
	public fun invoke ([[III)[[I
}

public final class dev/shtanko/algorithms/leetcode/MatrixReshapeStrategy$WithoutUsingExtraSpace : dev/shtanko/algorithms/leetcode/MatrixReshape {
	public fun <init> ()V
	public fun invoke ([[III)[[I
}

public final class dev/shtanko/algorithms/leetcode/Max69NumberBuildIn : dev/shtanko/algorithms/leetcode/Maximum69Number {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/Max69NumberIterable : dev/shtanko/algorithms/leetcode/Maximum69Number {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/Max69NumberRem : dev/shtanko/algorithms/leetcode/Maximum69Number {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxAncestorDiff {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/MaxAncestorDiffMM : dev/shtanko/algorithms/leetcode/MaxAncestorDiff {
	public fun <init> ()V
	public final fun helper (Ldev/shtanko/algorithms/leetcode/TreeNode;II)I
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/MaxAncestorDiffRecursion : dev/shtanko/algorithms/leetcode/MaxAncestorDiff {
	public fun <init> ()V
	public final fun getResult ()I
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
	public final fun setResult (I)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxAverageRatio {
	public abstract fun invoke ([[II)D
}

public final class dev/shtanko/algorithms/leetcode/MaxAverageRatio$PriorityQueueStrategy : dev/shtanko/algorithms/leetcode/MaxAverageRatio {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/MaxAverageRatio$PriorityQueueStrategy;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([[II)D
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxBeauty {
	public abstract fun invoke ([[I[I)[I
}

public final class dev/shtanko/algorithms/leetcode/MaxBeautySortingBinarySearch : dev/shtanko/algorithms/leetcode/MaxBeauty {
	public fun <init> ()V
	public fun invoke ([[I[I)[I
}

public final class dev/shtanko/algorithms/leetcode/MaxBeautySortingQueries : dev/shtanko/algorithms/leetcode/MaxBeauty {
	public fun <init> ()V
	public fun invoke ([[I[I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxBoxesInWarehouse {
	public abstract fun invoke ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxBoxesInWarehouseAdd : dev/shtanko/algorithms/leetcode/MaxBoxesInWarehouse {
	public fun <init> ()V
	public fun invoke ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxBoxesInWarehouseLPB : dev/shtanko/algorithms/leetcode/MaxBoxesInWarehouse {
	public fun <init> ()V
	public fun invoke ([I[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxChunksToSorted {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxChunksToSorted$MaximumElement : dev/shtanko/algorithms/leetcode/MaxChunksToSorted {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/MaxChunksToSorted$MaximumElement;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MaxChunksToSorted$PrefixArrays : dev/shtanko/algorithms/leetcode/MaxChunksToSorted {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/MaxChunksToSorted$PrefixArrays;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MaxChunksToSorted$PrefixSums : dev/shtanko/algorithms/leetcode/MaxChunksToSorted {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/MaxChunksToSorted$PrefixSums;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MaxChunksToSorted$StackSolution : dev/shtanko/algorithms/leetcode/MaxChunksToSorted {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/MaxChunksToSorted$StackSolution;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I)I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxCoinsYouCanGet {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxCoinsYouCanGetGreedy : dev/shtanko/algorithms/leetcode/MaxCoinsYouCanGet {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxCoinsYouCanGetNoQueue : dev/shtanko/algorithms/leetcode/MaxCoinsYouCanGet {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxConcatenationOfSubsequence {
	public abstract fun invoke (Ljava/util/List;)I
}

public final class dev/shtanko/algorithms/leetcode/MaxConcatenationOfSubsequenceSet : dev/shtanko/algorithms/leetcode/MaxConcatenationOfSubsequence {
	public fun <init> ()V
	public fun invoke (Ljava/util/List;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxConsecutiveAnswers {
	public abstract fun invoke (Ljava/lang/String;I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxConsecutiveAnswersBS : dev/shtanko/algorithms/leetcode/MaxConsecutiveAnswers {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxConsecutiveAnswersSlidingWindow : dev/shtanko/algorithms/leetcode/MaxConsecutiveAnswers {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxConsecutiveAnswersSlidingWindow2 : dev/shtanko/algorithms/leetcode/MaxConsecutiveAnswers {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxCount {
	public abstract fun invoke ([III)I
}

public final class dev/shtanko/algorithms/leetcode/MaxCount$BinarySearch : dev/shtanko/algorithms/leetcode/MaxCount {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/MaxCount$BinarySearch;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([III)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MaxCount$HashSet : dev/shtanko/algorithms/leetcode/MaxCount {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/MaxCount$HashSet;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([III)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MaxCount$Sweep : dev/shtanko/algorithms/leetcode/MaxCount {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/MaxCount$Sweep;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([III)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MaxDepthIterative : dev/shtanko/algorithms/leetcode/MaxDepthStrategy {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/MaxDepthRecursive : dev/shtanko/algorithms/leetcode/MaxDepthStrategy {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxDepthStrategy {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxDetonation {
	public fun getGraph ([[I)Lkotlin/Pair;
	public abstract fun maximumDetonation ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxDetonation$DefaultImpls {
	public static fun getGraph (Ldev/shtanko/algorithms/leetcode/MaxDetonation;[[I)Lkotlin/Pair;
}

public final class dev/shtanko/algorithms/leetcode/MaxDetonationBFS : dev/shtanko/algorithms/leetcode/MaxDetonation {
	public fun <init> ()V
	public fun getGraph ([[I)Lkotlin/Pair;
	public fun maximumDetonation ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxDetonationIterative : dev/shtanko/algorithms/leetcode/MaxDetonation {
	public fun <init> ()V
	public fun getGraph ([[I)Lkotlin/Pair;
	public fun maximumDetonation ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxDetonationRecursive : dev/shtanko/algorithms/leetcode/MaxDetonation {
	public fun <init> ()V
	public fun getGraph ([[I)Lkotlin/Pair;
	public fun maximumDetonation ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxDistance {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MaxDistanceBinarySearch : dev/shtanko/algorithms/leetcode/MaxDistance {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxDistanceInArrays {
	public abstract fun invoke (Ljava/util/List;)I
}

public final class dev/shtanko/algorithms/leetcode/MaxDistanceInArraysGreedy : dev/shtanko/algorithms/leetcode/MaxDistanceInArrays {
	public fun <init> ()V
	public fun invoke (Ljava/util/List;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxElementDecrementingAndRearranging {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxElementDecrementingAndRearrangingImpl : dev/shtanko/algorithms/leetcode/MaxElementDecrementingAndRearranging {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxEqualRowsAfterFlips {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxEqualRowsAfterFlipsHashMap : dev/shtanko/algorithms/leetcode/MaxEqualRowsAfterFlips {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxFrequency {
	public abstract fun maxFrequency ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxFrequencyElements {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxFrequencyElementsKt {
	public static final fun getMaxFrequencyElementsOnePass ()Ldev/shtanko/algorithms/leetcode/MaxFrequencyElements;
}

public final class dev/shtanko/algorithms/leetcode/MaxFrequencySlidingWindow : dev/shtanko/algorithms/leetcode/MaxFrequency {
	public fun <init> ()V
	public fun maxFrequency ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxGain {
	public abstract fun invoke (Ljava/lang/String;II)I
}

public final class dev/shtanko/algorithms/leetcode/MaxGainCounting : dev/shtanko/algorithms/leetcode/MaxGain {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;II)I
}

public final class dev/shtanko/algorithms/leetcode/MaxGainGreedy : dev/shtanko/algorithms/leetcode/MaxGain {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;II)I
}

public final class dev/shtanko/algorithms/leetcode/MaxGainStack : dev/shtanko/algorithms/leetcode/MaxGain {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxHappinessSum {
	public abstract fun invoke ([II)J
}

public final class dev/shtanko/algorithms/leetcode/MaxHappinessSumMaxHeap : dev/shtanko/algorithms/leetcode/MaxHappinessSum {
	public fun <init> ()V
	public fun invoke ([II)J
}

public final class dev/shtanko/algorithms/leetcode/MaxHappinessSumSort : dev/shtanko/algorithms/leetcode/MaxHappinessSum {
	public fun <init> ()V
	public fun invoke ([II)J
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxIceCream {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MaxIceCreamBucketSort : dev/shtanko/algorithms/leetcode/MaxIceCream {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MaxIceCreamDP : dev/shtanko/algorithms/leetcode/MaxIceCream {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MaxIceCreamGreedy : dev/shtanko/algorithms/leetcode/MaxIceCream {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxImportance {
	public abstract fun invoke (I[[I)J
}

public final class dev/shtanko/algorithms/leetcode/MaxImportanceSort : dev/shtanko/algorithms/leetcode/MaxImportance {
	public fun <init> ()V
	public fun invoke (I[[I)J
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxKDivisibleComponents {
	public abstract fun invoke (I[[I[II)I
}

public final class dev/shtanko/algorithms/leetcode/MaxKDivisibleComponents$BreadthFirstSearch : dev/shtanko/algorithms/leetcode/MaxKDivisibleComponents {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/MaxKDivisibleComponents$BreadthFirstSearch;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (I[[I[II)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MaxKDivisibleComponents$DepthFirstSearch : dev/shtanko/algorithms/leetcode/MaxKDivisibleComponents {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/MaxKDivisibleComponents$DepthFirstSearch;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (I[[I[II)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MaxKDivisibleComponents$TopologicalSort : dev/shtanko/algorithms/leetcode/MaxKDivisibleComponents {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/MaxKDivisibleComponents$TopologicalSort;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (I[[I[II)I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxKElements {
	public abstract fun invoke ([II)J
}

public final class dev/shtanko/algorithms/leetcode/MaxKElementsPriorityQueue : dev/shtanko/algorithms/leetcode/MaxKElements {
	public fun <init> ()V
	public fun invoke ([II)J
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxMoves {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxMovesBottomUpDp : dev/shtanko/algorithms/leetcode/MaxMoves {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxMovesTopDown : dev/shtanko/algorithms/leetcode/MaxMoves {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxNumEdgesToRemove {
	public abstract fun invoke (I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxNumEdgesToRemoveDSU : dev/shtanko/algorithms/leetcode/MaxNumEdgesToRemove {
	public fun <init> ()V
	public fun invoke (I[[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxNumOfPointsWithCost {
	public abstract fun invoke ([[I)J
}

public final class dev/shtanko/algorithms/leetcode/MaxNumOfPointsWithCostDP : dev/shtanko/algorithms/leetcode/MaxNumOfPointsWithCost {
	public fun <init> ()V
	public fun invoke ([[I)J
}

public final class dev/shtanko/algorithms/leetcode/MaxNumOfPointsWithCostDPBetter : dev/shtanko/algorithms/leetcode/MaxNumOfPointsWithCost {
	public fun <init> ()V
	public fun invoke ([[I)J
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxNumOfSubstrings {
	public abstract fun invoke (Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/MaxNumOfSubstringsGreedy : dev/shtanko/algorithms/leetcode/MaxNumOfSubstrings {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/MaxNumOfSubstringsKosaraju : dev/shtanko/algorithms/leetcode/MaxNumOfSubstrings {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/MaxNumberKt {
	public static final fun maxNumber ([I[II)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxNumberOfApples {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxNumberOfApplesBucketSort : dev/shtanko/algorithms/leetcode/MaxNumberOfApples {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxNumberOfApplesMinHeap : dev/shtanko/algorithms/leetcode/MaxNumberOfApples {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxNumberOfApplesSort : dev/shtanko/algorithms/leetcode/MaxNumberOfApples {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxOddBinaryNum {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MaxOddBinaryNumKt {
	public static final fun getMaxOddBinaryNumCounting ()Ldev/shtanko/algorithms/leetcode/MaxOddBinaryNum;
	public static final fun getMaxOddBinaryNumSort ()Ldev/shtanko/algorithms/leetcode/MaxOddBinaryNum;
	public static final fun getMaxOddBinaryNumTwoPointers ()Ldev/shtanko/algorithms/leetcode/MaxOddBinaryNum;
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxPathSum {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/MaxPathSumRecursion : dev/shtanko/algorithms/leetcode/MaxPathSum {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxPoints {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxPointsMap : dev/shtanko/algorithms/leetcode/MaxPoints {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxPower1 : dev/shtanko/algorithms/leetcode/ConsecutiveCharactersStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MaxPower2 : dev/shtanko/algorithms/leetcode/ConsecutiveCharactersStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxProbability {
	public abstract fun invoke (I[[I[DII)D
}

public final class dev/shtanko/algorithms/leetcode/MaxProbabilityBellmanFord : dev/shtanko/algorithms/leetcode/MaxProbability {
	public fun <init> ()V
	public fun invoke (I[[I[DII)D
}

public final class dev/shtanko/algorithms/leetcode/MaxProbabilityDijkstra : dev/shtanko/algorithms/leetcode/MaxProbability {
	public fun <init> ()V
	public fun invoke (I[[I[DII)D
}

public final class dev/shtanko/algorithms/leetcode/MaxProbabilityKt {
	public static final fun toGraph ([[I[D)Ljava/util/Map;
}

public final class dev/shtanko/algorithms/leetcode/MaxProbabilityShortestPath : dev/shtanko/algorithms/leetcode/MaxProbability {
	public fun <init> ()V
	public fun invoke (I[[I[DII)D
}

public final class dev/shtanko/algorithms/leetcode/MaxProductBitmasks : dev/shtanko/algorithms/leetcode/MaximumProductOfWordLengths {
	public fun <init> ()V
	public fun maxProduct ([Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MaxProductBruteForce : dev/shtanko/algorithms/leetcode/MaximumProductSubArray {
	public fun <init> ()V
	public fun maxProduct ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxProductDP : dev/shtanko/algorithms/leetcode/MaximumProductSubArray {
	public fun <init> ()V
	public fun maxProduct ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxProductDifference {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxProductDifferenceSort : dev/shtanko/algorithms/leetcode/MaxProductDifference {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxProductDifferenceTrack : dev/shtanko/algorithms/leetcode/MaxProductDifference {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxProductHashmap : dev/shtanko/algorithms/leetcode/MaximumProductOfWordLengths {
	public fun <init> ()V
	public fun maxProduct ([Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MaxProductKt {
	public static final fun maxProduct ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxProductOfTwoElementsInArray {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxProductOfTwoElementsInArrayBF : dev/shtanko/algorithms/leetcode/MaxProductOfTwoElementsInArray {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxProductOfTwoElementsInArraySort : dev/shtanko/algorithms/leetcode/MaxProductOfTwoElementsInArray {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxProductTree {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/MaxProductTreeInorder : dev/shtanko/algorithms/leetcode/MaxProductTree {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/MaxProfitKt {
	public static final fun maxProfit ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxProfitSimpleKt {
	public static final fun maxProfitSimple ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxProfitStock {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxProfitStockImpl : dev/shtanko/algorithms/leetcode/MaxProfitStock {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxProfitWithFee {
	public abstract fun maxProfit ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MaxProfitWithFeeDP : dev/shtanko/algorithms/leetcode/MaxProfitWithFee {
	public fun <init> ()V
	public fun maxProfit ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MaxProfitWithFeeSpaceOptimizedDP : dev/shtanko/algorithms/leetcode/MaxProfitWithFee {
	public fun <init> ()V
	public fun maxProfit ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxRequests {
	public abstract fun maximumRequests (I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxRequestsBacktracking : dev/shtanko/algorithms/leetcode/MaxRequests {
	public fun <init> ()V
	public fun maximumRequests (I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxRequestsBitmasking : dev/shtanko/algorithms/leetcode/MaxRequests {
	public fun <init> ()V
	public fun maximumRequests (I[[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxRunTime {
	public abstract fun invoke (I[I)J
}

public final class dev/shtanko/algorithms/leetcode/MaxRunTimeBS : dev/shtanko/algorithms/leetcode/MaxRunTime {
	public fun <init> ()V
	public fun invoke (I[I)J
}

public final class dev/shtanko/algorithms/leetcode/MaxRunTimePrefixSum : dev/shtanko/algorithms/leetcode/MaxRunTime {
	public fun <init> ()V
	public fun invoke (I[I)J
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxSafenessFactor {
	public abstract fun invoke (Ljava/util/List;)I
}

public final class dev/shtanko/algorithms/leetcode/MaxSafenessFactorBS : dev/shtanko/algorithms/leetcode/MaxSafenessFactor {
	public fun <init> ()V
	public fun invoke (Ljava/util/List;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxScore {
	public abstract fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxScoreAfterSplittingString {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MaxScoreAfterSplittingString$BruteForce : dev/shtanko/algorithms/leetcode/MaxScoreAfterSplittingString {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/MaxScoreAfterSplittingString$BruteForce;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/lang/String;)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MaxScoreAfterSplittingString$CountLeftZerosAndRightOnes : dev/shtanko/algorithms/leetcode/MaxScoreAfterSplittingString {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/MaxScoreAfterSplittingString$CountLeftZerosAndRightOnes;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/lang/String;)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MaxScoreAfterSplittingString$OnePass : dev/shtanko/algorithms/leetcode/MaxScoreAfterSplittingString {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/MaxScoreAfterSplittingString$OnePass;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/lang/String;)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MaxScoreBS : dev/shtanko/algorithms/leetcode/MaxScoreOfGoodSubarray {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MaxScoreDP : dev/shtanko/algorithms/leetcode/MaxScore {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MaxScoreDPSpaceOptimized : dev/shtanko/algorithms/leetcode/MaxScore {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MaxScoreDpIterative : dev/shtanko/algorithms/leetcode/MaximizeScoreAfterNOperations {
	public fun <init> ()V
	public fun maxScore ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxScoreDpRecursive : dev/shtanko/algorithms/leetcode/MaximizeScoreAfterNOperations {
	public fun <init> ()V
	public fun maxScore ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxScoreGreedy : dev/shtanko/algorithms/leetcode/MaxScoreOfGoodSubarray {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxScoreOfGoodSubarray {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MaxScoreSightseeingPairKt {
	public static final fun maxScoreSightseeingPair ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxScoreSlidingWindow : dev/shtanko/algorithms/leetcode/MaxScore {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MaxScoreStack : dev/shtanko/algorithms/leetcode/MaxScoreOfGoodSubarray {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxScoreWords {
	public abstract fun invoke ([Ljava/lang/String;[C[I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxScoreWordsBacktracking : dev/shtanko/algorithms/leetcode/MaxScoreWords {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;[C[I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxScoreWordsDFS : dev/shtanko/algorithms/leetcode/MaxScoreWords {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;[C[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxSubarrayLen {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MaxSubarrayLenSlidingWindow : dev/shtanko/algorithms/leetcode/MaxSubarrayLen {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MaxSubarrayLenSlidingWindowOpt : dev/shtanko/algorithms/leetcode/MaxSubarrayLen {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxSubarraySum {
	public abstract fun invoke ([II)J
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxSubarraySumCircular {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxSubarraySumCircularKadane : dev/shtanko/algorithms/leetcode/MaxSubarraySumCircular {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxSubarraySumCircularOnePass : dev/shtanko/algorithms/leetcode/MaxSubarraySumCircular {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxSubarraySumSlidingWindow : dev/shtanko/algorithms/leetcode/MaxSubarraySum {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/MaxSubarraySumSlidingWindow;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([II)J
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxSumAfterPartitioning {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MaxSumAfterPartitioningDP : dev/shtanko/algorithms/leetcode/MaxSumAfterPartitioning {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MaxSumAfterPartitioningMemo : dev/shtanko/algorithms/leetcode/MaxSumAfterPartitioning {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxSumBST {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/MaxSumBSTPostOrder : dev/shtanko/algorithms/leetcode/MaxSumBST {
	public fun <init> ()V
	public final fun dfs (Ldev/shtanko/algorithms/leetcode/TreeNode;)[I
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/MaxSumSubMatrixKt {
	public static final fun maxSumSubMatrix ([[II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxSwap {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxSwapGreedy : dev/shtanko/algorithms/leetcode/MaxSwap {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxTwinSum {
	public abstract fun pairSum (Ldev/shtanko/algorithms/leetcode/ListNode;)I
}

public final class dev/shtanko/algorithms/leetcode/MaxTwinSumIntList : dev/shtanko/algorithms/leetcode/MaxTwinSum {
	public fun <init> ()V
	public fun pairSum (Ldev/shtanko/algorithms/leetcode/ListNode;)I
}

public final class dev/shtanko/algorithms/leetcode/MaxTwinSumReverse : dev/shtanko/algorithms/leetcode/MaxTwinSum {
	public fun <init> ()V
	public fun pairSum (Ldev/shtanko/algorithms/leetcode/ListNode;)I
}

public final class dev/shtanko/algorithms/leetcode/MaxTwinSumStack : dev/shtanko/algorithms/leetcode/MaxTwinSum {
	public fun <init> ()V
	public fun pairSum (Ldev/shtanko/algorithms/leetcode/ListNode;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxTwoEvents {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxTwoEvents$Greedy : dev/shtanko/algorithms/leetcode/MaxTwoEvents {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/MaxTwoEvents$Greedy;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([[I)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MaxTwoEvents$MinHeap : dev/shtanko/algorithms/leetcode/MaxTwoEvents {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/MaxTwoEvents$MinHeap;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([[I)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MaxTwoEvents$TopDownDP : dev/shtanko/algorithms/leetcode/MaxTwoEvents {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/MaxTwoEvents$TopDownDP;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([[I)I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxValue2 {
	public abstract fun invoke ([[II)I
}

public final class dev/shtanko/algorithms/leetcode/MaxValue2BottomUp : dev/shtanko/algorithms/leetcode/MaxValue2 {
	public fun <init> ()V
	public fun invoke ([[II)I
}

public final class dev/shtanko/algorithms/leetcode/MaxValue2Kt {
	public static final fun bisectRight ([[II)I
}

public final class dev/shtanko/algorithms/leetcode/MaxValue2SimpleTopDown : dev/shtanko/algorithms/leetcode/MaxValue2 {
	public field dp [[I
	public fun <init> ()V
	public final fun getDp ()[[I
	public fun invoke ([[II)I
	public final fun setDp ([[I)V
}

public final class dev/shtanko/algorithms/leetcode/MaxValue2TopDown : dev/shtanko/algorithms/leetcode/MaxValue2 {
	public fun <init> ()V
	public fun invoke ([[II)I
}

public final class dev/shtanko/algorithms/leetcode/MaxValue2TopDownBS : dev/shtanko/algorithms/leetcode/MaxValue2 {
	public fun <init> ()V
	public fun invoke ([[II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxValueBoundedArray {
	public abstract fun maxValue (III)I
}

public final class dev/shtanko/algorithms/leetcode/MaxValueBoundedArraySolution : dev/shtanko/algorithms/leetcode/MaxValueBoundedArray {
	public fun <init> ()V
	public fun maxValue (III)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxValueOfCoins {
	public abstract fun invoke (Ljava/util/List;I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxValueOfCoinsTopDown : dev/shtanko/algorithms/leetcode/MaxValueOfCoins {
	public fun <init> ()V
	public fun invoke (Ljava/util/List;I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxValueSum {
	public abstract fun invoke ([II[[I)J
}

public final class dev/shtanko/algorithms/leetcode/MaxValueSumBottomUp : dev/shtanko/algorithms/leetcode/MaxValueSum {
	public fun <init> ()V
	public fun invoke ([II[[I)J
}

public final class dev/shtanko/algorithms/leetcode/MaxValueSumTopDown : dev/shtanko/algorithms/leetcode/MaxValueSum {
	public fun <init> ()V
	public fun invoke ([II[[I)J
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxVowels {
	public abstract fun invoke (Ljava/lang/String;I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxVowelsSlidingWindow : dev/shtanko/algorithms/leetcode/MaxVowels {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaxWidthOfVerticalArea {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MaxWidthOfVerticalAreaSort : dev/shtanko/algorithms/leetcode/MaxWidthOfVerticalArea {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaximalNetworkRank {
	public abstract fun invoke (I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/MaximalNetworkRankInDegree : dev/shtanko/algorithms/leetcode/MaximalNetworkRank {
	public fun <init> ()V
	public fun invoke (I[[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaximalPathQuality {
	public abstract fun invoke ([I[[II)I
}

public final class dev/shtanko/algorithms/leetcode/MaximalPathQualityDFS : dev/shtanko/algorithms/leetcode/MaximalPathQuality {
	public fun <init> ()V
	public fun invoke ([I[[II)I
}

public final class dev/shtanko/algorithms/leetcode/MaximalRectangleKt {
	public static final fun maximalRectangle ([[C)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaximizeScoreAfterNOperations {
	public abstract fun maxScore ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/Maximum69Number {
	public abstract fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaximumANDSum {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MaximumANDSumDP : dev/shtanko/algorithms/leetcode/MaximumANDSum {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaximumBags {
	public abstract fun invoke ([I[II)I
}

public final class dev/shtanko/algorithms/leetcode/MaximumBagsGreedy : dev/shtanko/algorithms/leetcode/MaximumBags {
	public fun <init> ()V
	public fun invoke ([I[II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaximumBeauty {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MaximumBeauty$BinarySearch : dev/shtanko/algorithms/leetcode/MaximumBeauty {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/MaximumBeauty$BinarySearch;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([II)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MaximumBeauty$LineSweep : dev/shtanko/algorithms/leetcode/MaximumBeauty {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/MaximumBeauty$LineSweep;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([II)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MaximumBeauty$SlidingWindow : dev/shtanko/algorithms/leetcode/MaximumBeauty {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/MaximumBeauty$SlidingWindow;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([II)I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaximumBuildingHeight {
	public abstract fun maxBuilding (I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/MaximumBuildingHeight2Passes : dev/shtanko/algorithms/leetcode/MaximumBuildingHeight {
	public fun <init> ()V
	public fun maxBuilding (I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/MaximumBuildingHeightImpl : dev/shtanko/algorithms/leetcode/MaximumBuildingHeight {
	public fun <init> ()V
	public fun maxBuilding (I[[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaximumErasureValue {
	public abstract fun maximumUniqueSubarray ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaximumGap {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MaximumGapBuckets : dev/shtanko/algorithms/leetcode/MaximumGap {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MaximumGapComparisonSorting : dev/shtanko/algorithms/leetcode/MaximumGap {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MaximumGapRadixSort : dev/shtanko/algorithms/leetcode/MaximumGap {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/MaximumGapRadixSort$Companion;
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MaximumGapRadixSort$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaximumLengthRepeatedSubarray {
	public abstract fun findLength ([I[I)I
}

public abstract class dev/shtanko/algorithms/leetcode/MaximumLengthRepeatedSubarrayStrategy {
}

public final class dev/shtanko/algorithms/leetcode/MaximumLengthRepeatedSubarrayStrategy$BinarySearch : dev/shtanko/algorithms/leetcode/MaximumLengthRepeatedSubarray {
	public fun <init> ()V
	public final fun check (I[I[I)Z
	public fun findLength ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/MaximumLengthRepeatedSubarrayStrategy$BruteForce : dev/shtanko/algorithms/leetcode/MaximumLengthRepeatedSubarray {
	public fun <init> ()V
	public fun findLength ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/MaximumLengthRepeatedSubarrayStrategy$DPRollingHash : dev/shtanko/algorithms/leetcode/MaximumLengthRepeatedSubarray {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/MaximumLengthRepeatedSubarrayStrategy$DPRollingHash$Companion;
	public static final field P J
	public fun <init> ()V
	public fun findLength ([I[I)I
	public final fun getPinv ()I
	public final fun setPinv (I)V
}

public final class dev/shtanko/algorithms/leetcode/MaximumLengthRepeatedSubarrayStrategy$DPRollingHash$Companion {
}

public final class dev/shtanko/algorithms/leetcode/MaximumLengthRepeatedSubarrayStrategy$DynamicProgramming : dev/shtanko/algorithms/leetcode/MaximumLengthRepeatedSubarray {
	public fun <init> ()V
	public fun findLength ([I[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaximumLevelSumOfBinaryTree {
	public abstract fun maxLevelSum (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/MaximumLevelSumOfBinaryTreeBFS : dev/shtanko/algorithms/leetcode/MaximumLevelSumOfBinaryTree {
	public fun <init> ()V
	public fun maxLevelSum (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/MaximumLevelSumOfBinaryTreeDFS : dev/shtanko/algorithms/leetcode/MaximumLevelSumOfBinaryTree {
	public fun <init> ()V
	public fun maxLevelSum (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaximumMatrixSum {
	public abstract fun invoke ([[I)J
}

public final class dev/shtanko/algorithms/leetcode/MaximumMatrixSumSolution : dev/shtanko/algorithms/leetcode/MaximumMatrixSum {
	public fun <init> ()V
	public fun invoke ([[I)J
}

public final class dev/shtanko/algorithms/leetcode/MaximumProductBrutForce : dev/shtanko/algorithms/leetcode/AbstractMaximumProductStrategy {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaximumProductOfWordLengths {
	public abstract fun maxProduct ([Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MaximumProductOfWordLengthsKt {
	public static final fun bitNumber (C)I
}

public final class dev/shtanko/algorithms/leetcode/MaximumProductSingleScan : dev/shtanko/algorithms/leetcode/AbstractMaximumProductStrategy {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MaximumProductSorting : dev/shtanko/algorithms/leetcode/AbstractMaximumProductStrategy {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaximumProductSubArray {
	public abstract fun maxProduct ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaximumSubarray {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MaximumSubarrayBruteForce : dev/shtanko/algorithms/leetcode/MaximumSubarray {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaximumSubsequenceScore {
	public abstract fun maxScore ([I[II)J
}

public final class dev/shtanko/algorithms/leetcode/MaximumSubsequenceScorePQ : dev/shtanko/algorithms/leetcode/MaximumSubsequenceScore {
	public fun <init> ()V
	public fun maxScore ([I[II)J
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaximumWidthOfBinaryTree {
	public abstract fun widthOfBinaryTree (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/MaximumWidthOfBinaryTreeBFS : dev/shtanko/algorithms/leetcode/MaximumWidthOfBinaryTree {
	public fun <init> ()V
	public fun widthOfBinaryTree (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/MaximumWidthOfBinaryTreeDFS : dev/shtanko/algorithms/leetcode/MaximumWidthOfBinaryTree {
	public fun <init> ()V
	public fun widthOfBinaryTree (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaximumWidthRamp {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MaximumWidthRampBinarySearch : dev/shtanko/algorithms/leetcode/MaximumWidthRamp {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MaximumWidthRampMonotonicStack : dev/shtanko/algorithms/leetcode/MaximumWidthRamp {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MaximumWidthRampSort : dev/shtanko/algorithms/leetcode/MaximumWidthRamp {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MaximumWidthRampTwoPointers : dev/shtanko/algorithms/leetcode/MaximumWidthRamp {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaximumXor {
	public abstract fun invoke ([II)[I
}

public final class dev/shtanko/algorithms/leetcode/MaximumXorOnePass : dev/shtanko/algorithms/leetcode/MaximumXor {
	public fun <init> ()V
	public fun invoke ([II)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MaximumsSplicedArray {
	public abstract fun invoke ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/MaximumsSplicedArrayKadane : dev/shtanko/algorithms/leetcode/MaximumsSplicedArray {
	public fun <init> ()V
	public fun invoke ([I[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MctFromLeafValues {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MctFromLeafValuesDP : dev/shtanko/algorithms/leetcode/MctFromLeafValues {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MedianFinder {
	public abstract fun addNum (I)V
	public abstract fun findMedian ()D
}

public abstract class dev/shtanko/algorithms/leetcode/MedianFinderStrategy {
}

public final class dev/shtanko/algorithms/leetcode/MedianFinderStrategy$SimpleSorting : dev/shtanko/algorithms/leetcode/MedianFinderStrategy, dev/shtanko/algorithms/leetcode/MedianFinder {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/MedianFinderStrategy$SimpleSorting;
	public fun addNum (I)V
	public fun findMedian ()D
}

public abstract interface class dev/shtanko/algorithms/leetcode/MeetingRooms3 {
	public abstract fun invoke (I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/MeetingRooms3Counting : dev/shtanko/algorithms/leetcode/MeetingRooms3 {
	public fun <init> ()V
	public fun invoke (I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/MeetingRooms3PQ : dev/shtanko/algorithms/leetcode/MeetingRooms3 {
	public fun <init> ()V
	public fun invoke (I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/MeetingRoomsBruteForce : dev/shtanko/algorithms/leetcode/MeetingRoomsStrategy {
	public fun <init> ()V
	public fun canAttendMeetings ([[I)Z
}

public final class dev/shtanko/algorithms/leetcode/MeetingRoomsSorting : dev/shtanko/algorithms/leetcode/MeetingRoomsStrategy {
	public fun <init> ()V
	public fun canAttendMeetings ([[I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/MeetingRoomsStrategy {
	public abstract fun canAttendMeetings ([[I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/MeetingScheduler {
	public abstract fun invoke ([[I[[II)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/MergeInBetweenLinkedLists {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;IILdev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/MergeInBetweenLinkedListsArray : dev/shtanko/algorithms/leetcode/MergeInBetweenLinkedLists {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;IILdev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/MergeInBetweenLinkedListsTwoPointer : dev/shtanko/algorithms/leetcode/MergeInBetweenLinkedLists {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;IILdev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/MergeIntervals {
	public abstract fun invoke ([[I)[[I
}

public final class dev/shtanko/algorithms/leetcode/MergeIntervalsConnectedComponents : dev/shtanko/algorithms/leetcode/MergeIntervals {
	public fun <init> ()V
	public fun invoke ([[I)[[I
}

public final class dev/shtanko/algorithms/leetcode/MergeIntervalsSorting : dev/shtanko/algorithms/leetcode/MergeIntervals {
	public fun <init> ()V
	public fun invoke ([[I)[[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MergeKLists {
	public abstract fun invoke ([Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/MergeKListsPQ : dev/shtanko/algorithms/leetcode/MergeKLists {
	public fun <init> ()V
	public fun invoke ([Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/MergeNodesInBetweenZeros {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/MergeNodesRecursion : dev/shtanko/algorithms/leetcode/MergeNodesInBetweenZeros {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/MergeNodesTwoPointer : dev/shtanko/algorithms/leetcode/MergeNodesInBetweenZeros {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/MergeSortedArray {
	public abstract fun invoke ([II[II)V
}

public final class dev/shtanko/algorithms/leetcode/MergeSortedArrayStl : dev/shtanko/algorithms/leetcode/MergeSortedArray {
	public fun <init> ()V
	public fun invoke ([II[II)V
}

public final class dev/shtanko/algorithms/leetcode/MergeSortedArrayTwoPointer : dev/shtanko/algorithms/leetcode/MergeSortedArray {
	public fun <init> ()V
	public fun invoke ([II[II)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/MergeStringsAlternately {
	public abstract fun mergeAlternately (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MergeStringsAlternatelyOnePointer : dev/shtanko/algorithms/leetcode/MergeStringsAlternately {
	public fun <init> ()V
	public fun mergeAlternately (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MergeStringsAlternatelyTwoPointers : dev/shtanko/algorithms/leetcode/MergeStringsAlternately {
	public fun <init> ()V
	public fun mergeAlternately (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MergeTreesKt {
	public static final fun mergeTrees (Lkotlin/Pair;)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/MiddleNode {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/MiddleNodePointers : dev/shtanko/algorithms/leetcode/MiddleNode {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinAbsoluteSumDiff {
	public abstract fun invoke ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinAbsoluteSumDiffBinarySearch : dev/shtanko/algorithms/leetcode/MinAbsoluteSumDiff {
	public fun <init> ()V
	public fun invoke ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinAbsoluteSumDiffBinarySearch2 : dev/shtanko/algorithms/leetcode/MinAbsoluteSumDiff {
	public fun <init> ()V
	public fun invoke ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinAbsoluteSumDiffSimple : dev/shtanko/algorithms/leetcode/MinAbsoluteSumDiff {
	public fun <init> ()V
	public fun invoke ([I[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinAddToMakeValid {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinAddToMakeValidCounter : dev/shtanko/algorithms/leetcode/MinAddToMakeValid {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinArrayEnd {
	public abstract fun invoke (II)J
}

public final class dev/shtanko/algorithms/leetcode/MinArrayEndBitmask : dev/shtanko/algorithms/leetcode/MinArrayEnd {
	public fun <init> ()V
	public fun invoke (II)J
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinBitFlips {
	public abstract fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/MinBitFlipsKernighansAlgorithm : dev/shtanko/algorithms/leetcode/MinBitFlips {
	public fun <init> ()V
	public fun invoke (II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinChanges {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinChangesGreedy : dev/shtanko/algorithms/leetcode/MinChanges {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinCommonVal {
	public abstract fun invoke ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinCommonValBinarySearch : dev/shtanko/algorithms/leetcode/MinCommonVal {
	public fun <init> ()V
	public fun invoke ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinCommonValHashSet : dev/shtanko/algorithms/leetcode/MinCommonVal {
	public fun <init> ()V
	public fun invoke ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinCommonValTwoPointers : dev/shtanko/algorithms/leetcode/MinCommonVal {
	public fun <init> ()V
	public fun invoke ([I[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinCost {
	public abstract fun invoke (I[[I[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinCostArrayEqual {
	public abstract fun minCost ([I[I)J
}

public final class dev/shtanko/algorithms/leetcode/MinCostArrayEqualBinarySearch : dev/shtanko/algorithms/leetcode/MinCostArrayEqual {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/MinCostArrayEqualBinarySearch$Companion;
	public fun <init> ()V
	public fun minCost ([I[I)J
}

public final class dev/shtanko/algorithms/leetcode/MinCostArrayEqualBinarySearch$Companion {
}

public final class dev/shtanko/algorithms/leetcode/MinCostArrayEqualPrefixSum : dev/shtanko/algorithms/leetcode/MinCostArrayEqual {
	public fun <init> ()V
	public fun minCost ([I[I)J
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinCostClimbingStairs {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinCostClimbingStairsDPBottomUp : dev/shtanko/algorithms/leetcode/MinCostClimbingStairs {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinCostClimbingStairsDPOptimized : dev/shtanko/algorithms/leetcode/MinCostClimbingStairs {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinCostClimbingStairsMemoization : dev/shtanko/algorithms/leetcode/MinCostClimbingStairs {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinCostClimbingStairsRecursive : dev/shtanko/algorithms/leetcode/MinCostClimbingStairs {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinCostConnectPoints {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinCostConnectPointsPrims : dev/shtanko/algorithms/leetcode/MinCostConnectPoints {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinCostQueue : dev/shtanko/algorithms/leetcode/MinCost {
	public fun <init> ()V
	public fun invoke (I[[I[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinCostTickets {
	public abstract fun invoke ([I[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinCostToHireWorkers {
	public abstract fun invoke ([I[II)D
}

public final class dev/shtanko/algorithms/leetcode/MinCostToHireWorkersPriorityQueue : dev/shtanko/algorithms/leetcode/MinCostToHireWorkers {
	public fun <init> ()V
	public fun invoke ([I[II)D
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinDays {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/MinDaysDP : dev/shtanko/algorithms/leetcode/MinDays {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/MinDaysSimple : dev/shtanko/algorithms/leetcode/MinDays {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinDaysToDisconnectIsland {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinDaysToDisconnectIslandBF : dev/shtanko/algorithms/leetcode/MinDaysToDisconnectIsland {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinDaysToDisconnectIslandTarjansAlgorithm : dev/shtanko/algorithms/leetcode/MinDaysToDisconnectIsland {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinDaysToMakeBouquets {
	public abstract fun invoke ([III)I
}

public final class dev/shtanko/algorithms/leetcode/MinDaysToMakeBouquetsBinarySearch : dev/shtanko/algorithms/leetcode/MinDaysToMakeBouquets {
	public fun <init> ()V
	public fun invoke ([III)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinDeletionSize {
	public abstract fun invoke ([Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinDeletionSizeBruteForce : dev/shtanko/algorithms/leetcode/MinDeletionSize {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinDeletionSizeFast : dev/shtanko/algorithms/leetcode/MinDeletionSize {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinDeletions {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinDeletionsCombinedPass : dev/shtanko/algorithms/leetcode/MinDeletionsToMakeStrBalanced {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinDeletionsDP : dev/shtanko/algorithms/leetcode/MinDeletionsToMakeStrBalanced {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinDeletionsGreedy : dev/shtanko/algorithms/leetcode/MinDeletions {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinDeletionsOptimizedDP : dev/shtanko/algorithms/leetcode/MinDeletionsToMakeStrBalanced {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinDeletionsStack : dev/shtanko/algorithms/leetcode/MinDeletionsToMakeStrBalanced {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinDeletionsThreePass : dev/shtanko/algorithms/leetcode/MinDeletionsToMakeStrBalanced {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinDeletionsToMakeStrBalanced {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinDeletionsTwoVariable : dev/shtanko/algorithms/leetcode/MinDeletionsToMakeStrBalanced {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinDepth {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/MinDepthBFS : dev/shtanko/algorithms/leetcode/MinDepth {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/MinDepthDFS : dev/shtanko/algorithms/leetcode/MinDepth {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinDiffInBST {
	public abstract fun minDiffInBST (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/MinDiffInBSTInorder : dev/shtanko/algorithms/leetcode/MinDiffInBST {
	public fun <init> ()V
	public fun minDiffInBST (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinDiffInThreeMoves {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinDiffInThreeMovesPartialSort : dev/shtanko/algorithms/leetcode/MinDiffInThreeMoves {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinDiffInThreeMovesSort : dev/shtanko/algorithms/leetcode/MinDiffInThreeMoves {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinDifference {
	public abstract fun invoke ([I[[I)[I
}

public final class dev/shtanko/algorithms/leetcode/MinDifferencePrefixSum : dev/shtanko/algorithms/leetcode/MinDifference {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/MinDifferencePrefixSum$Companion;
	public fun <init> ()V
	public fun invoke ([I[[I)[I
}

public final class dev/shtanko/algorithms/leetcode/MinDifferencePrefixSum$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinDifficulty {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MinDifficultyBottomUp : dev/shtanko/algorithms/leetcode/MinDifficulty {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MinDifficultyBottomUp1D : dev/shtanko/algorithms/leetcode/MinDifficulty {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MinDifficultyStack : dev/shtanko/algorithms/leetcode/MinDifficulty {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/MinDifficultyStack$Companion;
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MinDifficultyStack$Companion {
}

public final class dev/shtanko/algorithms/leetcode/MinDifficultyTopDown : dev/shtanko/algorithms/leetcode/MinDifficulty {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinDistance {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinDistance1DDP : dev/shtanko/algorithms/leetcode/MinDistance {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinDistanceDP : dev/shtanko/algorithms/leetcode/MinDistance {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinDistanceLCS : dev/shtanko/algorithms/leetcode/MinDistance {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinDistanceLCSDP : dev/shtanko/algorithms/leetcode/MinDistance {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinDistanceLCSMemo : dev/shtanko/algorithms/leetcode/MinDistance {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinFallingPathSum {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinFallingPathSumBottomUp : dev/shtanko/algorithms/leetcode/MinFallingPathSum {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinFallingPathSumDPMemo : dev/shtanko/algorithms/leetcode/MinFallingPathSum {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinFallingPathSumTopDown : dev/shtanko/algorithms/leetcode/MinFallingPathSum {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinFlips {
	public abstract fun invoke (III)I
}

public final class dev/shtanko/algorithms/leetcode/MinFlipsBitManipulation : dev/shtanko/algorithms/leetcode/MinFlips {
	public fun <init> ()V
	public fun invoke (III)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinFlipsMonoIncr {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinFlipsMonoIncrOnePass : dev/shtanko/algorithms/leetcode/MinFlipsMonoIncr {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinFlipsSetBits : dev/shtanko/algorithms/leetcode/MinFlips {
	public fun <init> ()V
	public fun invoke (III)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinGroups {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinGroupsLineSweep : dev/shtanko/algorithms/leetcode/MinGroups {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinGroupsLineSweep2 : dev/shtanko/algorithms/leetcode/MinGroups {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinGroupsSort : dev/shtanko/algorithms/leetcode/MinGroups {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinHeightTrees {
	public abstract fun invoke (I[[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/MinHeightTreesBFS : dev/shtanko/algorithms/leetcode/MinHeightTrees {
	public fun <init> ()V
	public fun invoke (I[[I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinIncrementForUnique {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinIncrementForUniqueCounting : dev/shtanko/algorithms/leetcode/MinIncrementForUnique {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinIncrementForUniqueSorting : dev/shtanko/algorithms/leetcode/MinIncrementForUnique {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinInsertionsPalindrome {
	public abstract fun minInsertions (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinInsertionsPalindromeIterative : dev/shtanko/algorithms/leetcode/MinInsertionsPalindrome {
	public fun <init> ()V
	public fun minInsertions (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinInsertionsPalindromeLCS : dev/shtanko/algorithms/leetcode/MinInsertionsPalindrome {
	public fun <init> ()V
	public fun minInsertions (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinInsertionsPalindromeRecursive : dev/shtanko/algorithms/leetcode/MinInsertionsPalindrome {
	public fun <init> ()V
	public fun minInsertions (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinIntegerAdjacentSwaps {
	public abstract fun minInteger (Ljava/lang/String;I)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MinIntegerAdjacentSwapsBit : dev/shtanko/algorithms/leetcode/MinIntegerAdjacentSwaps {
	public fun <init> ()V
	public fun minInteger (Ljava/lang/String;I)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MinIntegerAdjacentSwapsBit$IntegerBIT {
	public fun <init> (I)V
	public final fun getData ()[I
	public final fun getN ()I
	public final fun query (I)I
	public final fun setData ([I)V
	public final fun setN (I)V
	public final fun update (II)V
}

public final class dev/shtanko/algorithms/leetcode/MinIntegerAdjacentSwapsImpl : dev/shtanko/algorithms/leetcode/MinIntegerAdjacentSwaps {
	public fun <init> ()V
	public fun minInteger (Ljava/lang/String;I)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MinIntegerAdjacentSwapsImpl$SegmentTree {
	public fun <init> (I)V
	public final fun add (I)V
	public final fun getCountLessThan (I)I
	public final fun getN ()I
	public final fun getNodes ()[I
	public final fun setN (I)V
	public final fun setNodes ([I)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinKBitFlips {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MinKBitFlipsArray : dev/shtanko/algorithms/leetcode/MinKBitFlips {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MinKBitFlipsDeque : dev/shtanko/algorithms/leetcode/MinKBitFlips {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MinKBitFlipsSpaceOptimized : dev/shtanko/algorithms/leetcode/MinKBitFlips {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinLenOfStrAfterDeletingSimilarEnds {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinLenOfStrAfterDeletingSimilarEndsKt {
	public static final fun getMinLenOfStrTwoPointers ()Ldev/shtanko/algorithms/leetcode/MinLenOfStrAfterDeletingSimilarEnds;
}

public final class dev/shtanko/algorithms/leetcode/MinLenOfStrTailRec : dev/shtanko/algorithms/leetcode/MinLenOfStrAfterDeletingSimilarEnds {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinLimitOfBallsInBag {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MinLimitOfBallsInBag$BinarySearch : dev/shtanko/algorithms/leetcode/MinLimitOfBallsInBag {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/MinLimitOfBallsInBag$BinarySearch;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([II)I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinMatrixFlips {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinMatrixFlipsBFS : dev/shtanko/algorithms/leetcode/MinMatrixFlips {
	public fun <init> ()V
	public final fun check ([[III)Z
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinMaxGasDist {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/MinMaxGasDist$Companion;
	public static final field LIMIT D
	public abstract fun invoke ([II)D
}

public final class dev/shtanko/algorithms/leetcode/MinMaxGasDist$Companion {
	public static final field LIMIT D
}

public final class dev/shtanko/algorithms/leetcode/MinMaxGasDistBS : dev/shtanko/algorithms/leetcode/MinMaxGasDist {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/MinMaxGasDistBS$Companion;
	public fun <init> ()V
	public fun invoke ([II)D
}

public final class dev/shtanko/algorithms/leetcode/MinMaxGasDistBS$Companion {
}

public final class dev/shtanko/algorithms/leetcode/MinMaxGasDistKt {
	public static final fun getMinMaxGasDistBruteForce ()Ldev/shtanko/algorithms/leetcode/MinMaxGasDist;
	public static final fun getMinMaxGasDistDP ()Ldev/shtanko/algorithms/leetcode/MinMaxGasDist;
	public static final fun getMinMaxGasDistHeap ()Ldev/shtanko/algorithms/leetcode/MinMaxGasDist;
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinMountainRemovals {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinMountainRemovalsBS : dev/shtanko/algorithms/leetcode/MinMountainRemovals {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinMountainRemovalsDP : dev/shtanko/algorithms/leetcode/MinMountainRemovals {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinMovesToMakePalindrome {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinMovesToMakePalindromeGreedy : dev/shtanko/algorithms/leetcode/MinMovesToMakePalindrome {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinMovesToSeat {
	public abstract fun invoke ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinMovesToSeatBruteForce : dev/shtanko/algorithms/leetcode/MinMovesToSeat {
	public fun <init> ()V
	public fun invoke ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinMovesToSeatMath : dev/shtanko/algorithms/leetcode/MinMovesToSeat {
	public fun <init> ()V
	public fun invoke ([I[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinObstacles {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinObstaclesBFS : dev/shtanko/algorithms/leetcode/MinObstacles {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinObstaclesDijkstra : dev/shtanko/algorithms/leetcode/MinObstacles {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinOneBitOperations {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/MinOneBitOperationsGrayCode : dev/shtanko/algorithms/leetcode/MinOneBitOperations {
	public static final field SHIFT_1 I
	public static final field SHIFT_16 I
	public static final field SHIFT_2 I
	public static final field SHIFT_4 I
	public static final field SHIFT_8 I
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/MinOneBitOperationsIteration : dev/shtanko/algorithms/leetcode/MinOneBitOperations {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/MinOneBitOperationsRecursion : dev/shtanko/algorithms/leetcode/MinOneBitOperations {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinOpToMakeArrayEmpty {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinOpToMakeArrayEmptyKt {
	public static final fun getMinOpToMakeArrayEmptyCounting ()Ldev/shtanko/algorithms/leetcode/MinOpToMakeArrayEmpty;
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinOperations {
	public abstract fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinOperationsBinaryString {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinOperationsBinaryStringCheck : dev/shtanko/algorithms/leetcode/MinOperationsBinaryString {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinOperationsBinaryStringStart : dev/shtanko/algorithms/leetcode/MinOperationsBinaryString {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinOperationsHashMap : dev/shtanko/algorithms/leetcode/MinOperations {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinOperationsToMakeArrayContinuous {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinOperationsToMakeArrayContinuousBS : dev/shtanko/algorithms/leetcode/MinOperationsToMakeArrayContinuous {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinOperationsToMakeArrayContinuousSW : dev/shtanko/algorithms/leetcode/MinOperationsToMakeArrayContinuous {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinOperationsToSortBinaryTreeByLevel {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/MinOperationsToSortBinaryTreeByLevel$BitManipulationBFS : dev/shtanko/algorithms/leetcode/MinOperationsToSortBinaryTreeByLevel {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/MinOperationsToSortBinaryTreeByLevel$BitManipulationBFS;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MinOperationsToSortBinaryTreeByLevel$HashMapBFS : dev/shtanko/algorithms/leetcode/MinOperationsToSortBinaryTreeByLevel {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/MinOperationsToSortBinaryTreeByLevel$HashMapBFS;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MinOperationsTwoSum : dev/shtanko/algorithms/leetcode/MinOperations {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinOperationsXor {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MinOperationsXorBit : dev/shtanko/algorithms/leetcode/MinOperationsXor {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MinOperationsXorBitCount : dev/shtanko/algorithms/leetcode/MinOperationsXor {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinPairSum {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinPairSumSorting : dev/shtanko/algorithms/leetcode/MinPairSum {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinPartitionsKt {
	public static final fun minPartitions (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinPenaltyForShop {
	public fun helper (Ljava/lang/String;III)Lkotlin/Triple;
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinPenaltyForShop$DefaultImpls {
	public static fun helper (Ldev/shtanko/algorithms/leetcode/MinPenaltyForShop;Ljava/lang/String;III)Lkotlin/Triple;
}

public final class dev/shtanko/algorithms/leetcode/MinPenaltyForShopOnePass : dev/shtanko/algorithms/leetcode/MinPenaltyForShop {
	public fun <init> ()V
	public fun helper (Ljava/lang/String;III)Lkotlin/Triple;
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinPenaltyForShopTwoPasses : dev/shtanko/algorithms/leetcode/MinPenaltyForShop {
	public fun <init> ()V
	public fun helper (Ljava/lang/String;III)Lkotlin/Triple;
	public fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinPushes {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinPushesHeap : dev/shtanko/algorithms/leetcode/MinPushes {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinRemoveToMakeValidParentheses {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MinRemoveToMakeValidParenthesesSb : dev/shtanko/algorithms/leetcode/MinRemoveToMakeValidParentheses {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinReorder {
	public abstract fun invoke (I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinReorderDFS : dev/shtanko/algorithms/leetcode/MinReorder {
	public fun <init> ()V
	public fun invoke (I[[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinReplacement {
	public abstract fun invoke ([I)J
}

public final class dev/shtanko/algorithms/leetcode/MinReplacementGreedy : dev/shtanko/algorithms/leetcode/MinReplacement {
	public fun <init> ()V
	public fun invoke ([I)J
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinScore {
	public abstract fun invoke (I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinScoreBFS : dev/shtanko/algorithms/leetcode/MinScore {
	public fun <init> ()V
	public fun invoke (I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinScoreDFS : dev/shtanko/algorithms/leetcode/MinScore {
	public fun <init> ()V
	public fun invoke (I[[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinSessions {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MinSessionsBitmask : dev/shtanko/algorithms/leetcode/MinSessions {
	public fun <init> ()V
	public final fun dp ([II)Lkotlin/Pair;
	public final fun getMemo ()[Lkotlin/Pair;
	public final fun getN ()I
	public final fun getSessionTime ()I
	public fun invoke ([II)I
	public final fun setMemo ([Lkotlin/Pair;)V
	public final fun setN (I)V
	public final fun setSessionTime (I)V
}

public final class dev/shtanko/algorithms/leetcode/MinSessionsSfBitmaskDP : dev/shtanko/algorithms/leetcode/MinSessions {
	public fun <init> ()V
	public final fun dp ([III)I
	public final fun getMemo ()[[Ljava/lang/Integer;
	public final fun getN ()I
	public final fun getSessionTime ()I
	public fun invoke ([II)I
	public final fun setMemo ([[Ljava/lang/Integer;)V
	public final fun setN (I)V
	public final fun setSessionTime (I)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinSetSize {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinSetSizeHashMap : dev/shtanko/algorithms/leetcode/MinSetSize {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinSetSizePriorityQueue : dev/shtanko/algorithms/leetcode/MinSetSize {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinSpeedToArriveOnTime {
	public abstract fun invoke ([ID)I
}

public final class dev/shtanko/algorithms/leetcode/MinSpeedToArriveOnTimeBS : dev/shtanko/algorithms/leetcode/MinSpeedToArriveOnTime {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/MinSpeedToArriveOnTimeBS$Companion;
	public fun <init> ()V
	public fun invoke ([ID)I
}

public final class dev/shtanko/algorithms/leetcode/MinSpeedToArriveOnTimeBS$Companion {
}

public final class dev/shtanko/algorithms/leetcode/MinStack {
	public fun <init> ()V
	public final fun getMin ()I
	public final fun pop ()V
	public final fun push (I)V
	public final fun top ()I
}

public final class dev/shtanko/algorithms/leetcode/MinStack$Node {
	public fun <init> (II)V
	public final fun component1 ()I
	public final fun component2 ()I
	public final fun copy (II)Ldev/shtanko/algorithms/leetcode/MinStack$Node;
	public static synthetic fun copy$default (Ldev/shtanko/algorithms/leetcode/MinStack$Node;IIILjava/lang/Object;)Ldev/shtanko/algorithms/leetcode/MinStack$Node;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getMin ()I
	public final fun getNext ()Ldev/shtanko/algorithms/leetcode/MinStack$Node;
	public final fun getValue ()I
	public fun hashCode ()I
	public final fun setNext (Ldev/shtanko/algorithms/leetcode/MinStack$Node;)V
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinStepsAnagram {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinStepsAnagramMap : dev/shtanko/algorithms/leetcode/MinStepsAnagram {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinStoneSum {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MinStoneSumFast : dev/shtanko/algorithms/leetcode/MinStoneSum {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MinStoneSumHeap : dev/shtanko/algorithms/leetcode/MinStoneSum {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinStringLenAfterRemovingSubstrings {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinStringLenInPlace : dev/shtanko/algorithms/leetcode/MinStringLenAfterRemovingSubstrings {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinStringLenReplace : dev/shtanko/algorithms/leetcode/MinStringLenAfterRemovingSubstrings {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinStringLenStack : dev/shtanko/algorithms/leetcode/MinStringLenAfterRemovingSubstrings {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinSubarray {
	public abstract fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinSubarrayLen {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MinSubarrayLenBinarySearch : dev/shtanko/algorithms/leetcode/MinSubarrayLen {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MinSubarrayLenSlidingWindow : dev/shtanko/algorithms/leetcode/MinSubarrayLen {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MinSubarrayPrefixSum : dev/shtanko/algorithms/leetcode/MinSubarray {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MinSubsequenceCountingSort : dev/shtanko/algorithms/leetcode/MinSubsequenceStrategy {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/MinSubsequenceCountingSort$Companion;
	public fun <init> ()V
	public fun invoke ([I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/MinSubsequenceCountingSort$Companion {
}

public final class dev/shtanko/algorithms/leetcode/MinSubsequencePriorityQueue : dev/shtanko/algorithms/leetcode/MinSubsequenceStrategy {
	public fun <init> ()V
	public fun invoke ([I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinSubsequenceStrategy {
	public abstract fun invoke ([I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinSwaps {
	public abstract fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinSwaps2 {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinSwaps2SlidingWindow : dev/shtanko/algorithms/leetcode/MinSwaps2 {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinSwaps2SlidingWindowBetter : dev/shtanko/algorithms/leetcode/MinSwaps2 {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinSwaps2SuffixSum : dev/shtanko/algorithms/leetcode/MinSwaps2 {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinSwapsDeque : dev/shtanko/algorithms/leetcode/MinSwaps {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinSwapsToMakeStringBalanced {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinSwapsToMakeStringBalancedStack : dev/shtanko/algorithms/leetcode/MinSwapsToMakeStringBalanced {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinSwapsTwoPointers : dev/shtanko/algorithms/leetcode/MinSwaps {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinTaps {
	public abstract fun invoke (I[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinTapsDP : dev/shtanko/algorithms/leetcode/MinTaps {
	public fun <init> ()V
	public fun invoke (I[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinTapsGreedy : dev/shtanko/algorithms/leetcode/MinTaps {
	public fun <init> ()V
	public fun invoke (I[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinTimeDiff {
	public abstract fun invoke (Ljava/util/List;)I
}

public final class dev/shtanko/algorithms/leetcode/MinTimeDiffSort : dev/shtanko/algorithms/leetcode/MinTimeDiff {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/MinTimeDiffSort;
	public fun invoke (Ljava/util/List;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinTimeToMakeRopeColorful {
	public abstract fun invoke (Ljava/lang/String;[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinTimeToMakeRopeColorfulSF : dev/shtanko/algorithms/leetcode/MinTimeToMakeRopeColorful {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinTimeToVisitAllPoints {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinTimeToVisitAllPointsMoveDiagonally : dev/shtanko/algorithms/leetcode/MinTimeToVisitAllPoints {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinTimeToVisitCellInGrid {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinTimeToVisitCellInGridDijkstra : dev/shtanko/algorithms/leetcode/MinTimeToVisitCellInGrid {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinTotalDistanceTraveled {
	public abstract fun invoke (Ljava/util/List;[[I)J
}

public final class dev/shtanko/algorithms/leetcode/MinTotalDistanceTraveledTabulation : dev/shtanko/algorithms/leetcode/MinTotalDistanceTraveled {
	public fun <init> ()V
	public fun invoke (Ljava/util/List;[[I)J
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinimizeDeviationInArray {
	public abstract fun minimumDeviation ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinimizeDeviationInArrayQueue : dev/shtanko/algorithms/leetcode/MinimizeDeviationInArray {
	public fun <init> ()V
	public fun minimumDeviation ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinimizeMax {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MinimizeMaxGreedyBS : dev/shtanko/algorithms/leetcode/MinimizeMax {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinimizeMaximumOfArray {
	public abstract fun minimizeArrayValue ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinimizeMaximumOfArrayPrefixSum : dev/shtanko/algorithms/leetcode/MinimizeMaximumOfArray {
	public fun <init> ()V
	public fun minimizeArrayValue ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinimizeSumDifference {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinimizeSumDifferenceSolution : dev/shtanko/algorithms/leetcode/MinimizeSumDifference {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinimizeSumDifferenceTree : dev/shtanko/algorithms/leetcode/MinimizeSumDifference {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinimizeTheDifference {
	public abstract fun invoke ([[II)I
}

public final class dev/shtanko/algorithms/leetcode/MinimizeTheDifferenceDP : dev/shtanko/algorithms/leetcode/MinimizeTheDifference {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/MinimizeTheDifferenceDP$Companion;
	public fun <init> ()V
	public fun invoke ([[II)I
}

public final class dev/shtanko/algorithms/leetcode/MinimizeTheDifferenceDP$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinimizedMax {
	public abstract fun invoke (I[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinimizedMaxBinarySearch : dev/shtanko/algorithms/leetcode/MinimizedMax {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/MinimizedMaxBinarySearch;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (I[I)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MinimizedMaxHeap : dev/shtanko/algorithms/leetcode/MinimizedMax {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/MinimizedMaxHeap;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (I[I)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MinimumAbsDifferenceKt {
	public static final fun minimumAbsDifference ([I)Ljava/util/List;
	public static final fun minimumAbsDifference2 ([I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinimumAbsoluteDifferenceBST {
	public abstract fun getMinimumDifference (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumAbsoluteDifferenceBSTDFS : dev/shtanko/algorithms/leetcode/MinimumAbsoluteDifferenceBST {
	public fun <init> ()V
	public fun getMinimumDifference (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumAbsoluteDifferenceBSTInOrder : dev/shtanko/algorithms/leetcode/MinimumAbsoluteDifferenceBST {
	public fun <init> ()V
	public fun getMinimumDifference (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumAbsoluteDifferenceBSTInOrderOpt : dev/shtanko/algorithms/leetcode/MinimumAbsoluteDifferenceBST {
	public fun <init> ()V
	public fun getMinimumDifference (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinimumAverageDifference {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumAverageDifferenceBruteForce : dev/shtanko/algorithms/leetcode/MinimumAverageDifference {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumAverageDifferenceKt : dev/shtanko/algorithms/leetcode/MinimumAverageDifference {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumAverageDifferencePrefixSum : dev/shtanko/algorithms/leetcode/MinimumAverageDifference {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumAverageDifferencePrefixSumOpt : dev/shtanko/algorithms/leetcode/MinimumAverageDifference {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumCostDijkstra : dev/shtanko/algorithms/leetcode/MinimumCostToConvertString1 {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;[C[C[I)J
}

public final class dev/shtanko/algorithms/leetcode/MinimumCostFloydWarshall : dev/shtanko/algorithms/leetcode/MinimumCostToConvertString1 {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;[C[C[I)J
}

public final class dev/shtanko/algorithms/leetcode/MinimumCostToConnectSticks {
	public fun <init> ()V
	public final fun connectSticks ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinimumCostToConvertString1 {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;[C[C[I)J
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinimumCostToCutStick {
	public abstract fun minCost (I[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumCostToCutStickBottomUp : dev/shtanko/algorithms/leetcode/MinimumCostToCutStick {
	public fun <init> ()V
	public fun minCost (I[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumCostToCutStickTopDown : dev/shtanko/algorithms/leetcode/MinimumCostToCutStick {
	public fun <init> ()V
	public fun minCost (I[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinimumDeleteSum {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumDeleteSumBottomUp : dev/shtanko/algorithms/leetcode/MinimumDeleteSum {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumDeleteSumBottomUpOtp : dev/shtanko/algorithms/leetcode/MinimumDeleteSum {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumDeleteSumRecursion : dev/shtanko/algorithms/leetcode/MinimumDeleteSum {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumDeleteSumTopDown : dev/shtanko/algorithms/leetcode/MinimumDeleteSum {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinimumDifference {
	public abstract fun invoke ([I)J
}

public final class dev/shtanko/algorithms/leetcode/MinimumDifferencePriorityQueue : dev/shtanko/algorithms/leetcode/MinimumDifference {
	public fun <init> ()V
	public fun invoke ([I)J
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinimumEffortPath {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumEffortPathDFS : dev/shtanko/algorithms/leetcode/MinimumEffortPath {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/MinimumEffortPathDFS$Companion;
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumEffortPathDFS$Companion {
}

public final class dev/shtanko/algorithms/leetcode/MinimumEffortPathDijikstra : dev/shtanko/algorithms/leetcode/MinimumEffortPath {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinimumFallingPathSum3 {
	public abstract fun minFallingPathSum ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumFallingPathSum3DP : dev/shtanko/algorithms/leetcode/MinimumFallingPathSum3 {
	public fun <init> ()V
	public fun minFallingPathSum ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinimumFinishTime {
	public abstract fun invoke ([[III)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumFinishTimeDP : dev/shtanko/algorithms/leetcode/MinimumFinishTime {
	public fun <init> ()V
	public fun invoke ([[III)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinimumFuelCost {
	public abstract fun invoke ([[II)J
}

public final class dev/shtanko/algorithms/leetcode/MinimumFuelCostDFS : dev/shtanko/algorithms/leetcode/MinimumFuelCost {
	public fun <init> ()V
	public fun invoke ([[II)J
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinimumGeneticMutation {
	public abstract fun minMutation (Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumGeneticMutationBFS : dev/shtanko/algorithms/leetcode/MinimumGeneticMutation {
	public fun <init> ()V
	public fun minMutation (Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinimumIncompatibility {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumIncompatibilityDFS : dev/shtanko/algorithms/leetcode/MinimumIncompatibility {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/MinimumIncompatibilityDFS$Companion;
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumIncompatibilityDFS$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinimumKnightMoves {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/MinimumKnightMoves$Companion;
	public abstract fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumKnightMoves$Companion {
	public final fun getOffsets ()[[I
}

public final class dev/shtanko/algorithms/leetcode/MinimumKnightMovesBFS : dev/shtanko/algorithms/leetcode/MinimumKnightMoves {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/MinimumKnightMovesBFS$Companion;
	public fun <init> ()V
	public fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumKnightMovesBFS$Companion {
}

public final class dev/shtanko/algorithms/leetcode/MinimumKnightMovesBidirectional : dev/shtanko/algorithms/leetcode/MinimumKnightMoves {
	public fun <init> ()V
	public fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumKnightMovesMemoization : dev/shtanko/algorithms/leetcode/MinimumKnightMoves {
	public fun <init> ()V
	public fun invoke (II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinimumPathSum {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumPathSumDP : dev/shtanko/algorithms/leetcode/MinimumPathSum {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinimumRounds {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumRoundsGreedy : dev/shtanko/algorithms/leetcode/MinimumRounds {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumRoundsSumUp : dev/shtanko/algorithms/leetcode/MinimumRounds {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinimumSidewayJumps {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumSidewayJumpsDP : dev/shtanko/algorithms/leetcode/MinimumSidewayJumps {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/MinimumSidewayJumpsDP$Companion;
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumSidewayJumpsDP$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinimumSum {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumSumGreedy : dev/shtanko/algorithms/leetcode/MinimumSum {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinimumSwap {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumSwapSimple : dev/shtanko/algorithms/leetcode/MinimumSwap {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinimumTime {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumTimeOnePass : dev/shtanko/algorithms/leetcode/MinimumTime {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/MinimumTimePrefixSuffix : dev/shtanko/algorithms/leetcode/MinimumTime {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinimumTimeToCompleteTrips {
	public abstract fun minimumTime ([II)J
}

public final class dev/shtanko/algorithms/leetcode/MinimumTimeToCompleteTripsBS : dev/shtanko/algorithms/leetcode/MinimumTimeToCompleteTrips {
	public fun <init> ()V
	public fun minimumTime ([II)J
}

public final class dev/shtanko/algorithms/leetcode/MinimumTimeToCompleteTripsBS2 : dev/shtanko/algorithms/leetcode/MinimumTimeToCompleteTrips {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/MinimumTimeToCompleteTripsBS2$Companion;
	public fun <init> ()V
	public fun minimumTime ([II)J
}

public final class dev/shtanko/algorithms/leetcode/MinimumTimeToCompleteTripsBS2$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/MinimumWindowSubstring {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MissingNumberBitManipulation : dev/shtanko/algorithms/leetcode/AbstractMissingNumberStrategy {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MissingNumberGaussFormula : dev/shtanko/algorithms/leetcode/AbstractMissingNumberStrategy {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MissingNumberHashSet : dev/shtanko/algorithms/leetcode/AbstractMissingNumberStrategy {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MissingNumberInProgression {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MissingNumberSorting : dev/shtanko/algorithms/leetcode/AbstractMissingNumberStrategy {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/MissingRanges {
	public fun <init> ()V
	public final fun findMissingRanges ([III)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/ModifiedList {
	public abstract fun invoke ([ILdev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/ModifiedListHashSet : dev/shtanko/algorithms/leetcode/ModifiedList {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/ModifiedListHashSet;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([ILdev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/ModifyGraphEdgeWeights {
	public abstract fun invoke (I[[IIII)[[I
}

public final class dev/shtanko/algorithms/leetcode/ModifyGraphEdgeWeightsDijkstra : dev/shtanko/algorithms/leetcode/ModifyGraphEdgeWeights {
	public fun <init> ()V
	public fun invoke (I[[IIII)[[I
}

public final class dev/shtanko/algorithms/leetcode/ModifyGraphEdgeWeightsMinHeap : dev/shtanko/algorithms/leetcode/ModifyGraphEdgeWeights {
	public fun <init> ()V
	public fun invoke (I[[IIII)[[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MonkeyMove {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/MonkeyMoveBitwise : dev/shtanko/algorithms/leetcode/MonkeyMove {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MonotonicArray {
	public abstract fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/MonotonicArrayOnePass : dev/shtanko/algorithms/leetcode/MonotonicArray {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/MonotonicDeque : dev/shtanko/algorithms/leetcode/SlidingWindowMax {
	public fun <init> ()V
	public fun invoke ([II)[I
}

public final class dev/shtanko/algorithms/leetcode/MostFrequentSubtreeSum {
	public fun <init> ()V
	public final fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MostPoints {
	public abstract fun invoke ([[I)J
}

public final class dev/shtanko/algorithms/leetcode/MostPointsDP : dev/shtanko/algorithms/leetcode/MostPoints {
	public fun <init> ()V
	public fun invoke ([[I)J
}

public abstract interface class dev/shtanko/algorithms/leetcode/MostProfitAssigningWork {
	public abstract fun invoke ([I[I[I)I
}

public final class dev/shtanko/algorithms/leetcode/MostProfitAssigningWorkByDifficulty : dev/shtanko/algorithms/leetcode/MostProfitAssigningWork {
	public fun <init> ()V
	public fun invoke ([I[I[I)I
}

public final class dev/shtanko/algorithms/leetcode/MostProfitAssigningWorkByProfit : dev/shtanko/algorithms/leetcode/MostProfitAssigningWork {
	public fun <init> ()V
	public fun invoke ([I[I[I)I
}

public final class dev/shtanko/algorithms/leetcode/MostProfitAssigningWorkMemoization : dev/shtanko/algorithms/leetcode/MostProfitAssigningWork {
	public fun <init> ()V
	public fun invoke ([I[I[I)I
}

public final class dev/shtanko/algorithms/leetcode/MostProfitAssigningWorkTwoPointers : dev/shtanko/algorithms/leetcode/MostProfitAssigningWork {
	public fun <init> ()V
	public fun invoke ([I[I[I)I
}

public final class dev/shtanko/algorithms/leetcode/MostSignificantBit : dev/shtanko/algorithms/leetcode/CountingBits {
	public fun <init> ()V
	public fun invoke (I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/MovePiecesToObtainString {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/MovePiecesToObtainString$Queue : dev/shtanko/algorithms/leetcode/MovePiecesToObtainString {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/MovePiecesToObtainString$Queue;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MovePiecesToObtainString$TwoPointers : dev/shtanko/algorithms/leetcode/MovePiecesToObtainString {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/MovePiecesToObtainString$TwoPointers;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MoveZeroesKt {
	public static final fun moveZeroes ([I)V
}

public final class dev/shtanko/algorithms/leetcode/MultiplyStrings {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/MultiplyStrings;
	public final fun invoke (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/MyCalendar {
	public fun <init> ()V
	public final fun book (II)Z
}

public final class dev/shtanko/algorithms/leetcode/MyCalendar2 {
	public fun <init> ()V
	public final fun book (II)Z
}

public final class dev/shtanko/algorithms/leetcode/MyQueue {
	public fun <init> ()V
	public final fun empty ()Z
	public final fun peek ()I
	public final fun pop ()I
	public final fun push (I)V
}

public final class dev/shtanko/algorithms/leetcode/NAryNode {
	public fun <init> (I)V
	public final fun getChildren ()Ljava/util/List;
	public final fun getValue ()I
	public final fun setChildren (Ljava/util/List;)V
	public final fun setValue (I)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/NAryTreePostorder {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/NAryNode;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/NAryTreePostorderIterative : dev/shtanko/algorithms/leetcode/NAryTreePostorder {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/NAryNode;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/NAryTreePostorderNoReverse : dev/shtanko/algorithms/leetcode/NAryTreePostorder {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/NAryNode;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/NAryTreePostorderRecursive : dev/shtanko/algorithms/leetcode/NAryTreePostorder {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/NAryNode;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/NAryTreePostorderTwoStacks : dev/shtanko/algorithms/leetcode/NAryTreePostorder {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/NAryNode;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/NAryTreePreorderTraversalIterative : dev/shtanko/algorithms/leetcode/NAryTreePreorderTraversalStrategy {
	public fun <init> ()V
	public fun preorder (Ldev/shtanko/algorithms/leetcode/NAryNode;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/NAryTreePreorderTraversalRecursive : dev/shtanko/algorithms/leetcode/NAryTreePreorderTraversalStrategy {
	public fun <init> ()V
	public final fun getList ()Ljava/util/List;
	public fun preorder (Ldev/shtanko/algorithms/leetcode/NAryNode;)Ljava/util/List;
	public final fun setList (Ljava/util/List;)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/NAryTreePreorderTraversalStrategy {
	public abstract fun preorder (Ldev/shtanko/algorithms/leetcode/NAryNode;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/NGBetterForce : dev/shtanko/algorithms/leetcode/NextGreaterElement1 {
	public fun <init> ()V
	public fun invoke ([I[I)[I
}

public final class dev/shtanko/algorithms/leetcode/NGBruteForce : dev/shtanko/algorithms/leetcode/NextGreaterElement1 {
	public fun <init> ()V
	public fun invoke ([I[I)[I
}

public final class dev/shtanko/algorithms/leetcode/NGStack : dev/shtanko/algorithms/leetcode/NextGreaterElement1 {
	public fun <init> ()V
	public fun invoke ([I[I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/NamingCompany {
	public abstract fun distinctNames ([Ljava/lang/String;)J
}

public final class dev/shtanko/algorithms/leetcode/NamingCompanyCountPairs : dev/shtanko/algorithms/leetcode/NamingCompany {
	public fun <init> ()V
	public fun distinctNames ([Ljava/lang/String;)J
}

public abstract interface class dev/shtanko/algorithms/leetcode/NearestExit {
	public abstract fun invoke ([[C[I)I
}

public final class dev/shtanko/algorithms/leetcode/NearestExitBFS : dev/shtanko/algorithms/leetcode/NearestExit {
	public fun <init> ()V
	public fun invoke ([[C[I)I
}

public final class dev/shtanko/algorithms/leetcode/NestedPrefixXOR : dev/shtanko/algorithms/leetcode/CountTriplets {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/NetworkDelayTime {
	public abstract fun invoke ([[III)I
}

public final class dev/shtanko/algorithms/leetcode/NetworkDelayTimeBFS : dev/shtanko/algorithms/leetcode/NetworkDelayTime {
	public fun <init> ()V
	public final fun getAdj ()Ljava/util/Map;
	public fun invoke ([[III)I
	public final fun setAdj (Ljava/util/Map;)V
}

public final class dev/shtanko/algorithms/leetcode/NetworkDelayTimeDFS : dev/shtanko/algorithms/leetcode/NetworkDelayTime {
	public fun <init> ()V
	public fun invoke ([[III)I
}

public final class dev/shtanko/algorithms/leetcode/NetworkDelayTimeDijkstra : dev/shtanko/algorithms/leetcode/NetworkDelayTime {
	public fun <init> ()V
	public fun invoke ([[III)I
}

public final class dev/shtanko/algorithms/leetcode/NetworkDelayTimeDijkstra$GraphNode {
	public fun <init> (ILjava/util/List;)V
	public synthetic fun <init> (ILjava/util/List;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()I
	public final fun component2 ()Ljava/util/List;
	public final fun copy (ILjava/util/List;)Ldev/shtanko/algorithms/leetcode/NetworkDelayTimeDijkstra$GraphNode;
	public static synthetic fun copy$default (Ldev/shtanko/algorithms/leetcode/NetworkDelayTimeDijkstra$GraphNode;ILjava/util/List;ILjava/lang/Object;)Ldev/shtanko/algorithms/leetcode/NetworkDelayTimeDijkstra$GraphNode;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getId ()I
	public final fun getNeighbors ()Ljava/util/List;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/New21Game {
	public abstract fun invoke (III)D
}

public final class dev/shtanko/algorithms/leetcode/New21GameDP : dev/shtanko/algorithms/leetcode/New21Game {
	public fun <init> ()V
	public fun invoke (III)D
}

public abstract interface class dev/shtanko/algorithms/leetcode/NextGreaterElement1 {
	public abstract fun invoke ([I[I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/NextGreatestLetter {
	public abstract fun invoke ([CC)C
}

public final class dev/shtanko/algorithms/leetcode/NextGreatestLetterBinarySearch : dev/shtanko/algorithms/leetcode/NextGreatestLetter {
	public fun <init> ()V
	public fun invoke ([CC)C
}

public final class dev/shtanko/algorithms/leetcode/NextGreatestLetterBruteForce : dev/shtanko/algorithms/leetcode/NextGreatestLetter {
	public fun <init> ()V
	public fun invoke ([CC)C
}

public abstract interface class dev/shtanko/algorithms/leetcode/NextLargerNodes {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)[I
}

public final class dev/shtanko/algorithms/leetcode/NextLargerNodesOnePass : dev/shtanko/algorithms/leetcode/NextLargerNodes {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)[I
}

public final class dev/shtanko/algorithms/leetcode/NextLargerNodesStack : dev/shtanko/algorithms/leetcode/NextLargerNodes {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)[I
}

public final class dev/shtanko/algorithms/leetcode/NextPermutationKt {
	public static final fun nextPermutation ([I)V
}

public final class dev/shtanko/algorithms/leetcode/Node {
	public fun <init> (IILdev/shtanko/algorithms/leetcode/Node;Ldev/shtanko/algorithms/leetcode/Node;)V
	public synthetic fun <init> (IILdev/shtanko/algorithms/leetcode/Node;Ldev/shtanko/algorithms/leetcode/Node;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()I
	public final fun component2 ()I
	public final fun component3 ()Ldev/shtanko/algorithms/leetcode/Node;
	public final fun component4 ()Ldev/shtanko/algorithms/leetcode/Node;
	public final fun copy (IILdev/shtanko/algorithms/leetcode/Node;Ldev/shtanko/algorithms/leetcode/Node;)Ldev/shtanko/algorithms/leetcode/Node;
	public static synthetic fun copy$default (Ldev/shtanko/algorithms/leetcode/Node;IILdev/shtanko/algorithms/leetcode/Node;Ldev/shtanko/algorithms/leetcode/Node;ILjava/lang/Object;)Ldev/shtanko/algorithms/leetcode/Node;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getCnt ()I
	public final fun getLeft ()Ldev/shtanko/algorithms/leetcode/Node;
	public final fun getRight ()Ldev/shtanko/algorithms/leetcode/Node;
	public final fun getValue ()I
	public fun hashCode ()I
	public final fun setCnt (I)V
	public final fun setLeft (Ldev/shtanko/algorithms/leetcode/Node;)V
	public final fun setRight (Ldev/shtanko/algorithms/leetcode/Node;)V
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/NodesBetweenCriticalPoints {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)[I
}

public final class dev/shtanko/algorithms/leetcode/NodesBetweenOnePass : dev/shtanko/algorithms/leetcode/NodesBetweenCriticalPoints {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/NonOverlappingIntervals {
	public abstract fun eraseOverlapIntervals ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/NonOverlappingIntervalsGreedy : dev/shtanko/algorithms/leetcode/NonOverlappingIntervals {
	public fun <init> ()V
	public fun eraseOverlapIntervals ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/NqueensKt {
	public static final fun assertLocations ([Lkotlin/Pair;I[C)V
	public static final fun genBoard (I[Lkotlin/Pair;)Ljava/lang/String;
	public static final fun solveNQueens (I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/NthMagicalNumber {
	public abstract fun invoke (III)I
}

public final class dev/shtanko/algorithms/leetcode/NthMagicalNumberBS : dev/shtanko/algorithms/leetcode/NthMagicalNumber {
	public fun <init> ()V
	public fun invoke (III)I
}

public final class dev/shtanko/algorithms/leetcode/NthMagicalNumberMath : dev/shtanko/algorithms/leetcode/NthMagicalNumber {
	public fun <init> ()V
	public fun invoke (III)I
}

public final class dev/shtanko/algorithms/leetcode/NullableListNode {
	public fun <init> ()V
	public fun <init> (Ljava/lang/Integer;Ldev/shtanko/algorithms/leetcode/NullableListNode;)V
	public synthetic fun <init> (Ljava/lang/Integer;Ldev/shtanko/algorithms/leetcode/NullableListNode;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ljava/lang/Integer;
	public final fun component2 ()Ldev/shtanko/algorithms/leetcode/NullableListNode;
	public final fun copy (Ljava/lang/Integer;Ldev/shtanko/algorithms/leetcode/NullableListNode;)Ldev/shtanko/algorithms/leetcode/NullableListNode;
	public static synthetic fun copy$default (Ldev/shtanko/algorithms/leetcode/NullableListNode;Ljava/lang/Integer;Ldev/shtanko/algorithms/leetcode/NullableListNode;ILjava/lang/Object;)Ldev/shtanko/algorithms/leetcode/NullableListNode;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getNext ()Ldev/shtanko/algorithms/leetcode/NullableListNode;
	public final fun getValue ()Ljava/lang/Integer;
	public fun hashCode ()I
	public final fun setNext (Ldev/shtanko/algorithms/leetcode/NullableListNode;)V
	public final fun setValue (Ljava/lang/Integer;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/NullableListNodeKt {
	public static final fun toList (Ldev/shtanko/algorithms/leetcode/NullableListNode;)Ljava/util/List;
	public static final fun toListOrEmpty (Ldev/shtanko/algorithms/leetcode/NullableListNode;)Ljava/util/List;
	public static final fun toNullableListNode (Ljava/util/List;)Ldev/shtanko/algorithms/leetcode/NullableListNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumFactoredBinaryTrees {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/NumFactoredBinaryTreesDFS : dev/shtanko/algorithms/leetcode/NumFactoredBinaryTrees {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/NumIdenticalPairsMap : dev/shtanko/algorithms/leetcode/AbstractNumIdenticalPairs {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/NumIdenticalPairsNaive : dev/shtanko/algorithms/leetcode/AbstractNumIdenticalPairs {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/NumIdenticalPairsSort : dev/shtanko/algorithms/leetcode/AbstractNumIdenticalPairs {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/NumJewelsInStonesMap : dev/shtanko/algorithms/leetcode/NumJewelsInStonesStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/NumJewelsInStonesRegex : dev/shtanko/algorithms/leetcode/NumJewelsInStonesStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumJewelsInStonesStrategy {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumMatrix {
	public abstract fun sumRegion (IIII)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumMusicPlaylists {
	public abstract fun invoke (III)I
}

public final class dev/shtanko/algorithms/leetcode/NumMusicPlaylistsBottomUp : dev/shtanko/algorithms/leetcode/NumMusicPlaylists {
	public fun <init> ()V
	public fun invoke (III)I
}

public final class dev/shtanko/algorithms/leetcode/NumMusicPlaylistsCombinatorics : dev/shtanko/algorithms/leetcode/NumMusicPlaylists {
	public fun <init> ()V
	public fun invoke (III)I
}

public final class dev/shtanko/algorithms/leetcode/NumMusicPlaylistsTopDown : dev/shtanko/algorithms/leetcode/NumMusicPlaylists {
	public fun <init> ()V
	public fun invoke (III)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumOfArrays {
	public abstract fun invoke (III)I
}

public final class dev/shtanko/algorithms/leetcode/NumOfArraysBetterDp : dev/shtanko/algorithms/leetcode/NumOfArrays {
	public fun <init> ()V
	public fun invoke (III)I
}

public final class dev/shtanko/algorithms/leetcode/NumOfArraysBottomUp : dev/shtanko/algorithms/leetcode/NumOfArrays {
	public fun <init> ()V
	public fun invoke (III)I
}

public final class dev/shtanko/algorithms/leetcode/NumOfArraysPrefixSums : dev/shtanko/algorithms/leetcode/NumOfArrays {
	public fun <init> ()V
	public fun invoke (III)I
}

public final class dev/shtanko/algorithms/leetcode/NumOfArraysSpaceOptimizedDp : dev/shtanko/algorithms/leetcode/NumOfArrays {
	public fun <init> ()V
	public fun invoke (III)I
}

public final class dev/shtanko/algorithms/leetcode/NumOfArraysTopDown : dev/shtanko/algorithms/leetcode/NumOfArrays {
	public fun <init> ()V
	public fun invoke (III)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumOfBeams {
	public abstract fun invoke ([Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumOfMatches {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/NumOfMatchesSolution : dev/shtanko/algorithms/leetcode/NumOfMatches {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumOfMinutes {
	public abstract fun invoke (II[I[I)I
}

public final class dev/shtanko/algorithms/leetcode/NumOfMinutesBFS : dev/shtanko/algorithms/leetcode/NumOfMinutes {
	public fun <init> ()V
	public fun invoke (II[I[I)I
}

public final class dev/shtanko/algorithms/leetcode/NumOfMinutesDFS : dev/shtanko/algorithms/leetcode/NumOfMinutes {
	public fun <init> ()V
	public fun invoke (II[I[I)I
}

public final class dev/shtanko/algorithms/leetcode/NumOfSubArraysKt {
	public static final fun numOfSubArrays ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumOfWays {
	public abstract fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumOfWaysGrid {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/NumOfWaysGridDP : dev/shtanko/algorithms/leetcode/NumOfWaysGrid {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/NumOfWaysImpl : dev/shtanko/algorithms/leetcode/NumOfWays {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/NumOfWaysImpl$Node {
	public fun <init> (ILdev/shtanko/algorithms/leetcode/NumOfWaysImpl$Node;Ldev/shtanko/algorithms/leetcode/NumOfWaysImpl$Node;I)V
	public synthetic fun <init> (ILdev/shtanko/algorithms/leetcode/NumOfWaysImpl$Node;Ldev/shtanko/algorithms/leetcode/NumOfWaysImpl$Node;IILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()I
	public final fun component2 ()Ldev/shtanko/algorithms/leetcode/NumOfWaysImpl$Node;
	public final fun component3 ()Ldev/shtanko/algorithms/leetcode/NumOfWaysImpl$Node;
	public final fun component4 ()I
	public final fun copy (ILdev/shtanko/algorithms/leetcode/NumOfWaysImpl$Node;Ldev/shtanko/algorithms/leetcode/NumOfWaysImpl$Node;I)Ldev/shtanko/algorithms/leetcode/NumOfWaysImpl$Node;
	public static synthetic fun copy$default (Ldev/shtanko/algorithms/leetcode/NumOfWaysImpl$Node;ILdev/shtanko/algorithms/leetcode/NumOfWaysImpl$Node;Ldev/shtanko/algorithms/leetcode/NumOfWaysImpl$Node;IILjava/lang/Object;)Ldev/shtanko/algorithms/leetcode/NumOfWaysImpl$Node;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getCnt ()I
	public final fun getLeft ()Ldev/shtanko/algorithms/leetcode/NumOfWaysImpl$Node;
	public final fun getRight ()Ldev/shtanko/algorithms/leetcode/NumOfWaysImpl$Node;
	public final fun getValue ()I
	public fun hashCode ()I
	public final fun setCnt (I)V
	public final fun setLeft (Ldev/shtanko/algorithms/leetcode/NumOfWaysImpl$Node;)V
	public final fun setRight (Ldev/shtanko/algorithms/leetcode/NumOfWaysImpl$Node;)V
	public final fun setValue (I)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/NumOfWaysTriangle : dev/shtanko/algorithms/leetcode/NumOfWays {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumRollsToTarget {
	public abstract fun invoke (III)I
}

public final class dev/shtanko/algorithms/leetcode/NumRollsToTargetBase : dev/shtanko/algorithms/leetcode/NumRollsToTarget {
	public fun <init> ()V
	public fun invoke (III)I
}

public final class dev/shtanko/algorithms/leetcode/NumRollsToTargetBottomUpDp : dev/shtanko/algorithms/leetcode/NumRollsToTarget {
	public fun <init> ()V
	public fun invoke (III)I
}

public final class dev/shtanko/algorithms/leetcode/NumRollsToTargetTopDownDp : dev/shtanko/algorithms/leetcode/NumRollsToTarget {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/NumRollsToTargetTopDownDp$Companion;
	public fun <init> ()V
	public final fun getDp ()[[I
	public fun invoke (III)I
}

public final class dev/shtanko/algorithms/leetcode/NumRollsToTargetTopDownDp$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumRookCaptures {
	public abstract fun invoke ([[C)I
}

public final class dev/shtanko/algorithms/leetcode/NumRookCapturesSF : dev/shtanko/algorithms/leetcode/NumRookCaptures {
	public fun <init> ()V
	public fun invoke ([[C)I
}

public final class dev/shtanko/algorithms/leetcode/NumRookCapturesSearch : dev/shtanko/algorithms/leetcode/NumRookCaptures {
	public fun <init> ()V
	public fun invoke ([[C)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumSplits {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/NumSplitsMap : dev/shtanko/algorithms/leetcode/NumSplits {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/NumSplitsSplitPointer : dev/shtanko/algorithms/leetcode/NumSplits {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumSteps {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/NumStepsStraightForward : dev/shtanko/algorithms/leetcode/NumSteps {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumSubmatrixSumTarget {
	public abstract fun invoke ([[II)I
}

public final class dev/shtanko/algorithms/leetcode/NumSubmatrixSumTargetSolution : dev/shtanko/algorithms/leetcode/NumSubmatrixSumTarget {
	public fun <init> ()V
	public fun invoke ([[II)I
}

public final class dev/shtanko/algorithms/leetcode/NumSubmatrixSumTargetSolution2 : dev/shtanko/algorithms/leetcode/NumSubmatrixSumTarget {
	public fun <init> ()V
	public fun invoke ([[II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumSubseq {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/NumSubseqBinarySearch : dev/shtanko/algorithms/leetcode/NumSubseq {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/NumSubseqTwoPointers : dev/shtanko/algorithms/leetcode/NumSubseq {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumTilings {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/NumTilingsDP : dev/shtanko/algorithms/leetcode/NumTilings {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumWays {
	public abstract fun invoke ([Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/NumWaysDP : dev/shtanko/algorithms/leetcode/NumWays {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumberComplement {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/NumberComplementBitwiseBs : dev/shtanko/algorithms/leetcode/NumberComplement {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumberOfArithmeticSlices {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/NumberOfArithmeticSlicesBruteForce : dev/shtanko/algorithms/leetcode/NumberOfArithmeticSlices {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/NumberOfArithmeticSlicesDP : dev/shtanko/algorithms/leetcode/NumberOfArithmeticSlices {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/NumberOfArithmeticSlicesDP2 : dev/shtanko/algorithms/leetcode/NumberOfArithmeticSlices {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumberOfAtoms {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/NumberOfAtomsRecursion : dev/shtanko/algorithms/leetcode/NumberOfAtoms {
	public fun <init> ()V
	public final fun getI ()I
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
	public final fun setI (I)V
}

public final class dev/shtanko/algorithms/leetcode/NumberOfAtomsRegex : dev/shtanko/algorithms/leetcode/NumberOfAtoms {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/NumberOfAtomsStack : dev/shtanko/algorithms/leetcode/NumberOfAtoms {
	public fun <init> ()V
	public final fun format (Ljava/util/Stack;)Ljava/lang/String;
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumberOfClosedIslands {
	public abstract fun closedIsland ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/NumberOfClosedIslandsBFS : dev/shtanko/algorithms/leetcode/NumberOfClosedIslands {
	public fun <init> ()V
	public fun closedIsland ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/NumberOfClosedIslandsDFS : dev/shtanko/algorithms/leetcode/NumberOfClosedIslands {
	public fun <init> ()V
	public fun closedIsland ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumberOfCombinations {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/NumberOfCombinationsBottomUp : dev/shtanko/algorithms/leetcode/NumberOfCombinations {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumberOfCommonFactors {
	public abstract fun commonFactors (II)I
}

public final class dev/shtanko/algorithms/leetcode/NumberOfCommonFactorsBruteForce : dev/shtanko/algorithms/leetcode/NumberOfCommonFactors {
	public fun <init> ()V
	public fun commonFactors (II)I
}

public final class dev/shtanko/algorithms/leetcode/NumberOfCommonFactorsNaive : dev/shtanko/algorithms/leetcode/NumberOfCommonFactors {
	public fun <init> ()V
	public fun commonFactors (II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumberOfEnclaves {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/NumberOfEnclavesBFS : dev/shtanko/algorithms/leetcode/NumberOfEnclaves {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/NumberOfEnclavesDFS : dev/shtanko/algorithms/leetcode/NumberOfEnclaves {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumberOfGoodLeafNodesPairs {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;I)I
}

public final class dev/shtanko/algorithms/leetcode/NumberOfGoodLeafNodesPairsBFS : dev/shtanko/algorithms/leetcode/NumberOfGoodLeafNodesPairs {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;I)I
}

public final class dev/shtanko/algorithms/leetcode/NumberOfGoodLeafNodesPairsPostOrder : dev/shtanko/algorithms/leetcode/NumberOfGoodLeafNodesPairs {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/NumberOfGoodLeafNodesPairsPostOrder$Companion;
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;I)I
}

public final class dev/shtanko/algorithms/leetcode/NumberOfGoodLeafNodesPairsPostOrder$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumberOfGoodPaths {
	public abstract fun invoke ([I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/NumberOfGoodPathsUnionFind : dev/shtanko/algorithms/leetcode/NumberOfGoodPaths {
	public fun <init> ()V
	public fun invoke ([I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/NumberOfGoodPathsUnionFind$UF {
	public fun <init> (I)V
	public final fun find (I)I
	public final fun union (II)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumberOfProvinces {
	public abstract fun findCircleNum ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/NumberOfProvincesBFS : dev/shtanko/algorithms/leetcode/NumberOfProvinces {
	public fun <init> ()V
	public fun findCircleNum ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/NumberOfProvincesDFS : dev/shtanko/algorithms/leetcode/NumberOfProvinces {
	public fun <init> ()V
	public fun findCircleNum ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/NumberOfProvincesUnionFind : dev/shtanko/algorithms/leetcode/NumberOfProvinces {
	public fun <init> ()V
	public fun findCircleNum ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumberOfSteps {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/NumberOfStepsBinary : dev/shtanko/algorithms/leetcode/NumberOfSteps {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/NumberOfStepsStraightForward : dev/shtanko/algorithms/leetcode/NumberOfSteps {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumberOfSubarrays {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/NumberOfSubarraysOnePass : dev/shtanko/algorithms/leetcode/NumberOfSubarrays {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/NumberOfSubarraysSlidingWindow : dev/shtanko/algorithms/leetcode/NumberOfSubarrays {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/NumberOfUniqueGoodSubsequencesKt {
	public static final fun numberOfUniqueGoodSubsequences (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumberOfWays {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/NumberOfWaysDP : dev/shtanko/algorithms/leetcode/NumberOfWays {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/NumberOfWaysDP$Companion;
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/NumberOfWaysDP$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumberOfWaysOfCuttingPizza {
	public abstract fun ways ([Ljava/lang/String;I)I
}

public final class dev/shtanko/algorithms/leetcode/NumberOfWaysOfCuttingPizzaPrefixSum : dev/shtanko/algorithms/leetcode/NumberOfWaysOfCuttingPizza {
	public fun <init> ()V
	public fun ways ([Ljava/lang/String;I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/NumberOfWaysToStay {
	public abstract fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/NumberOfWaysToStayBottomUp : dev/shtanko/algorithms/leetcode/NumberOfWaysToStay {
	public fun <init> ()V
	public fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/NumberOfWaysToStayTopDown : dev/shtanko/algorithms/leetcode/NumberOfWaysToStay {
	public field memo [[I
	public fun <init> ()V
	public final fun getMemo ()[[I
	public fun invoke (II)I
	public final fun setMemo ([[I)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/OddEvenList {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/OddEvenListImpl : dev/shtanko/algorithms/leetcode/OddEvenList {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/OddStringDifference {
	public abstract fun invoke ([Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/OddStringDifferenceHashMap : dev/shtanko/algorithms/leetcode/OddStringDifference {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/OneBitDiffPermutation : dev/shtanko/algorithms/leetcode/CircularPermutation {
	public fun <init> ()V
	public fun invoke (II)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/OneDDynamicProgramming : dev/shtanko/algorithms/leetcode/TargetSum {
	public fun <init> ()V
	public fun findTargetSumWays ([II)I
}

public final class dev/shtanko/algorithms/leetcode/OnePassPrefixXOR : dev/shtanko/algorithms/leetcode/CountTriplets {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/OnesAndZeroes {
	public abstract fun findMaxForm ([Ljava/lang/String;II)I
}

public final class dev/shtanko/algorithms/leetcode/OnesAndZeroesBF : dev/shtanko/algorithms/leetcode/OnesAndZeroes {
	public fun <init> ()V
	public fun findMaxForm ([Ljava/lang/String;II)I
}

public final class dev/shtanko/algorithms/leetcode/OnesAndZeroesBetterBF : dev/shtanko/algorithms/leetcode/OnesAndZeroes {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/OnesAndZeroesBetterBF$Companion;
	public fun <init> ()V
	public fun findMaxForm ([Ljava/lang/String;II)I
}

public final class dev/shtanko/algorithms/leetcode/OnesAndZeroesBetterBF$Companion {
}

public final class dev/shtanko/algorithms/leetcode/OnesAndZeroesDP : dev/shtanko/algorithms/leetcode/OnesAndZeroes {
	public fun <init> ()V
	public fun findMaxForm ([Ljava/lang/String;II)I
}

public final class dev/shtanko/algorithms/leetcode/OnesAndZeroesMemoization : dev/shtanko/algorithms/leetcode/OnesAndZeroes {
	public fun <init> ()V
	public fun findMaxForm ([Ljava/lang/String;II)I
}

public final class dev/shtanko/algorithms/leetcode/OnesAndZeroesRecursion : dev/shtanko/algorithms/leetcode/OnesAndZeroes {
	public fun <init> ()V
	public final fun calculate ([Ljava/lang/String;III)I
	public fun findMaxForm ([Ljava/lang/String;II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/OnesMinusZeros {
	public abstract fun invoke ([[I)[[I
}

public final class dev/shtanko/algorithms/leetcode/OnesMinusZerosArrayCounter : dev/shtanko/algorithms/leetcode/OnesMinusZeros {
	public fun <init> ()V
	public fun invoke ([[I)[[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/OpenLock {
	public abstract fun invoke ([Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/OptimalDivisionBruteForce : dev/shtanko/algorithms/leetcode/OptimalDivisionStrategy {
	public fun <init> ()V
	public fun invoke ([I)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/OptimalDivisionMemorization : dev/shtanko/algorithms/leetcode/OptimalDivisionStrategy {
	public fun <init> ()V
	public fun invoke ([I)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/OptimalDivisionStrategy {
	public abstract fun invoke ([I)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/OriginalArrayOfPrefixXor {
	public abstract fun invoke ([I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/OriginalArrayOfPrefixXorSolution {
}

public final class dev/shtanko/algorithms/leetcode/OriginalArrayOfPrefixXorSolution$SpaceOptimized : dev/shtanko/algorithms/leetcode/OriginalArrayOfPrefixXor, dev/shtanko/algorithms/leetcode/OriginalArrayOfPrefixXorSolution {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/OriginalArrayOfPrefixXorSolution$SpaceOptimized;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I)[I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/OriginalArrayOfPrefixXorSolution$XORProperties : dev/shtanko/algorithms/leetcode/OriginalArrayOfPrefixXor, dev/shtanko/algorithms/leetcode/OriginalArrayOfPrefixXorSolution {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/OriginalArrayOfPrefixXorSolution$XORProperties;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I)[I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/OriginalDigitsKt {
	public static final fun originalDigits (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/OutOfBoundaryPaths {
	public abstract fun invoke (IIIII)I
}

public final class dev/shtanko/algorithms/leetcode/OutOfBoundaryPathsBruteForce : dev/shtanko/algorithms/leetcode/OutOfBoundaryPaths {
	public fun <init> ()V
	public fun invoke (IIIII)I
}

public final class dev/shtanko/algorithms/leetcode/OutOfBoundaryPathsDP : dev/shtanko/algorithms/leetcode/OutOfBoundaryPaths {
	public fun <init> ()V
	public fun invoke (IIIII)I
}

public final class dev/shtanko/algorithms/leetcode/OutOfBoundaryPathsMemo : dev/shtanko/algorithms/leetcode/OutOfBoundaryPaths {
	public fun <init> ()V
	public fun invoke (IIIII)I
}

public final class dev/shtanko/algorithms/leetcode/POTBaseConversion : dev/shtanko/algorithms/leetcode/PowerOfThreeStrategy {
	public fun <init> ()V
	public fun isPowerOfThree (I)Z
}

public final class dev/shtanko/algorithms/leetcode/POTIntegerLimitations : dev/shtanko/algorithms/leetcode/PowerOfThreeStrategy {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/POTIntegerLimitations$Companion;
	public fun <init> ()V
	public fun isPowerOfThree (I)Z
}

public final class dev/shtanko/algorithms/leetcode/POTIntegerLimitations$Companion {
}

public final class dev/shtanko/algorithms/leetcode/POTLoopIteration : dev/shtanko/algorithms/leetcode/PowerOfThreeStrategy {
	public fun <init> ()V
	public fun isPowerOfThree (I)Z
}

public final class dev/shtanko/algorithms/leetcode/POTMathematics : dev/shtanko/algorithms/leetcode/PowerOfThreeStrategy {
	public fun <init> ()V
	public fun isPowerOfThree (I)Z
}

public final class dev/shtanko/algorithms/leetcode/PPBacktracking : dev/shtanko/algorithms/leetcode/PalindromePartitioning {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/PPBacktrackingDP : dev/shtanko/algorithms/leetcode/PalindromePartitioning {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/PacificAtlanticBFS : dev/shtanko/algorithms/leetcode/PacificAtlanticWaterFlow {
	public fun <init> ()V
	public fun invoke ([[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/PacificAtlanticDFS : dev/shtanko/algorithms/leetcode/PacificAtlanticWaterFlow {
	public fun <init> ()V
	public fun invoke ([[I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/PacificAtlanticWaterFlow {
	public abstract fun invoke ([[I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/PaintFence {
	public abstract fun numWays (II)I
}

public final class dev/shtanko/algorithms/leetcode/PaintFence1DBottomUp : dev/shtanko/algorithms/leetcode/PaintFence {
	public fun <init> ()V
	public fun numWays (II)I
}

public final class dev/shtanko/algorithms/leetcode/PaintFence1DTopDown : dev/shtanko/algorithms/leetcode/PaintFence {
	public fun <init> ()V
	public fun numWays (II)I
}

public final class dev/shtanko/algorithms/leetcode/PaintFence2DBottomUp : dev/shtanko/algorithms/leetcode/PaintFence {
	public fun <init> ()V
	public fun numWays (II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/PaintWalls {
	public abstract fun invoke ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/PaintWallsBottomUp : dev/shtanko/algorithms/leetcode/PaintWalls {
	public fun <init> ()V
	public fun invoke ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/PaintWallsSpaceOptDP : dev/shtanko/algorithms/leetcode/PaintWalls {
	public fun <init> ()V
	public fun invoke ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/PaintWallsTopDown : dev/shtanko/algorithms/leetcode/PaintWalls {
	public fun <init> ()V
	public fun invoke ([I[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/PairSum {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/PairSumOdd : dev/shtanko/algorithms/leetcode/PairSum {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/PairSumOdd$Companion;
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/PairSumOdd$Companion {
}

public final class dev/shtanko/algorithms/leetcode/PairSumSort1 : dev/shtanko/algorithms/leetcode/PairSum {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/PairSumSort2 : dev/shtanko/algorithms/leetcode/PairSum {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/PairSumSort3 : dev/shtanko/algorithms/leetcode/PairSum {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/PalindromeLinkedList {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Z
}

public final class dev/shtanko/algorithms/leetcode/PalindromeLinkedListCopy : dev/shtanko/algorithms/leetcode/PalindromeLinkedList {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Z
}

public final class dev/shtanko/algorithms/leetcode/PalindromeLinkedListRecursive : dev/shtanko/algorithms/leetcode/PalindromeLinkedList {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Z
}

public final class dev/shtanko/algorithms/leetcode/PalindromeLinkedListReverse : dev/shtanko/algorithms/leetcode/PalindromeLinkedList {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/PalindromePairs {
	public abstract fun palindromePairs ([Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/PalindromePairsImpl : dev/shtanko/algorithms/leetcode/PalindromePairs {
	public fun <init> ()V
	public fun palindromePairs ([Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/PalindromePairsTrie : dev/shtanko/algorithms/leetcode/PalindromePairs {
	public fun <init> ()V
	public fun palindromePairs ([Ljava/lang/String;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/PalindromePartitioning {
	public abstract fun invoke (Ljava/lang/String;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/PalindromePartitioning3 {
	public abstract fun palindromePartition (Ljava/lang/String;I)I
}

public final class dev/shtanko/algorithms/leetcode/PalindromePartitioning3DP : dev/shtanko/algorithms/leetcode/PalindromePartitioning3 {
	public fun <init> ()V
	public fun palindromePartition (Ljava/lang/String;I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/PalindromePartitioning4 {
	public abstract fun checkPartitioning (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/PalindromePartitioning4DP : dev/shtanko/algorithms/leetcode/PalindromePartitioning4 {
	public fun <init> ()V
	public fun checkPartitioning (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/PalindromePermutationArray : dev/shtanko/algorithms/leetcode/PalindromePermutationBehavior {
	public fun <init> ()V
	public fun canPermutePalindrome (Ljava/lang/String;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/PalindromePermutationBehavior {
	public abstract fun canPermutePalindrome (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/PalindromePermutationBruteForce : dev/shtanko/algorithms/leetcode/PalindromePermutationBehavior {
	public fun <init> ()V
	public fun canPermutePalindrome (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/PalindromePermutationDelegate : dev/shtanko/algorithms/leetcode/PalindromePermutationBehavior {
	public fun <init> (Ljava/util/Set;)V
	public fun canPermutePalindrome (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/PalindromePermutationHashMap : dev/shtanko/algorithms/leetcode/PalindromePermutationBehavior {
	public fun <init> ()V
	public fun canPermutePalindrome (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/PalindromePermutationSet : dev/shtanko/algorithms/leetcode/PalindromePermutationBehavior {
	public fun <init> ()V
	public fun canPermutePalindrome (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/PalindromePermutationSinglePass : dev/shtanko/algorithms/leetcode/PalindromePermutationBehavior {
	public fun <init> ()V
	public fun canPermutePalindrome (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/PalindromePermutationTree : dev/shtanko/algorithms/leetcode/PalindromePermutationBehavior {
	public fun <init> ()V
	public fun canPermutePalindrome (Ljava/lang/String;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/PalindromicSubstrings {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/PalindromicSubstringsCheckAllSubstrings : dev/shtanko/algorithms/leetcode/PalindromicSubstrings {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/PalindromicSubstringsDP : dev/shtanko/algorithms/leetcode/PalindromicSubstrings {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/PalindromicSubstringsPossibleCenters : dev/shtanko/algorithms/leetcode/PalindromicSubstrings {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/PancakeSortLeetcode {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/PancakeSortLeetcode;
	public final fun pancakeSort ([I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/ParallelCourses {
	public abstract fun minimumSemesters (I[[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ParallelCourses2 {
	public abstract fun minNumberOfSemesters (I[[II)I
}

public final class dev/shtanko/algorithms/leetcode/ParallelCourses2DP : dev/shtanko/algorithms/leetcode/ParallelCourses2 {
	public fun <init> ()V
	public fun minNumberOfSemesters (I[[II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ParallelCourses3 {
	public abstract fun invoke (I[[I[I)I
}

public final class dev/shtanko/algorithms/leetcode/ParallelCourses3DFS : dev/shtanko/algorithms/leetcode/ParallelCourses3 {
	public fun <init> ()V
	public fun invoke (I[[I[I)I
}

public final class dev/shtanko/algorithms/leetcode/ParallelCourses3Sort : dev/shtanko/algorithms/leetcode/ParallelCourses3 {
	public fun <init> ()V
	public fun invoke (I[[I[I)I
}

public final class dev/shtanko/algorithms/leetcode/ParallelCoursesBFS : dev/shtanko/algorithms/leetcode/ParallelCourses {
	public fun <init> ()V
	public fun minimumSemesters (I[[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ParseBooleanExpression {
	public abstract fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/ParseBooleanExpressionRecursion : dev/shtanko/algorithms/leetcode/ParseBooleanExpression {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/ParseBooleanExpressionStack : dev/shtanko/algorithms/leetcode/ParseBooleanExpression {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/PartitionLabels {
	public fun <init> ()V
	public final fun invoke (Ljava/lang/String;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/PartitionList {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;I)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/PartitionListOnePass : dev/shtanko/algorithms/leetcode/PartitionList {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;I)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/PartitionString {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/PartitionStringBit : dev/shtanko/algorithms/leetcode/PartitionString {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/PartitionStringSet : dev/shtanko/algorithms/leetcode/PartitionString {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/PascalsTriangle {
	public abstract fun invoke (I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/PascalsTriangle2 {
	public abstract fun invoke (I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/PascalsTriangle2Solution : dev/shtanko/algorithms/leetcode/PascalsTriangle2 {
	public fun <init> ()V
	public fun invoke (I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/PascalsTriangleSolution : dev/shtanko/algorithms/leetcode/PascalsTriangle {
	public fun <init> ()V
	public fun invoke (I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/PassThePillow {
	public abstract fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/PassThePillowMath : dev/shtanko/algorithms/leetcode/PassThePillow {
	public fun <init> ()V
	public fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/PassThePillowSimulation : dev/shtanko/algorithms/leetcode/PassThePillow {
	public fun <init> ()V
	public fun invoke (II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/PatchingArray {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/PatchingArraySimple : dev/shtanko/algorithms/leetcode/PatchingArray {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/PathCrossing {
	public abstract fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/PathCrossingHashSet : dev/shtanko/algorithms/leetcode/PathCrossing {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/PathSum2 {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/PathSum2DFS : dev/shtanko/algorithms/leetcode/PathSum2 {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/PathSumRecursive : dev/shtanko/algorithms/leetcode/PathSumStrategy {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;I)Z
}

public final class dev/shtanko/algorithms/leetcode/PathSumStack : dev/shtanko/algorithms/leetcode/PathSumStrategy {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/PathSumStrategy {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/PathsWithMaxScore {
	public abstract fun invoke (Ljava/util/List;)[I
}

public final class dev/shtanko/algorithms/leetcode/PathsWithMaxScoreDP : dev/shtanko/algorithms/leetcode/PathsWithMaxScore {
	public fun <init> ()V
	public fun invoke (Ljava/util/List;)[I
}

public final class dev/shtanko/algorithms/leetcode/PeakIndexInMountainArrayBetterThanBinarySearch : dev/shtanko/algorithms/leetcode/PeakIndexInMountainArrayStrategy {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/PeakIndexInMountainArrayBinarySearch : dev/shtanko/algorithms/leetcode/PeakIndexInMountainArrayStrategy {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/PeakIndexInMountainArrayLinearScan : dev/shtanko/algorithms/leetcode/PeakIndexInMountainArrayStrategy {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/PeakIndexInMountainArrayStrategy {
	public abstract fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/PerfectRectangle {
	public abstract fun isRectangleCover ([[I)Z
}

public final class dev/shtanko/algorithms/leetcode/PerfectRectangleEasy : dev/shtanko/algorithms/leetcode/PerfectRectangle {
	public fun <init> ()V
	public fun isRectangleCover ([[I)Z
}

public final class dev/shtanko/algorithms/leetcode/PerfectRectangleSweepLine : dev/shtanko/algorithms/leetcode/PerfectRectangle {
	public fun <init> ()V
	public fun isRectangleCover ([[I)Z
}

public final class dev/shtanko/algorithms/leetcode/PerfectRectangleSweepLine$Event : java/lang/Comparable {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/PerfectRectangleSweepLine$Event$Companion;
	public fun <init> (I[I)V
	public fun compareTo (Ldev/shtanko/algorithms/leetcode/PerfectRectangleSweepLine$Event;)I
	public synthetic fun compareTo (Ljava/lang/Object;)I
	public final fun component1 ()I
	public final fun component2 ()[I
	public final fun copy (I[I)Ldev/shtanko/algorithms/leetcode/PerfectRectangleSweepLine$Event;
	public static synthetic fun copy$default (Ldev/shtanko/algorithms/leetcode/PerfectRectangleSweepLine$Event;I[IILjava/lang/Object;)Ldev/shtanko/algorithms/leetcode/PerfectRectangleSweepLine$Event;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getRect ()[I
	public final fun getTime ()I
	public fun hashCode ()I
	public final fun setRect ([I)V
	public final fun setTime (I)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/PerfectRectangleSweepLine$Event$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/PerfectSquares {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/PerfectSquaresBFS : dev/shtanko/algorithms/leetcode/PerfectSquares {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/PerfectSquaresDP : dev/shtanko/algorithms/leetcode/PerfectSquares {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/PerfectSquaresMath : dev/shtanko/algorithms/leetcode/PerfectSquares {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/PerfectSquaresStaticDP : dev/shtanko/algorithms/leetcode/PerfectSquares {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/PermutationArray : dev/shtanko/algorithms/leetcode/StringPermutationStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
	public fun matches ([I[I)Z
}

public final class dev/shtanko/algorithms/leetcode/PermutationBruteForce : dev/shtanko/algorithms/leetcode/StringPermutationStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
	public fun matches ([I[I)Z
	public final fun swap (Ljava/lang/String;II)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/PermutationHashmap : dev/shtanko/algorithms/leetcode/StringPermutationStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
	public fun matches ([I[I)Z
}

public final class dev/shtanko/algorithms/leetcode/PermutationOptimizedSlidingWindow : dev/shtanko/algorithms/leetcode/StringPermutationStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
	public fun matches ([I[I)Z
}

public final class dev/shtanko/algorithms/leetcode/PermutationSlidingWindow : dev/shtanko/algorithms/leetcode/StringPermutationStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
	public fun matches ([I[I)Z
}

public final class dev/shtanko/algorithms/leetcode/PermutationSorting : dev/shtanko/algorithms/leetcode/StringPermutationStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
	public fun matches ([I[I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/Permutations {
	public abstract fun permute ([I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/PermutationsBacktracking : dev/shtanko/algorithms/leetcode/Permutations {
	public fun <init> ()V
	public fun permute ([I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/PickGifts {
	public abstract fun invoke ([II)J
}

public final class dev/shtanko/algorithms/leetcode/PickGifts$Heap : dev/shtanko/algorithms/leetcode/PickGifts {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/PickGifts$Heap;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([II)J
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/PickGifts$SortedArray : dev/shtanko/algorithms/leetcode/PickGifts {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/PickGifts$SortedArray;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([II)J
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/PlusOne {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/PlusOne;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public final fun invoke ([I)[I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/PoorPigs {
}

public final class dev/shtanko/algorithms/leetcode/PoorPigs$Solution : dev/shtanko/algorithms/leetcode/PoorPigsStrategy {
	public fun <init> ()V
	public fun invoke (III)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/PoorPigsStrategy {
	public abstract fun invoke (III)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/PossibleBipartition {
	public abstract fun invoke (I[[I)Z
}

public final class dev/shtanko/algorithms/leetcode/PossibleBipartitionDFS : dev/shtanko/algorithms/leetcode/PossibleBipartition {
	public fun <init> ()V
	public fun invoke (I[[I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/PossiblyEquals {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/PossiblyEqualsDFS : dev/shtanko/algorithms/leetcode/PossiblyEquals {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/PossiblyEqualsDFS$Companion;
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/PossiblyEqualsDFS$Companion {
}

public final class dev/shtanko/algorithms/leetcode/PostOrderTraversalKt {
	public static final fun postOrderTraversal (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/Pow {
	public abstract fun invoke (DI)D
}

public final class dev/shtanko/algorithms/leetcode/Pow4BitManipulation : dev/shtanko/algorithms/leetcode/PowOfFour {
	public fun <init> ()V
	public fun isPow4 (I)Z
}

public final class dev/shtanko/algorithms/leetcode/Pow4BruteForce : dev/shtanko/algorithms/leetcode/PowOfFour {
	public fun <init> ()V
	public fun isPow4 (I)Z
}

public final class dev/shtanko/algorithms/leetcode/Pow4Math : dev/shtanko/algorithms/leetcode/PowOfFour {
	public fun <init> ()V
	public fun isPow4 (I)Z
}

public final class dev/shtanko/algorithms/leetcode/PowBruteForce : dev/shtanko/algorithms/leetcode/Pow {
	public fun <init> ()V
	public fun invoke (DI)D
}

public final class dev/shtanko/algorithms/leetcode/PowFastIterative : dev/shtanko/algorithms/leetcode/Pow {
	public fun <init> ()V
	public fun invoke (DI)D
}

public final class dev/shtanko/algorithms/leetcode/PowFastRecursive : dev/shtanko/algorithms/leetcode/Pow {
	public fun <init> ()V
	public fun invoke (DI)D
}

public abstract interface class dev/shtanko/algorithms/leetcode/PowOfFour {
	public abstract fun isPow4 (I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/PowerOfThreeStrategy {
	public abstract fun isPowerOfThree (I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/PowerOfTwo {
	public abstract fun invoke (I)Z
}

public final class dev/shtanko/algorithms/leetcode/PowerOfTwoBitwise : dev/shtanko/algorithms/leetcode/PowerOfTwo {
	public fun <init> ()V
	public fun invoke (I)Z
}

public final class dev/shtanko/algorithms/leetcode/PowerOfTwoIterative : dev/shtanko/algorithms/leetcode/PowerOfTwo {
	public fun <init> ()V
	public fun invoke (I)Z
}

public final class dev/shtanko/algorithms/leetcode/PowerOfTwoMath : dev/shtanko/algorithms/leetcode/PowerOfTwo {
	public fun <init> ()V
	public fun invoke (I)Z
}

public final class dev/shtanko/algorithms/leetcode/PowerOfTwoMathOneLine : dev/shtanko/algorithms/leetcode/PowerOfTwo {
	public fun <init> ()V
	public fun invoke (I)Z
}

public final class dev/shtanko/algorithms/leetcode/PowerOfTwoMemo : dev/shtanko/algorithms/leetcode/PowerOfTwo {
	public fun <init> ()V
	public fun invoke (I)Z
}

public final class dev/shtanko/algorithms/leetcode/PowerOfTwoRecursive : dev/shtanko/algorithms/leetcode/PowerOfTwo {
	public fun <init> ()V
	public fun invoke (I)Z
}

public final class dev/shtanko/algorithms/leetcode/PowerOfTwoTailrec : dev/shtanko/algorithms/leetcode/PowerOfTwo {
	public fun <init> ()V
	public fun invoke (I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/PowerfulIntegers {
	public abstract fun invoke (III)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/PredictTheWinner {
	public abstract fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/PredictTheWinnerDP : dev/shtanko/algorithms/leetcode/PredictTheWinner {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/PredictTheWinnerDP2 : dev/shtanko/algorithms/leetcode/PredictTheWinner {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/PredictTheWinnerMemo : dev/shtanko/algorithms/leetcode/PredictTheWinner {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/PredictTheWinnerRecursion : dev/shtanko/algorithms/leetcode/PredictTheWinner {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/PrefixHash : dev/shtanko/algorithms/leetcode/ReplaceWords {
	public fun <init> ()V
	public fun invoke (Ljava/util/List;Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/PreorderTraversalKt {
	public static final fun preorderTraversal (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/PrimePalindrome {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/PrimePalindromeBruteForce : dev/shtanko/algorithms/leetcode/PrimePalindrome {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/PrimePalindromeBruteForce$Companion;
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/PrimePalindromeBruteForce$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/PrimeSubOperation {
	public abstract fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/PrimeSubOperationStoringPrimes : dev/shtanko/algorithms/leetcode/PrimeSubOperation {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/PrimeSubOperationTwoPointers : dev/shtanko/algorithms/leetcode/PrimeSubOperation {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/PrintInOrder {
	public fun <init> ()V
	public final fun first (Ljava/lang/Runnable;)V
	public final fun second (Ljava/lang/Runnable;)V
	public final fun third (Ljava/lang/Runnable;)V
}

public final class dev/shtanko/algorithms/leetcode/PriorityQueueIPO : dev/shtanko/algorithms/leetcode/IPO {
	public fun <init> ()V
	public fun invoke (II[I[I)I
}

public final class dev/shtanko/algorithms/leetcode/ProblemsKt {
	public static final fun getProblems ()Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/ProductExceptSelf {
	public abstract fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/ProductExceptSelfArr : dev/shtanko/algorithms/leetcode/ProductExceptSelf {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/ProductExceptSelfDp : dev/shtanko/algorithms/leetcode/ProductExceptSelf {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/ProductExceptSelfDpOpt : dev/shtanko/algorithms/leetcode/ProductExceptSelf {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ProfitableSchemes {
	public abstract fun invoke (II[I[I)I
}

public final class dev/shtanko/algorithms/leetcode/ProfitableSchemesBottomUp : dev/shtanko/algorithms/leetcode/ProfitableSchemes {
	public fun <init> ()V
	public fun invoke (II[I[I)I
}

public final class dev/shtanko/algorithms/leetcode/ProfitableSchemesDP : dev/shtanko/algorithms/leetcode/ProfitableSchemes {
	public fun <init> ()V
	public fun invoke (II[I[I)I
}

public final class dev/shtanko/algorithms/leetcode/ProfitableSchemesTopDown : dev/shtanko/algorithms/leetcode/ProfitableSchemes {
	public fun <init> ()V
	public final fun find (IIIII[I[I)I
	public fun invoke (II[I[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/PseudoPalindromicPaths {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/PseudoPalindromicPathsDFS : dev/shtanko/algorithms/leetcode/PseudoPalindromicPaths {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/PseudoPalindromicPathsRecursive : dev/shtanko/algorithms/leetcode/PseudoPalindromicPaths {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
	public final fun preorder (Ldev/shtanko/algorithms/leetcode/TreeNode;I)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/PutMarbles {
	public abstract fun putMarblesInBags ([II)J
}

public final class dev/shtanko/algorithms/leetcode/PutMarblesSort : dev/shtanko/algorithms/leetcode/PutMarbles {
	public fun <init> ()V
	public fun putMarblesInBags ([II)J
}

public final class dev/shtanko/algorithms/leetcode/QuadTreeNode {
	public fun <init> (ZZLdev/shtanko/algorithms/leetcode/QuadTreeNode;Ldev/shtanko/algorithms/leetcode/QuadTreeNode;Ldev/shtanko/algorithms/leetcode/QuadTreeNode;Ldev/shtanko/algorithms/leetcode/QuadTreeNode;)V
	public synthetic fun <init> (ZZLdev/shtanko/algorithms/leetcode/QuadTreeNode;Ldev/shtanko/algorithms/leetcode/QuadTreeNode;Ldev/shtanko/algorithms/leetcode/QuadTreeNode;Ldev/shtanko/algorithms/leetcode/QuadTreeNode;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Z
	public final fun component2 ()Z
	public final fun component3 ()Ldev/shtanko/algorithms/leetcode/QuadTreeNode;
	public final fun component4 ()Ldev/shtanko/algorithms/leetcode/QuadTreeNode;
	public final fun component5 ()Ldev/shtanko/algorithms/leetcode/QuadTreeNode;
	public final fun component6 ()Ldev/shtanko/algorithms/leetcode/QuadTreeNode;
	public final fun copy (ZZLdev/shtanko/algorithms/leetcode/QuadTreeNode;Ldev/shtanko/algorithms/leetcode/QuadTreeNode;Ldev/shtanko/algorithms/leetcode/QuadTreeNode;Ldev/shtanko/algorithms/leetcode/QuadTreeNode;)Ldev/shtanko/algorithms/leetcode/QuadTreeNode;
	public static synthetic fun copy$default (Ldev/shtanko/algorithms/leetcode/QuadTreeNode;ZZLdev/shtanko/algorithms/leetcode/QuadTreeNode;Ldev/shtanko/algorithms/leetcode/QuadTreeNode;Ldev/shtanko/algorithms/leetcode/QuadTreeNode;Ldev/shtanko/algorithms/leetcode/QuadTreeNode;ILjava/lang/Object;)Ldev/shtanko/algorithms/leetcode/QuadTreeNode;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getBottomLeft ()Ldev/shtanko/algorithms/leetcode/QuadTreeNode;
	public final fun getBottomRight ()Ldev/shtanko/algorithms/leetcode/QuadTreeNode;
	public final fun getTopLeft ()Ldev/shtanko/algorithms/leetcode/QuadTreeNode;
	public final fun getTopRight ()Ldev/shtanko/algorithms/leetcode/QuadTreeNode;
	public final fun getValue ()Z
	public fun hashCode ()I
	public final fun isLeaf ()Z
	public final fun setBottomLeft (Ldev/shtanko/algorithms/leetcode/QuadTreeNode;)V
	public final fun setBottomRight (Ldev/shtanko/algorithms/leetcode/QuadTreeNode;)V
	public final fun setLeaf (Z)V
	public final fun setTopLeft (Ldev/shtanko/algorithms/leetcode/QuadTreeNode;)V
	public final fun setTopRight (Ldev/shtanko/algorithms/leetcode/QuadTreeNode;)V
	public final fun setValue (Z)V
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/QueuesStack {
	public abstract fun empty ()Z
	public abstract fun pop ()I
	public abstract fun push (I)V
	public abstract fun top ()I
}

public final class dev/shtanko/algorithms/leetcode/RPNInPlace : dev/shtanko/algorithms/leetcode/EvalRPN {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/RPNInPlace$Companion;
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/RPNInPlace$Companion {
}

public final class dev/shtanko/algorithms/leetcode/RPNStack : dev/shtanko/algorithms/leetcode/EvalRPN {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/RainWaterStack : dev/shtanko/algorithms/leetcode/RainWaterStrategy {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/RainWaterStraightForward : dev/shtanko/algorithms/leetcode/RainWaterStrategy {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/RainWaterStrategy {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/RandomMiddleSortedArrayToBST : dev/shtanko/algorithms/leetcode/SortedArrayToBST {
	public fun <init> ()V
	public fun invoke ([I)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/RandomizedSet {
	public fun <init> ()V
	public final fun get ()Ljava/util/ArrayList;
	public final fun getRandom ()I
	public final fun insert (I)Z
	public final fun remove (I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/RangeAddition {
	public abstract fun invoke (I[[I)[I
}

public final class dev/shtanko/algorithms/leetcode/RangeAdditionBruteForce : dev/shtanko/algorithms/leetcode/RangeAddition {
	public fun <init> ()V
	public fun invoke (I[[I)[I
}

public final class dev/shtanko/algorithms/leetcode/RangeAdditionCaching : dev/shtanko/algorithms/leetcode/RangeAddition {
	public fun <init> ()V
	public fun invoke (I[[I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/RangeBitwiseAnd {
	public abstract fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/RangeBitwiseAndBitwise : dev/shtanko/algorithms/leetcode/RangeBitwiseAnd {
	public fun <init> ()V
	public fun invoke (II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/RangeSum {
	public abstract fun invoke ([IIII)I
}

public final class dev/shtanko/algorithms/leetcode/RangeSumBinarySearch : dev/shtanko/algorithms/leetcode/RangeSum {
	public fun <init> ()V
	public fun invoke ([IIII)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/RangeSumOfBinarySearchTree {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;II)I
}

public final class dev/shtanko/algorithms/leetcode/RangeSumOfBinarySearchTreeIterative : dev/shtanko/algorithms/leetcode/RangeSumOfBinarySearchTree {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;II)I
}

public final class dev/shtanko/algorithms/leetcode/RangeSumOfBinarySearchTreeRecursive : dev/shtanko/algorithms/leetcode/RangeSumOfBinarySearchTree {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;II)I
}

public final class dev/shtanko/algorithms/leetcode/RangeSumPrefixSum : dev/shtanko/algorithms/leetcode/RangeSum {
	public fun <init> ()V
	public fun invoke ([IIII)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/RangeSumQuery {
	public abstract fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/RangeSumQueryBruteForce : dev/shtanko/algorithms/leetcode/RangeSumQuery {
	public fun <init> ([I)V
	public final fun getNums ()[I
	public fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/RangeSumQueryCaching : dev/shtanko/algorithms/leetcode/RangeSumQuery {
	public fun <init> ([I)V
	public final fun getNums ()[I
	public fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/RangeSumQueryCachingOptimized : dev/shtanko/algorithms/leetcode/RangeSumQuery {
	public fun <init> ([I)V
	public final fun getNums ()[I
	public fun invoke (II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/RankTeams {
	public abstract fun invoke ([Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/RankTeamsImpl : dev/shtanko/algorithms/leetcode/RankTeams {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/RankTransformOfArray {
	public abstract fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/RankTransformOfArraySet : dev/shtanko/algorithms/leetcode/RankTransformOfArray {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/RankTransformOfArraySort : dev/shtanko/algorithms/leetcode/RankTransformOfArray {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/RankTransformOfArrayTree : dev/shtanko/algorithms/leetcode/RankTransformOfArray {
	public fun <init> ()V
	public final fun arrayRankTransform ([I)[I
	public fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/ReachNumberKt {
	public static final fun reachNumber (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/RearrangeArray {
	public abstract fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/RearrangeArrayTwoPointers : dev/shtanko/algorithms/leetcode/RearrangeArray {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ReconstructItinerary {
	public abstract fun invoke (Ljava/util/List;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/ReconstructItineraryIterative : dev/shtanko/algorithms/leetcode/ReconstructItinerary {
	public fun <init> ()V
	public fun invoke (Ljava/util/List;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/ReconstructItineraryRecursive : dev/shtanko/algorithms/leetcode/ReconstructItinerary {
	public fun <init> ()V
	public fun invoke (Ljava/util/List;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/ReconstructQueueKt {
	public static final fun reconstructQueue ([[I)[[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/RecoverFromPreorder {
	public abstract fun invoke (Ljava/lang/String;)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/RecoverFromPreorderIterative : dev/shtanko/algorithms/leetcode/RecoverFromPreorder {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/RecoverFromPreorderRecursive : dev/shtanko/algorithms/leetcode/RecoverFromPreorder {
	public fun <init> ()V
	public final fun getI ()I
	public fun invoke (Ljava/lang/String;)Ldev/shtanko/algorithms/leetcode/TreeNode;
	public final fun setI (I)V
}

public final class dev/shtanko/algorithms/leetcode/RecoverTreeKt {
	public static final fun recoverTree (Ldev/shtanko/algorithms/leetcode/TreeNode;)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/RectangleArea {
	public abstract fun computeArea (IIIIIIII)I
}

public final class dev/shtanko/algorithms/leetcode/RecursiveInorder : dev/shtanko/algorithms/leetcode/ClosestBST {
	public fun <init> ()V
	public fun closestValue (Ldev/shtanko/algorithms/leetcode/TreeNode;D)I
}

public final class dev/shtanko/algorithms/leetcode/RecursiveInorderTraversal : dev/shtanko/algorithms/leetcode/ValidateBinarySearchTree {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Z
}

public final class dev/shtanko/algorithms/leetcode/RecursiveRobber : dev/shtanko/algorithms/leetcode/AbstractRobber {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/RecursiveRobberMemo : dev/shtanko/algorithms/leetcode/AbstractRobber {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/RecursiveTraversalValidRange : dev/shtanko/algorithms/leetcode/ValidateBinarySearchTree {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/ReducingDishes {
	public abstract fun maxSatisfaction ([I)I
}

public final class dev/shtanko/algorithms/leetcode/ReducingDishesSimple : dev/shtanko/algorithms/leetcode/ReducingDishes {
	public fun <init> ()V
	public fun maxSatisfaction ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ReductionOperations {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/ReductionOperationsSortAndCount : dev/shtanko/algorithms/leetcode/ReductionOperations {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/ReformatKt {
	public static final fun reformat (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/RegularExpressionMatch {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/RegularExpressionMatchDPBottomUp : dev/shtanko/algorithms/leetcode/RegularExpressionMatch {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/RegularExpressionMatchDPTopDown : dev/shtanko/algorithms/leetcode/RegularExpressionMatch {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/RegularExpressionMatchDPTopDown$Result : java/lang/Enum {
	public static final field FALSE Ldev/shtanko/algorithms/leetcode/RegularExpressionMatchDPTopDown$Result;
	public static final field TRUE Ldev/shtanko/algorithms/leetcode/RegularExpressionMatchDPTopDown$Result;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Ldev/shtanko/algorithms/leetcode/RegularExpressionMatchDPTopDown$Result;
	public static fun values ()[Ldev/shtanko/algorithms/leetcode/RegularExpressionMatchDPTopDown$Result;
}

public final class dev/shtanko/algorithms/leetcode/RegularExpressionMatchRecursion : dev/shtanko/algorithms/leetcode/RegularExpressionMatch {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/RelativeRanks {
	public abstract fun invoke ([I)[Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/RelativeRanksReverse : dev/shtanko/algorithms/leetcode/RelativeRanks {
	public fun <init> ()V
	public fun invoke ([I)[Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/RelativeSortArray {
	public abstract fun invoke ([I[I)[I
}

public final class dev/shtanko/algorithms/leetcode/RelativeSortArrayArray : dev/shtanko/algorithms/leetcode/RelativeSortArray {
	public fun <init> ()V
	public fun invoke ([I[I)[I
}

public final class dev/shtanko/algorithms/leetcode/RelativeSortArrayCountingSort : dev/shtanko/algorithms/leetcode/RelativeSortArray {
	public fun <init> ()V
	public fun invoke ([I[I)[I
}

public final class dev/shtanko/algorithms/leetcode/RelativeSortArrayHashMap : dev/shtanko/algorithms/leetcode/RelativeSortArray {
	public fun <init> ()V
	public fun invoke ([I[I)[I
}

public final class dev/shtanko/algorithms/leetcode/RelativeSortArrayTreeMap : dev/shtanko/algorithms/leetcode/RelativeSortArray {
	public fun <init> ()V
	public fun invoke ([I[I)[I
}

public final class dev/shtanko/algorithms/leetcode/RelativeSortArrayTwoLoops : dev/shtanko/algorithms/leetcode/RelativeSortArray {
	public fun <init> ()V
	public fun invoke ([I[I)[I
}

public final class dev/shtanko/algorithms/leetcode/RemoveAllAdjacentDuplicatesArray : dev/shtanko/algorithms/leetcode/RemoveAllAdjacentDuplicatesStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/RemoveAllAdjacentDuplicatesSB : dev/shtanko/algorithms/leetcode/RemoveAllAdjacentDuplicatesStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/RemoveAllAdjacentDuplicatesStack : dev/shtanko/algorithms/leetcode/RemoveAllAdjacentDuplicatesStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/RemoveAllAdjacentDuplicatesStrategy {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/RemoveAllAdjacentDuplicatesStrategy2 {
	public abstract fun invoke (Ljava/lang/String;I)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/RemoveBoxes {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/RemoveBoxesBottomUp : dev/shtanko/algorithms/leetcode/RemoveBoxes {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/RemoveBoxesTopDown : dev/shtanko/algorithms/leetcode/RemoveBoxes {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/RemoveCoveredIntervals {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/RemoveCoveredIntervalsSort : dev/shtanko/algorithms/leetcode/RemoveCoveredIntervals {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/RemoveCoveredIntervalsSortLeft : dev/shtanko/algorithms/leetcode/RemoveCoveredIntervals {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/RemoveDuplicateLetters {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/RemoveDuplicateLettersSolution : dev/shtanko/algorithms/leetcode/RemoveDuplicateLetters {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/RemoveDuplicates {
	public abstract fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/RemoveDuplicates2 {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/RemoveDuplicates2BruteForce : dev/shtanko/algorithms/leetcode/RemoveAllAdjacentDuplicatesStrategy2 {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;I)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/RemoveDuplicates2Memoise : dev/shtanko/algorithms/leetcode/RemoveAllAdjacentDuplicatesStrategy2 {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;I)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/RemoveDuplicates2Solution : dev/shtanko/algorithms/leetcode/RemoveDuplicates2 {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/RemoveDuplicates2Stack : dev/shtanko/algorithms/leetcode/RemoveAllAdjacentDuplicatesStrategy2 {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;I)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/RemoveDuplicates2StackReconstruction : dev/shtanko/algorithms/leetcode/RemoveAllAdjacentDuplicatesStrategy2 {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;I)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/RemoveDuplicates2StackReconstruction$Pair {
	public fun <init> (IC)V
	public final fun getCh ()C
	public final fun getCnt ()I
	public final fun setCh (C)V
	public final fun setCnt (I)V
}

public final class dev/shtanko/algorithms/leetcode/RemoveDuplicates2TwoPointers : dev/shtanko/algorithms/leetcode/RemoveAllAdjacentDuplicatesStrategy2 {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;I)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/RemoveDuplicatesSolution : dev/shtanko/algorithms/leetcode/RemoveDuplicates {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/RemoveElement {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/RemoveElementTwoPointers : dev/shtanko/algorithms/leetcode/RemoveElement {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/RemoveElements {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;I)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/RemoveElementsIterative : dev/shtanko/algorithms/leetcode/RemoveElements {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;I)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/RemoveElementsRecursive : dev/shtanko/algorithms/leetcode/RemoveElements {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;I)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/RemoveInvalidParentheses {
	public abstract fun invoke (Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/RemoveInvalidParenthesesBacktracking : dev/shtanko/algorithms/leetcode/RemoveInvalidParentheses {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/RemoveInvalidParenthesesFast : dev/shtanko/algorithms/leetcode/RemoveInvalidParentheses {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/RemoveInvalidParenthesesLBacktracking : dev/shtanko/algorithms/leetcode/RemoveInvalidParentheses {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/RemoveKDigits {
	public abstract fun invoke (Ljava/lang/String;I)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/RemoveKDigitsStack : dev/shtanko/algorithms/leetcode/RemoveKDigits {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;I)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/RemoveLeafNodes {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;I)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/RemoveLeafNodesIterative : dev/shtanko/algorithms/leetcode/RemoveLeafNodes {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;I)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/RemoveLeafNodesRecursive : dev/shtanko/algorithms/leetcode/RemoveLeafNodes {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;I)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/RemoveNodesFromLinkedList {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/RemoveNodesFromLinkedListRecursive : dev/shtanko/algorithms/leetcode/RemoveNodesFromLinkedList {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/RemoveNodesFromLinkedListReverse : dev/shtanko/algorithms/leetcode/RemoveNodesFromLinkedList {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/RemoveNodesFromLinkedListStack : dev/shtanko/algorithms/leetcode/RemoveNodesFromLinkedList {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/RemoveNthFromEnd {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;I)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/RemoveNthFromEndOnePass : dev/shtanko/algorithms/leetcode/RemoveNthFromEnd {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;I)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/RemoveNthFromEndTwoPass : dev/shtanko/algorithms/leetcode/RemoveNthFromEnd {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;I)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/RemoveOutermostParenthesesKt {
	public static final fun removeOuterParentheses (Ljava/lang/String;)Ljava/lang/String;
	public static final fun removeOuterParentheses2 (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/RemoveStars {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/RemoveStarsDeque : dev/shtanko/algorithms/leetcode/RemoveStars {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/RemoveStarsStack : dev/shtanko/algorithms/leetcode/RemoveStars {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/RemoveStarsStackSimulation : dev/shtanko/algorithms/leetcode/RemoveStars {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/RemoveStones {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/RemoveStonesDFS : dev/shtanko/algorithms/leetcode/RemoveStones {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/RemoveStonesMap : dev/shtanko/algorithms/leetcode/RemoveStones {
	public fun <init> ()V
	public final fun find (I)I
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/RemoveSubfolders {
	public abstract fun invoke ([Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/RemoveSubfoldersTrie : dev/shtanko/algorithms/leetcode/RemoveSubfolders {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/RemoveVowels {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/RemoveVowelsBruteForce : dev/shtanko/algorithms/leetcode/RemoveVowels {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/RemoveVowelsFilter : dev/shtanko/algorithms/leetcode/RemoveVowels {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/RemoveVowelsReplace : dev/shtanko/algorithms/leetcode/RemoveVowels {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/RemoveVowelsStringBuffer : dev/shtanko/algorithms/leetcode/RemoveVowels {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/RemoveZeroSumSublists {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/RemoveZeroSumSublistsMap : dev/shtanko/algorithms/leetcode/RemoveZeroSumSublists {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/RemoveZeroSumSublistsTwoPasses : dev/shtanko/algorithms/leetcode/RemoveZeroSumSublists {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/ReorderList {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)V
}

public final class dev/shtanko/algorithms/leetcode/ReorderListImpl : dev/shtanko/algorithms/leetcode/ReorderList {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)V
}

public final class dev/shtanko/algorithms/leetcode/ReorganizeStringCounting : dev/shtanko/algorithms/leetcode/ReorganizeString {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ReorganizeStringPQ : dev/shtanko/algorithms/leetcode/ReorganizeString {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/RepeatLimitedString {
	public abstract fun invoke (Ljava/lang/String;I)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/RepeatLimitedString$Greedy : dev/shtanko/algorithms/leetcode/RepeatLimitedString {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/RepeatLimitedString$Greedy;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/lang/String;I)Ljava/lang/String;
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/RepeatLimitedString$HeapOptimizedGreedy : dev/shtanko/algorithms/leetcode/RepeatLimitedString {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/RepeatLimitedString$HeapOptimizedGreedy;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/lang/String;I)Ljava/lang/String;
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/RepeatLimitedString$TwoPointers : dev/shtanko/algorithms/leetcode/RepeatLimitedString {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/RepeatLimitedString$TwoPointers;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/lang/String;I)Ljava/lang/String;
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/RepeatedNTimes {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/RepeatedNTimesCompare : dev/shtanko/algorithms/leetcode/RepeatedNTimes {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/RepeatedNTimesCount : dev/shtanko/algorithms/leetcode/RepeatedNTimes {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/RepeatedStringMatch {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/RepeatedStringMatchSB : dev/shtanko/algorithms/leetcode/RepeatedStringMatch {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/RepeatedSubstringPattern {
	public abstract fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/RepeatedSubstringPatternConcat : dev/shtanko/algorithms/leetcode/RepeatedSubstringPattern {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/RepeatedSubstringPatternDivisors : dev/shtanko/algorithms/leetcode/RepeatedSubstringPattern {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/ReplaceElementsKt {
	public static final fun replaceElements ([I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ReplaceWords {
	public abstract fun invoke (Ljava/util/List;Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ReplaceWordsTrie : dev/shtanko/algorithms/leetcode/ReplaceWords {
	public fun <init> ()V
	public fun invoke (Ljava/util/List;Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/RestoreArrayFromAdjacentPairs {
	public abstract fun invoke ([[I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/RestoreArrayFromAdjacentPairsStrategy {
}

public final class dev/shtanko/algorithms/leetcode/RestoreArrayFromAdjacentPairsStrategy$DFS : dev/shtanko/algorithms/leetcode/RestoreArrayFromAdjacentPairs, dev/shtanko/algorithms/leetcode/RestoreArrayFromAdjacentPairsStrategy {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/RestoreArrayFromAdjacentPairsStrategy$DFS;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([[I)[I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/RestoreArrayFromAdjacentPairsStrategy$Iterative : dev/shtanko/algorithms/leetcode/RestoreArrayFromAdjacentPairs, dev/shtanko/algorithms/leetcode/RestoreArrayFromAdjacentPairsStrategy {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/RestoreArrayFromAdjacentPairsStrategy$Iterative;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([[I)[I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/RestoreIPAddresses {
	public abstract fun invoke (Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/RestoreIPAddressesDFS : dev/shtanko/algorithms/leetcode/RestoreIPAddresses {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/RestoreIPAddressesFast : dev/shtanko/algorithms/leetcode/RestoreIPAddresses {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/RestoreMatrix {
	public abstract fun invoke ([I[I)[[I
}

public final class dev/shtanko/algorithms/leetcode/RestoreMatrixGreedy : dev/shtanko/algorithms/leetcode/RestoreMatrix {
	public fun <init> ()V
	public fun invoke ([I[I)[[I
}

public final class dev/shtanko/algorithms/leetcode/RestoreStringKt {
	public static final fun restoreString (Lkotlin/Pair;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/RestoreTheArray {
	public abstract fun numberOfArrays (Ljava/lang/String;I)I
}

public final class dev/shtanko/algorithms/leetcode/RestoreTheArrayBottomUp : dev/shtanko/algorithms/leetcode/RestoreTheArray {
	public fun <init> ()V
	public fun numberOfArrays (Ljava/lang/String;I)I
}

public final class dev/shtanko/algorithms/leetcode/RestoreTheArrayDP : dev/shtanko/algorithms/leetcode/RestoreTheArray {
	public fun <init> ()V
	public fun numberOfArrays (Ljava/lang/String;I)I
}

public final class dev/shtanko/algorithms/leetcode/RestoreTheArrayMemoization : dev/shtanko/algorithms/leetcode/RestoreTheArray {
	public fun <init> ()V
	public fun numberOfArrays (Ljava/lang/String;I)I
}

public final class dev/shtanko/algorithms/leetcode/RestoreTheArrayTopDown : dev/shtanko/algorithms/leetcode/RestoreTheArray {
	public fun <init> ()V
	public fun numberOfArrays (Ljava/lang/String;I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/RevealCardsInIncreasingOrder {
	public abstract fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/RevealCardsInIncreasingOrderQueue : dev/shtanko/algorithms/leetcode/RevealCardsInIncreasingOrder {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/RevealCardsInIncreasingOrderTwoPointers : dev/shtanko/algorithms/leetcode/RevealCardsInIncreasingOrder {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/ReverseDecrement : dev/shtanko/algorithms/leetcode/HandOfStraights {
	public fun <init> ()V
	public fun invoke ([II)Z
}

public final class dev/shtanko/algorithms/leetcode/ReverseIntegerKt {
	public static final fun reverseInteger (I)I
}

public final class dev/shtanko/algorithms/leetcode/ReverseKt {
	public static final fun reverse ([C)V
}

public final class dev/shtanko/algorithms/leetcode/ReverseLeftToRight : dev/shtanko/algorithms/leetcode/RotateImage {
	public fun <init> ()V
	public fun rotate ([[I)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/ReverseLinkedList2 {
	public abstract fun reverseBetween (Ldev/shtanko/algorithms/leetcode/ListNode;II)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/ReverseLinkedList2Iterative : dev/shtanko/algorithms/leetcode/ReverseLinkedList2 {
	public fun <init> ()V
	public fun reverseBetween (Ldev/shtanko/algorithms/leetcode/ListNode;II)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/ReverseLinkedList2Recursive : dev/shtanko/algorithms/leetcode/ReverseLinkedList2 {
	public fun <init> ()V
	public fun reverseBetween (Ldev/shtanko/algorithms/leetcode/ListNode;II)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/ReverseLinkedListKt {
	public static final fun reverseListIterative (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
	public static final fun reverseListRecursive (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/ReverseOddLevelsOfBinaryTree {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/ReverseOddLevelsOfBinaryTree$BreadthFirstSearch : dev/shtanko/algorithms/leetcode/ReverseOddLevelsOfBinaryTree {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/ReverseOddLevelsOfBinaryTree$BreadthFirstSearch;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ldev/shtanko/algorithms/leetcode/TreeNode;
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ReverseOddLevelsOfBinaryTree$DepthFirstSearch : dev/shtanko/algorithms/leetcode/ReverseOddLevelsOfBinaryTree {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/ReverseOddLevelsOfBinaryTree$DepthFirstSearch;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ldev/shtanko/algorithms/leetcode/TreeNode;
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/ReverseOnlyLetters {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ReverseOnlyLettersStack : dev/shtanko/algorithms/leetcode/ReverseOnlyLetters {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ReversePairsKt {
	public static final fun reversePairsBIT ([I)I
	public static final fun reversePairsBST ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ReverseParentheses {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ReverseParenthesesBF : dev/shtanko/algorithms/leetcode/ReverseParentheses {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ReverseParenthesesSort : dev/shtanko/algorithms/leetcode/ReverseParentheses {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ReverseParenthesesStringBuilder : dev/shtanko/algorithms/leetcode/ReverseParentheses {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ReversePointer : dev/shtanko/algorithms/leetcode/ReverseOnlyLetters {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/ReversePrefix {
	public abstract fun invoke (Ljava/lang/String;C)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ReversePrefixSearchIndex : dev/shtanko/algorithms/leetcode/ReversePrefix {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;C)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ReversePrefixStack : dev/shtanko/algorithms/leetcode/ReversePrefix {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;C)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ReversePrefixTwoPointer : dev/shtanko/algorithms/leetcode/ReversePrefix {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;C)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/ReverseVowels {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ReverseVowelsSet : dev/shtanko/algorithms/leetcode/ReverseVowels {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ReverseVowelsTwoPointers : dev/shtanko/algorithms/leetcode/ReverseVowels {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/ReverseVowelsTwoPointers$Companion;
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ReverseVowelsTwoPointers$Companion {
}

public final class dev/shtanko/algorithms/leetcode/ReverseWords2Kt {
	public static final fun reverseWords2 ([C)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/ReverseWords3 {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ReverseWords3BruteForce : dev/shtanko/algorithms/leetcode/ReverseWords3 {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ReverseWords3BruteForce2 : dev/shtanko/algorithms/leetcode/ReverseWords3 {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ReverseWords3SB : dev/shtanko/algorithms/leetcode/ReverseWords3 {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ReverseWords3TwoPointers : dev/shtanko/algorithms/leetcode/ReverseWords3 {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/ReverseWordsInString {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ReverseWordsInString2 {
	public fun <init> ()V
	public final fun invoke ([C)V
	public final fun reverseEachWord ([C)V
}

public final class dev/shtanko/algorithms/leetcode/ReverseWordsInStringTwoPointers : dev/shtanko/algorithms/leetcode/ReverseWordsInString {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/RichestCustomerWealth {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/RichestCustomerWealth;
	public final fun maximumWealth ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/RightMiddleSortedArrayToBST : dev/shtanko/algorithms/leetcode/SortedArrayToBST {
	public fun <init> ()V
	public fun invoke ([I)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/RingsAndRods {
	public abstract fun countPoints (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/RingsAndRodsArray : dev/shtanko/algorithms/leetcode/RingsAndRods {
	public fun <init> ()V
	public fun countPoints (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/RingsAndRodsArray$Ring {
	public fun <init> ()V
	public final fun getHasBlue ()Z
	public final fun getHasGreen ()Z
	public final fun getHasRead ()Z
	public final fun setHasBlue (Z)V
	public final fun setHasGreen (Z)V
	public final fun setHasRead (Z)V
}

public final class dev/shtanko/algorithms/leetcode/RingsAndRodsBF : dev/shtanko/algorithms/leetcode/RingsAndRods {
	public fun <init> ()V
	public fun countPoints (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/RingsAndRodsBitmask : dev/shtanko/algorithms/leetcode/RingsAndRods {
	public fun <init> ()V
	public fun countPoints (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/RobotCollisions {
	public abstract fun invoke ([I[ILjava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/RobotCollisionsSort : dev/shtanko/algorithms/leetcode/RobotCollisions {
	public fun <init> ()V
	public fun invoke ([I[ILjava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/RollingHash : dev/shtanko/algorithms/leetcode/LongestCommonSubPath {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/RollingHash$Companion;
	public fun <init> ()V
	public fun invoke (I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/RollingHash$Companion {
}

public final class dev/shtanko/algorithms/leetcode/RotateArrayBruteForce : dev/shtanko/algorithms/leetcode/AbstractRotateArray {
	public fun <init> ()V
	public fun invoke ([II)V
}

public final class dev/shtanko/algorithms/leetcode/RotateArrayUsingCyclicReplacements : dev/shtanko/algorithms/leetcode/AbstractRotateArray {
	public fun <init> ()V
	public fun invoke ([II)V
}

public final class dev/shtanko/algorithms/leetcode/RotateArrayUsingExtraArray : dev/shtanko/algorithms/leetcode/AbstractRotateArray {
	public fun <init> ()V
	public fun invoke ([II)V
}

public final class dev/shtanko/algorithms/leetcode/RotateArrayUsingReverse : dev/shtanko/algorithms/leetcode/AbstractRotateArray {
	public fun <init> ()V
	public fun invoke ([II)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/RotateFunction {
	public abstract fun maxRotateFunction ([I)I
}

public final class dev/shtanko/algorithms/leetcode/RotateFunctionDP : dev/shtanko/algorithms/leetcode/RotateFunction {
	public fun <init> ()V
	public fun maxRotateFunction ([I)I
}

public final class dev/shtanko/algorithms/leetcode/RotateGroups : dev/shtanko/algorithms/leetcode/RotateImage {
	public fun <init> ()V
	public fun rotate ([[I)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/RotateImage {
	public abstract fun rotate ([[I)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/RotateList {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;I)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/RotateListBruteForce : dev/shtanko/algorithms/leetcode/RotateList {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;I)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/RotateListOptimized : dev/shtanko/algorithms/leetcode/RotateList {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;I)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/RotateString {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/RotateStringConcatenation : dev/shtanko/algorithms/leetcode/RotateString {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/RotateStringKMP : dev/shtanko/algorithms/leetcode/RotateString {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/RotatedDigits {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/RotatedDigitsBruteForce : dev/shtanko/algorithms/leetcode/RotatedDigits {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/RotatedDigitsBruteForce$Companion;
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/RotatedDigitsBruteForce$Companion {
}

public final class dev/shtanko/algorithms/leetcode/RotatedDigitsDP : dev/shtanko/algorithms/leetcode/RotatedDigits {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/RotatingTheBox {
	public abstract fun invoke ([[C)[[C
}

public final class dev/shtanko/algorithms/leetcode/RotatingTheBoxCombineRotation : dev/shtanko/algorithms/leetcode/RotatingTheBox {
	public fun <init> ()V
	public fun invoke ([[C)[[C
}

public abstract interface class dev/shtanko/algorithms/leetcode/RunningSum {
	public abstract fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/RunningSumNaive : dev/shtanko/algorithms/leetcode/RunningSum {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/SCEBinarySearch : dev/shtanko/algorithms/leetcode/SmallestCommonElement {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/SCEBinarySearchImproved : dev/shtanko/algorithms/leetcode/SmallestCommonElement {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/SCECountElements : dev/shtanko/algorithms/leetcode/SmallestCommonElement {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/SCECountElementsImproved : dev/shtanko/algorithms/leetcode/SmallestCommonElement {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/SCERowPositions : dev/shtanko/algorithms/leetcode/SmallestCommonElement {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/SCERowPositionsImproved : dev/shtanko/algorithms/leetcode/SmallestCommonElement {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/SPNumType : java/lang/Enum {
	public static final field EVEN Ldev/shtanko/algorithms/leetcode/SPNumType;
	public static final field ODD Ldev/shtanko/algorithms/leetcode/SPNumType;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public final fun getValue ()I
	public static fun valueOf (Ljava/lang/String;)Ldev/shtanko/algorithms/leetcode/SPNumType;
	public static fun values ()[Ldev/shtanko/algorithms/leetcode/SPNumType;
}

public abstract interface class dev/shtanko/algorithms/leetcode/SameTree {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;Ldev/shtanko/algorithms/leetcode/TreeNode;)Z
}

public final class dev/shtanko/algorithms/leetcode/SameTreeRecursive : dev/shtanko/algorithms/leetcode/SameTree {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;Ldev/shtanko/algorithms/leetcode/TreeNode;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/ScheduleCourse3 {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/ScheduleCourse3ExtraList : dev/shtanko/algorithms/leetcode/ScheduleCourse3 {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/ScheduleCourse3Iterative : dev/shtanko/algorithms/leetcode/ScheduleCourse3 {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/ScheduleCourse3OptimizedIterative : dev/shtanko/algorithms/leetcode/ScheduleCourse3 {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/ScheduleCourse3PriorityQueue : dev/shtanko/algorithms/leetcode/ScheduleCourse3 {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/ScheduleCourse3Recursion : dev/shtanko/algorithms/leetcode/ScheduleCourse3 {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ScoreAfterFlippingMatrix {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/ScoreAfterFlippingMatrixWithModifying : dev/shtanko/algorithms/leetcode/ScoreAfterFlippingMatrix {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/ScoreAfterFlippingMatrixWithoutModifying : dev/shtanko/algorithms/leetcode/ScoreAfterFlippingMatrix {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ScoreOfString {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/ScoreOfStringIteration : dev/shtanko/algorithms/leetcode/ScoreOfString {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ScrambleString {
	public abstract fun isScramble (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/ScrambleStringDP : dev/shtanko/algorithms/leetcode/ScrambleString {
	public fun <init> ()V
	public fun isScramble (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/SearchBSTKt {
	public static final fun searchBST (Ldev/shtanko/algorithms/leetcode/TreeNode;I)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/SearchInRotatedSortedArray {
	public abstract fun search ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SearchInRotatedSortedArray2 {
	public abstract fun search ([II)Z
}

public final class dev/shtanko/algorithms/leetcode/SearchInRotatedSortedArray2BS : dev/shtanko/algorithms/leetcode/SearchInRotatedSortedArray2 {
	public fun <init> ()V
	public fun search ([II)Z
}

public final class dev/shtanko/algorithms/leetcode/SearchInRotatedSortedArraySearch : dev/shtanko/algorithms/leetcode/SearchInRotatedSortedArray {
	public fun <init> ()V
	public fun search ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SearchInsertPosition {
	public abstract fun searchInsert ([II)I
}

public final class dev/shtanko/algorithms/leetcode/SearchInsertPositionFast : dev/shtanko/algorithms/leetcode/SearchInsertPosition {
	public fun <init> ()V
	public fun searchInsert ([II)I
}

public final class dev/shtanko/algorithms/leetcode/SearchInsertPositionIterative : dev/shtanko/algorithms/leetcode/SearchInsertPosition {
	public fun <init> ()V
	public fun searchInsert ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SearchMatrix {
	public abstract fun invoke ([[II)Z
}

public final class dev/shtanko/algorithms/leetcode/SearchMatrixBS : dev/shtanko/algorithms/leetcode/SearchMatrix {
	public fun <init> ()V
	public fun invoke ([[II)Z
}

public final class dev/shtanko/algorithms/leetcode/SearchRangeKt {
	public static final fun searchRange ([II)[I
}

public final class dev/shtanko/algorithms/leetcode/SearchSuggestionsBinarySearch : dev/shtanko/algorithms/leetcode/SearchSuggestionsSystem {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/SearchSuggestionsSystem {
	public abstract fun invoke ([Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/SearchSuggestionsTrie : dev/shtanko/algorithms/leetcode/SearchSuggestionsSystem {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/SecondMinimum {
	public abstract fun invoke (I[[III)I
}

public final class dev/shtanko/algorithms/leetcode/SecondMinimumBFS : dev/shtanko/algorithms/leetcode/SecondMinimum {
	public fun <init> ()V
	public fun invoke (I[[III)I
}

public final class dev/shtanko/algorithms/leetcode/SecondMinimumDijkstra : dev/shtanko/algorithms/leetcode/SecondMinimum {
	public fun <init> ()V
	public fun invoke (I[[III)I
}

public final class dev/shtanko/algorithms/leetcode/SelfDividingNumbersKt {
	public static final fun selfDividingNumbers (Lkotlin/Pair;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/SentenceSimilarity3 {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/SentenceSimilarity3Deque : dev/shtanko/algorithms/leetcode/SentenceSimilarity3 {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/SeparateBlackAndWhiteBalls {
	public abstract fun invoke (Ljava/lang/String;)J
}

public final class dev/shtanko/algorithms/leetcode/SeparateBlackAndWhiteBallsCounter : dev/shtanko/algorithms/leetcode/SeparateBlackAndWhiteBalls {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)J
}

public final class dev/shtanko/algorithms/leetcode/SeparateBlackAndWhiteBallsTwoPointer : dev/shtanko/algorithms/leetcode/SeparateBlackAndWhiteBalls {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)J
}

public abstract interface class dev/shtanko/algorithms/leetcode/SequentialDigits {
	public abstract fun invoke (II)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/SequentialDigitsIterative : dev/shtanko/algorithms/leetcode/SequentialDigits {
	public fun <init> ()V
	public fun invoke (II)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/SetMismatch {
	public abstract fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/SetMismatchBruteForce : dev/shtanko/algorithms/leetcode/SetMismatch {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/SetMismatchMap : dev/shtanko/algorithms/leetcode/SetMismatch {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/SetMismatchSet : dev/shtanko/algorithms/leetcode/SetMismatch {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ShipWithinDays {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/ShipWithinDaysBS : dev/shtanko/algorithms/leetcode/ShipWithinDays {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ShoppingOffers {
	public abstract fun invoke (Ljava/util/List;Ljava/util/List;Ljava/util/List;)I
}

public final class dev/shtanko/algorithms/leetcode/ShoppingOffersRecursive : dev/shtanko/algorithms/leetcode/ShoppingOffers {
	public fun <init> ()V
	public fun invoke (Ljava/util/List;Ljava/util/List;Ljava/util/List;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ShortestAlternatingPaths {
	public abstract fun invoke (I[[I[[I)[I
}

public final class dev/shtanko/algorithms/leetcode/ShortestAlternatingPathsBFS : dev/shtanko/algorithms/leetcode/ShortestAlternatingPaths {
	public fun <init> ()V
	public fun invoke (I[[I[[I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ShortestBridge {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/ShortestBridgeDFS : dev/shtanko/algorithms/leetcode/ShortestBridge {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/ShortestBridgeDP : dev/shtanko/algorithms/leetcode/ShortestBridge {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ShortestDistanceAfterQueries {
	public abstract fun invoke (I[[I)[I
}

public final class dev/shtanko/algorithms/leetcode/ShortestDistanceAfterQueriesBFS : dev/shtanko/algorithms/leetcode/ShortestDistanceAfterQueries {
	public fun <init> ()V
	public fun invoke (I[[I)[I
}

public final class dev/shtanko/algorithms/leetcode/ShortestDistanceAfterQueriesBottomUp : dev/shtanko/algorithms/leetcode/ShortestDistanceAfterQueries {
	public fun <init> ()V
	public fun invoke (I[[I)[I
}

public final class dev/shtanko/algorithms/leetcode/ShortestDistanceAfterQueriesTopDown : dev/shtanko/algorithms/leetcode/ShortestDistanceAfterQueries {
	public fun <init> ()V
	public fun invoke (I[[I)[I
}

public final class dev/shtanko/algorithms/leetcode/ShortestPalindromeBruteForce : dev/shtanko/algorithms/leetcode/ShortestPalindromeStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ShortestPalindromeMP : dev/shtanko/algorithms/leetcode/ShortestPalindromeStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/ShortestPalindromeStrategy {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ShortestPalindromeTwoPointers : dev/shtanko/algorithms/leetcode/ShortestPalindromeStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/ShortestPath {
	public abstract fun invoke ([[II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ShortestPathAllKeys {
	public abstract fun invoke ([Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/ShortestPathAllKeysBFS : dev/shtanko/algorithms/leetcode/ShortestPathAllKeys {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/ShortestPathBFS : dev/shtanko/algorithms/leetcode/ShortestPath {
	public fun <init> ()V
	public fun invoke ([[II)I
}

public final class dev/shtanko/algorithms/leetcode/ShortestPathBFS2 : dev/shtanko/algorithms/leetcode/ShortestPath {
	public fun <init> ()V
	public fun invoke ([[II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ShortestPathInBinaryMatrix {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/ShortestPathInBinaryMatrixBFS : dev/shtanko/algorithms/leetcode/ShortestPathInBinaryMatrix {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ShortestPathLength {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/ShortestPathLengthBFS : dev/shtanko/algorithms/leetcode/ShortestPathLength {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/ShortestSubarrayKt {
	public static final fun findShortestSubarray ([II)I
}

public final class dev/shtanko/algorithms/leetcode/ShortestSuperstring {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/ShortestSuperstring;
	public final fun invoke ([Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ShortestWayToFormString {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/ShortestWayToFormString;
	public final fun twoPointers (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/ShortestWordDistance2 {
	public fun <init> ([Ljava/lang/String;)V
	public final fun shortest (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/ShortestWordDistanceBruteForce : dev/shtanko/algorithms/leetcode/ShortestWordDistanceStrategy {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/ShortestWordDistanceOnePass : dev/shtanko/algorithms/leetcode/ShortestWordDistanceStrategy {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ShortestWordDistanceStrategy {
	public abstract fun invoke ([Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/ShuffleKt {
	public static final fun shuffle ([II)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SimilarStringGroups {
	public abstract fun invoke ([Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/SimilarStringGroupsBFS : dev/shtanko/algorithms/leetcode/SimilarStringGroups {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/SimilarStringGroupsDFS : dev/shtanko/algorithms/leetcode/SimilarStringGroups {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/SimilarStringGroupsDSU : dev/shtanko/algorithms/leetcode/SimilarStringGroups {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/SimilarStringGroupsDSU$DSU {
	public fun <init> (I)V
	public final fun find (I)I
	public final fun getParent ()[I
	public final fun setParent ([I)V
	public final fun union (II)V
}

public final class dev/shtanko/algorithms/leetcode/SimilarStringGroupsUnionFind : dev/shtanko/algorithms/leetcode/SimilarStringGroups {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/SimpleCountNegatives : dev/shtanko/algorithms/leetcode/AbstractCountNegativesStrategy {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SimplifyPath {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/SimplifyPathStack : dev/shtanko/algorithms/leetcode/SimplifyPath {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/SingleElementInSortedArray {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/SingleElementInSortedArrayBS : dev/shtanko/algorithms/leetcode/SingleElementInSortedArray {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SingleNumber2 {
	public abstract fun singleNumber ([I)I
}

public final class dev/shtanko/algorithms/leetcode/SingleNumber2Bitwise : dev/shtanko/algorithms/leetcode/SingleNumber2 {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/SingleNumber2Bitwise$Companion;
	public fun <init> ()V
	public fun singleNumber ([I)I
}

public final class dev/shtanko/algorithms/leetcode/SingleNumber2Bitwise$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/SingleNumber3 {
	public abstract fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/SingleNumber3Bitwise : dev/shtanko/algorithms/leetcode/SingleNumber3 {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/SingleNumberKt {
	public static final fun singleNumber ([I)I
	public static final fun singleNumberUsingSet ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SingleRowKeyboard {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/SingleRowKeyboardNaive : dev/shtanko/algorithms/leetcode/SingleRowKeyboard {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SingleThreadedCPU {
	public abstract fun getOrder ([[I)[I
}

public final class dev/shtanko/algorithms/leetcode/SingleThreadedCPUQueue : dev/shtanko/algorithms/leetcode/SingleThreadedCPU {
	public fun <init> ()V
	public fun getOrder ([[I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SlidingPuzzle {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/SlidingPuzzleBFS : dev/shtanko/algorithms/leetcode/SlidingPuzzle {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/SlidingPuzzleDFS : dev/shtanko/algorithms/leetcode/SlidingPuzzle {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SlidingWindowMax {
	public abstract fun invoke ([II)[I
}

public final class dev/shtanko/algorithms/leetcode/SmallerNumbersThanCurrentKt {
	public static final fun smallerNumbersThanCurrent ([I)[I
	public static final fun smallerNumbersThanCurrentNaive ([I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SmallestChair {
	public abstract fun invoke ([[II)I
}

public final class dev/shtanko/algorithms/leetcode/SmallestChairSet : dev/shtanko/algorithms/leetcode/SmallestChair {
	public fun <init> ()V
	public fun invoke ([[II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SmallestCommonElement {
	public abstract fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SmallestDistancePair {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/SmallestDistancePairBS : dev/shtanko/algorithms/leetcode/SmallestDistancePair {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/SmallestDistancePairBucketSort : dev/shtanko/algorithms/leetcode/SmallestDistancePair {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/SmallestDivisorBinarySearch : dev/shtanko/algorithms/leetcode/SmallestDivisorStrategy {
	public fun <init> ()V
	public fun computeSum ([II)J
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/SmallestDivisorMath : dev/shtanko/algorithms/leetcode/SmallestDivisorStrategy {
	public fun <init> ()V
	public fun computeSum ([II)J
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SmallestDivisorStrategy {
	public fun computeSum ([II)J
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/SmallestDivisorStrategy$DefaultImpls {
	public static fun computeSum (Ldev/shtanko/algorithms/leetcode/SmallestDivisorStrategy;[II)J
}

public abstract interface class dev/shtanko/algorithms/leetcode/SmallestEquivalentString {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/SmallestEquivalentStringUnion : dev/shtanko/algorithms/leetcode/SmallestEquivalentString {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/SmallestInfiniteSet {
	public abstract fun addBack (I)V
	public abstract fun popSmallest ()I
}

public final class dev/shtanko/algorithms/leetcode/SmallestInfiniteSetHash : dev/shtanko/algorithms/leetcode/SmallestInfiniteSet {
	public fun <init> ()V
	public fun addBack (I)V
	public fun popSmallest ()I
}

public final class dev/shtanko/algorithms/leetcode/SmallestInfiniteSetSortedSet : dev/shtanko/algorithms/leetcode/SmallestInfiniteSet {
	public fun <init> ()V
	public fun addBack (I)V
	public fun popSmallest ()I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SmallestMissingValueSubtree {
	public abstract fun invoke ([I[I)[I
}

public final class dev/shtanko/algorithms/leetcode/SmallestMissingValueSubtreeStrict : dev/shtanko/algorithms/leetcode/SmallestMissingValueSubtree {
	public field arr [I
	public fun <init> ()V
	public final fun getArr ()[I
	public final fun getM ()Ljava/util/HashMap;
	public final fun getMiss ()I
	public final fun getSet ()Ljava/util/HashSet;
	public fun invoke ([I[I)[I
	public final fun setArr ([I)V
	public final fun setM (Ljava/util/HashMap;)V
	public final fun setMiss (I)V
	public final fun setSet (Ljava/util/HashSet;)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/SmallestRangeFinder {
	public abstract fun invoke (Ljava/util/List;)[I
}

public final class dev/shtanko/algorithms/leetcode/SmallestRangeFinderTwoPointer : dev/shtanko/algorithms/leetcode/SmallestRangeFinder {
	public fun <init> ()V
	public fun invoke (Ljava/util/List;)[I
}

public final class dev/shtanko/algorithms/leetcode/SmallestRangeIKt {
	public static final fun smallestRangeI (Lkotlin/Pair;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SmallestStrStartingFromLeaf {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/SmallestStrStartingFromLeafBFS : dev/shtanko/algorithms/leetcode/SmallestStrStartingFromLeaf {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/SmallestStrStartingFromLeafDFS : dev/shtanko/algorithms/leetcode/SmallestStrStartingFromLeaf {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/SmallestSufficientTeam {
	public abstract fun invoke ([Ljava/lang/String;Ljava/util/List;)[I
}

public final class dev/shtanko/algorithms/leetcode/SmallestSufficientTeamDFS : dev/shtanko/algorithms/leetcode/SmallestSufficientTeam {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;Ljava/util/List;)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SnakesAndLadders {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/SnakesAndLaddersBFS : dev/shtanko/algorithms/leetcode/SnakesAndLadders {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SnapshotArray {
	public abstract fun get (II)I
	public abstract fun set (II)V
	public abstract fun snap ()I
}

public final class dev/shtanko/algorithms/leetcode/SnapshotArrayImpl : dev/shtanko/algorithms/leetcode/SnapshotArray {
	public fun <init> (I)V
	public fun get (II)I
	public fun set (II)V
	public fun snap ()I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SortArrayByFrequency {
	public abstract fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/SortArrayByFrequencyImpl : dev/shtanko/algorithms/leetcode/SortArrayByFrequency {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SortArrayByParity {
	public abstract fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/SortArrayByParityInPlace : dev/shtanko/algorithms/leetcode/SortArrayByParity {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/SortArrayByParityKotlin : dev/shtanko/algorithms/leetcode/SortArrayByParity {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/SortArrayByParityStream : dev/shtanko/algorithms/leetcode/SortArrayByParity {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/SortArrayByParityTwoPass : dev/shtanko/algorithms/leetcode/SortArrayByParity {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SortByBits {
	public abstract fun invoke ([I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SortByBitsStrategy {
}

public final class dev/shtanko/algorithms/leetcode/SortByBitsStrategy$BitManipulation : dev/shtanko/algorithms/leetcode/SortByBits, dev/shtanko/algorithms/leetcode/SortByBitsStrategy {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/SortByBitsStrategy$BitManipulation;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I)[I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/SortByBitsStrategy$BrianKerninghansAlgorithm : dev/shtanko/algorithms/leetcode/SortByBits, dev/shtanko/algorithms/leetcode/SortByBitsStrategy {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/SortByBitsStrategy$BrianKerninghansAlgorithm;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I)[I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/SortByBitsStrategy$ComparatorSolution : dev/shtanko/algorithms/leetcode/SortByBits, dev/shtanko/algorithms/leetcode/SortByBitsStrategy {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/SortByBitsStrategy$ComparatorSolution;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I)[I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/SortByParityHeads : dev/shtanko/algorithms/leetcode/AbstractSortByParity {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/SortByParityStraightForward : dev/shtanko/algorithms/leetcode/AbstractSortByParity {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/SortByParityTwoPass : dev/shtanko/algorithms/leetcode/AbstractSortByParity {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SortColors {
	public abstract fun invoke ([I)V
}

public final class dev/shtanko/algorithms/leetcode/SortColorsOnePass : dev/shtanko/algorithms/leetcode/SortColors {
	public fun <init> ()V
	public fun invoke ([I)V
}

public final class dev/shtanko/algorithms/leetcode/SortColorsTwoPass : dev/shtanko/algorithms/leetcode/SortColors {
	public fun <init> ()V
	public fun invoke ([I)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/SortIntegersByThePowerValue {
	public abstract fun getKth (III)I
}

public final class dev/shtanko/algorithms/leetcode/SortIntegersByThePowerValueDP : dev/shtanko/algorithms/leetcode/SortIntegersByThePowerValue {
	public fun <init> ()V
	public fun getKth (III)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SortItems {
	public abstract fun invoke (II[ILjava/util/List;)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SortJumbledNumbers {
	public abstract fun invoke ([I[I)[I
}

public final class dev/shtanko/algorithms/leetcode/SortJumbledNumbersNoSort : dev/shtanko/algorithms/leetcode/SortJumbledNumbers {
	public fun <init> ()V
	public fun invoke ([I[I)[I
}

public final class dev/shtanko/algorithms/leetcode/SortJumbledNumbersSorting : dev/shtanko/algorithms/leetcode/SortJumbledNumbers {
	public fun <init> ()V
	public fun invoke ([I[I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SortListStrategy {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/SortThePeople {
	public abstract fun invoke ([Ljava/lang/String;[I)[Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/SortThePeopleMap : dev/shtanko/algorithms/leetcode/SortThePeople {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;[I)[Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/SortThePeopleMergeSort : dev/shtanko/algorithms/leetcode/SortThePeople {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;[I)[Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/SortThePeopleQuickSort : dev/shtanko/algorithms/leetcode/SortThePeople {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;[I)[Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/SortThePeopleSortPermutation : dev/shtanko/algorithms/leetcode/SortThePeople {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;[I)[Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/SortThePeopleTreeMap : dev/shtanko/algorithms/leetcode/SortThePeople {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;[I)[Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/SortThePeopleZip : dev/shtanko/algorithms/leetcode/SortThePeople {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;[I)[Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/SortVowels {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/SortVowelsStrategy {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/SortVowelsStrategy$Companion;
}

public final class dev/shtanko/algorithms/leetcode/SortVowelsStrategy$Companion {
}

public final class dev/shtanko/algorithms/leetcode/SortVowelsStrategy$CountingSort : dev/shtanko/algorithms/leetcode/SortVowels, dev/shtanko/algorithms/leetcode/SortVowelsStrategy {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/SortVowelsStrategy$CountingSort;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/SortVowelsStrategy$Sorting : dev/shtanko/algorithms/leetcode/SortVowels, dev/shtanko/algorithms/leetcode/SortVowelsStrategy {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/SortVowelsStrategy$Sorting;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/SortedArrayToBST {
	public abstract fun invoke ([I)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/SortedArrayToBSTPreorder : dev/shtanko/algorithms/leetcode/SortedArrayToBST {
	public fun <init> ()V
	public fun invoke ([I)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/SortedListToBST {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/SortedListToBSTArray : dev/shtanko/algorithms/leetcode/SortedListToBST {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/SortedListToBSTInorder : dev/shtanko/algorithms/leetcode/SortedListToBST {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/SortedListToBSTRecursion : dev/shtanko/algorithms/leetcode/SortedListToBST {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/SortedSquares {
	public abstract fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/SortedSquaresTwoPointers : dev/shtanko/algorithms/leetcode/SortedSquares {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/SortingSentenceKt {
	public static final fun sortSentence (Ljava/lang/String;)Ljava/lang/String;
	public static final fun sortSentenceTree (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/SoupServings {
	public abstract fun invoke (I)D
}

public final class dev/shtanko/algorithms/leetcode/SoupServingsBottomUp : dev/shtanko/algorithms/leetcode/SoupServings {
	public fun <init> ()V
	public fun invoke (I)D
}

public final class dev/shtanko/algorithms/leetcode/SoupServingsTopDown : dev/shtanko/algorithms/leetcode/SoupServings {
	public fun <init> ()V
	public fun invoke (I)D
}

public abstract interface class dev/shtanko/algorithms/leetcode/SparseVector {
	public abstract fun dotProduct (Ljava/lang/Object;)I
}

public final class dev/shtanko/algorithms/leetcode/SparseVectorArray : dev/shtanko/algorithms/leetcode/SparseVector {
	public fun <init> ([I)V
	public fun dotProduct (Ldev/shtanko/algorithms/leetcode/SparseVectorArray;)I
	public synthetic fun dotProduct (Ljava/lang/Object;)I
	public final fun getArray ()[I
}

public final class dev/shtanko/algorithms/leetcode/SparseVectorHashSet : dev/shtanko/algorithms/leetcode/SparseVector {
	public fun <init> ([I)V
	public fun dotProduct (Ldev/shtanko/algorithms/leetcode/SparseVectorHashSet;)I
	public synthetic fun dotProduct (Ljava/lang/Object;)I
	public final fun getArray ()[I
}

public final class dev/shtanko/algorithms/leetcode/SparseVectorPairs : dev/shtanko/algorithms/leetcode/SparseVector {
	public fun <init> ([I)V
	public fun dotProduct (Ldev/shtanko/algorithms/leetcode/SparseVectorPairs;)I
	public synthetic fun dotProduct (Ljava/lang/Object;)I
	public final fun getArray ()[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SpecialArray {
	public abstract fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SpecialArray2 {
	public abstract fun invoke ([I[[I)[Z
}

public final class dev/shtanko/algorithms/leetcode/SpecialArray2$BinarySearch : dev/shtanko/algorithms/leetcode/SpecialArray2 {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/SpecialArray2$BinarySearch;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I[[I)[Z
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/SpecialArray2$PrefixSum : dev/shtanko/algorithms/leetcode/SpecialArray2 {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/SpecialArray2$PrefixSum;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I[[I)[Z
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/SpecialArray2$SlidingWindow : dev/shtanko/algorithms/leetcode/SpecialArray2 {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/SpecialArray2$SlidingWindow;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I[[I)[Z
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/SpecialArrayPrefixSum : dev/shtanko/algorithms/leetcode/SpecialArray {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/SpecialArraySort : dev/shtanko/algorithms/leetcode/SpecialArray {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SpecialPositionsInBinaryMatrix {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/SpecialPositionsInBinaryMatrixBF : dev/shtanko/algorithms/leetcode/SpecialPositionsInBinaryMatrix {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/SpecialPositionsInBinaryMatrixPrecompute : dev/shtanko/algorithms/leetcode/SpecialPositionsInBinaryMatrix {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SpiralMatrix2 {
	public abstract fun generateMatrix (I)[[I
}

public final class dev/shtanko/algorithms/leetcode/SpiralMatrix2Optimized : dev/shtanko/algorithms/leetcode/SpiralMatrix2 {
	public fun <init> ()V
	public fun generateMatrix (I)[[I
}

public final class dev/shtanko/algorithms/leetcode/SpiralMatrix2Traverse : dev/shtanko/algorithms/leetcode/SpiralMatrix2 {
	public fun <init> ()V
	public fun generateMatrix (I)[[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SpiralMatrix3 {
	public abstract fun invoke (IIII)[[I
}

public final class dev/shtanko/algorithms/leetcode/SpiralMatrix3Simulation : dev/shtanko/algorithms/leetcode/SpiralMatrix3 {
	public fun <init> ()V
	public fun invoke (IIII)[[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SpiralMatrix4 {
	public abstract fun invoke (IILdev/shtanko/algorithms/leetcode/ListNode;)[[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SpiralOrder {
	public abstract fun invoke ([[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/SpiralOrderSolution : dev/shtanko/algorithms/leetcode/SpiralOrder {
	public fun <init> ()V
	public fun invoke ([[I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/SplitArrayLargestSum {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/SplitArrayLargestSumBinarySearch : dev/shtanko/algorithms/leetcode/SplitArrayLargestSum {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/SplitArrayLargestSumDP : dev/shtanko/algorithms/leetcode/SplitArrayLargestSum {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/SplitArrayLargestSumGreedy : dev/shtanko/algorithms/leetcode/SplitArrayLargestSum {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/SplitArrayLargestSumMaxSum : dev/shtanko/algorithms/leetcode/SplitArrayLargestSum {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/SplitArraySameAverageKt {
	public static final fun splitArraySameAverage ([I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/SplitIntoFibonacci {
	public abstract fun invoke (Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/SplitIntoFibonacciBacktracking : dev/shtanko/algorithms/leetcode/SplitIntoFibonacci {
	public fun <init> ()V
	public final fun helper (Ljava/lang/String;Ljava/util/List;I)Z
	public fun invoke (Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/SplitIntoFibonacciBruteForce : dev/shtanko/algorithms/leetcode/SplitIntoFibonacci {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/SplitLinkedListInParts {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/NullableListNode;I)[Ldev/shtanko/algorithms/leetcode/NullableListNode;
}

public final class dev/shtanko/algorithms/leetcode/SplitLinkedListInPartsCopy : dev/shtanko/algorithms/leetcode/SplitLinkedListInParts {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/NullableListNode;I)[Ldev/shtanko/algorithms/leetcode/NullableListNode;
}

public final class dev/shtanko/algorithms/leetcode/SplitLinkedListInPartsInput : dev/shtanko/algorithms/leetcode/SplitLinkedListInParts {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/NullableListNode;I)[Ldev/shtanko/algorithms/leetcode/NullableListNode;
}

public final class dev/shtanko/algorithms/leetcode/SqrtBS : dev/shtanko/algorithms/leetcode/SqrtStrategy {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/SqrtBruteForce : dev/shtanko/algorithms/leetcode/SqrtStrategy {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/SqrtNewton : dev/shtanko/algorithms/leetcode/SqrtStrategy {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SqrtStrategy {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/StackAndNoStringReversal : dev/shtanko/algorithms/leetcode/CalculationStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/StackAndStringReversal : dev/shtanko/algorithms/leetcode/CalculationStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/StackOneQueue : dev/shtanko/algorithms/leetcode/QueuesStack {
	public fun <init> ()V
	public fun empty ()Z
	public fun pop ()I
	public fun push (I)V
	public fun top ()I
}

public final class dev/shtanko/algorithms/leetcode/StackTwoQueues : dev/shtanko/algorithms/leetcode/QueuesStack {
	public fun <init> ()V
	public fun empty ()Z
	public final fun getTop ()I
	public fun pop ()I
	public fun push (I)V
	public final fun setTop (I)V
	public fun top ()I
}

public final class dev/shtanko/algorithms/leetcode/StackTwoQueues2 : dev/shtanko/algorithms/leetcode/QueuesStack {
	public fun <init> ()V
	public fun empty ()Z
	public fun pop ()I
	public fun push (I)V
	public fun top ()I
}

public final class dev/shtanko/algorithms/leetcode/StampSequencer {
	public fun <init> ()V
	public final fun getStampingSequence (Ljava/lang/String;Ljava/lang/String;)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SteppingNumbers {
	public abstract fun invoke (II)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/SteppingNumbersBFS : dev/shtanko/algorithms/leetcode/SteppingNumbers {
	public fun <init> ()V
	public fun invoke (II)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/StickersToSpellWord {
	public abstract fun invoke ([Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/StickersToSpellWordDP : dev/shtanko/algorithms/leetcode/StickersToSpellWord {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/StockSpanner {
	public fun <init> ()V
	public final fun getStack ()Ljava/util/Stack;
	public final fun next (I)I
	public final fun setStack (Ljava/util/Stack;)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/StoneGame2 {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/StoneGame2DP : dev/shtanko/algorithms/leetcode/StoneGame2 {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/StoneGame2WithMemoization : dev/shtanko/algorithms/leetcode/StoneGame2 {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/StoneGame2WithMemoization$Companion;
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/StoneGame2WithMemoization$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/StoneGame3 {
	public abstract fun invoke ([I)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/StoneGame3BottomUp : dev/shtanko/algorithms/leetcode/StoneGame3 {
	public fun <init> ()V
	public fun invoke ([I)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/StoneGame3Optimized : dev/shtanko/algorithms/leetcode/StoneGame3 {
	public fun <init> ()V
	public fun invoke ([I)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/StoneGame3TopDown : dev/shtanko/algorithms/leetcode/StoneGame3 {
	public fun <init> ()V
	public fun invoke ([I)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/StrStr {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/StrStr;
	public final fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/StrangePrinter {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/StrangePrinterBottomUp : dev/shtanko/algorithms/leetcode/StrangePrinter {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/StrangePrinterTopDown : dev/shtanko/algorithms/leetcode/StrangePrinter {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/StringCharacterCountChecker : dev/shtanko/algorithms/leetcode/MakeAllStringsEqual {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/StringCompression {
	public abstract fun invoke ([C)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/StringCompression2 {
	public abstract fun invoke (Ljava/lang/String;I)I
}

public final class dev/shtanko/algorithms/leetcode/StringCompression2DP : dev/shtanko/algorithms/leetcode/StringCompression2 {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/StringCompression2DP$Companion;
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;I)I
}

public final class dev/shtanko/algorithms/leetcode/StringCompression2DP$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/StringCompression3 {
	public abstract fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/StringCompression3StrManipulation : dev/shtanko/algorithms/leetcode/StringCompression3 {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/StringCompressionSimple : dev/shtanko/algorithms/leetcode/StringCompression {
	public fun <init> ()V
	public fun invoke ([C)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/StringPermutationStrategy {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
	public fun matches ([I[I)Z
}

public final class dev/shtanko/algorithms/leetcode/StringPermutationStrategy$DefaultImpls {
	public static fun matches (Ldev/shtanko/algorithms/leetcode/StringPermutationStrategy;[I[I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/StrobogrammaticNumber {
	public abstract fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/StrobogrammaticRotated : dev/shtanko/algorithms/leetcode/StrobogrammaticNumber {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/StrobogrammaticTwoPointers : dev/shtanko/algorithms/leetcode/StrobogrammaticNumber {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/StrongPasswordCheckerKt {
	public static final fun strongPasswordChecker (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/StudentAttendanceRecord2 {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/StudentAttendanceRecord2BottomUpDP : dev/shtanko/algorithms/leetcode/StudentAttendanceRecord2 {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/StudentAttendanceRecord2BottomUpSpaceOptimizedDP : dev/shtanko/algorithms/leetcode/StudentAttendanceRecord2 {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/StudentAttendanceRecord2TopDownMemoization : dev/shtanko/algorithms/leetcode/StudentAttendanceRecord2 {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SubarrayProductLessThanK {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/SubarrayProductLessThanKBinarySearch : dev/shtanko/algorithms/leetcode/SubarrayProductLessThanK {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/SubarrayProductLessThanKUsingSlidingWindow : dev/shtanko/algorithms/leetcode/SubarrayProductLessThanK {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/SubarraySumBruteForce : dev/shtanko/algorithms/leetcode/SubarraySumStrategy {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SubarraySumStrategy {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/SubarraySumUsingCumulativeSum : dev/shtanko/algorithms/leetcode/SubarraySumStrategy {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/SubarraySumUsingHashmap : dev/shtanko/algorithms/leetcode/SubarraySumStrategy {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/SubarraySumWithoutSpace : dev/shtanko/algorithms/leetcode/SubarraySumStrategy {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SubarraysDivByK {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/SubarraysDivisibleByKUsingMap : dev/shtanko/algorithms/leetcode/SubarraysDivByK {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/SubarraysDivisibleByKUsingPrefixSum : dev/shtanko/algorithms/leetcode/SubarraysDivByK {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SubarraysWithKDistinct {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/SubarraysWithKDistinctOnePass : dev/shtanko/algorithms/leetcode/SubarraysWithKDistinct {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/SubarraysWithKDistinctSlidingWindow : dev/shtanko/algorithms/leetcode/SubarraysWithKDistinct {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/SubdomainVisitsKt {
	public static final fun subdomainVisits ([Ljava/lang/String;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/SubsetXORSum {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/SubsetXORSumBitwise : dev/shtanko/algorithms/leetcode/SubsetXORSum {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/Subsets {
	public abstract fun invoke ([I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/SubstringFinder {
	public abstract fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/SubstringFinderBF : dev/shtanko/algorithms/leetcode/SubstringFinder {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/SubstringFinderHashMap : dev/shtanko/algorithms/leetcode/SubstringFinder {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/SubtractProductAndSumKt {
	public static final fun calculateDifferenceBetweenProductAndSum (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SuccessfulPairs {
	public abstract fun invoke ([I[IJ)[I
}

public final class dev/shtanko/algorithms/leetcode/SuccessfulPairsSF : dev/shtanko/algorithms/leetcode/SuccessfulPairs {
	public fun <init> ()V
	public fun invoke ([I[IJ)[I
}

public final class dev/shtanko/algorithms/leetcode/SuccessfulPairsTwoSum : dev/shtanko/algorithms/leetcode/SuccessfulPairs {
	public fun <init> ()V
	public fun invoke ([I[IJ)[I
}

public final class dev/shtanko/algorithms/leetcode/SumEvenAfterQueriesKt {
	public static final fun calculateSumEvenAfterQueries ([I[[I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SumOfAllOddLengthSubArrays {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/SumOfAllOddLengthSubArraysSF : dev/shtanko/algorithms/leetcode/SumOfAllOddLengthSubArrays {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/SumOfDistancesInTree {
	public fun <init> ()V
	public final fun invoke (I[[I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SumOfFlooredPairs {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/SumOfFlooredPairsBF : dev/shtanko/algorithms/leetcode/SumOfFlooredPairs {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/SumOfFlooredPairsBF$Companion;
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/SumOfFlooredPairsBF$Companion {
}

public final class dev/shtanko/algorithms/leetcode/SumOfFlooredPairsBF2 : dev/shtanko/algorithms/leetcode/SumOfFlooredPairs {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/SumOfLeftLeavesBSF : dev/shtanko/algorithms/leetcode/SumOfLeftLeavesStrategy {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/SumOfLeftLeavesIterative : dev/shtanko/algorithms/leetcode/SumOfLeftLeavesStrategy {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/SumOfLeftLeavesRecursive : dev/shtanko/algorithms/leetcode/SumOfLeftLeavesStrategy {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SumOfLeftLeavesStrategy {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SumOfRootToLeafBinaryNumbers {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/SumOfRootToLeafBinaryNumbersBitwise : dev/shtanko/algorithms/leetcode/SumOfRootToLeafBinaryNumbers {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/SumOfRootToLeafBinaryNumbersIPT : dev/shtanko/algorithms/leetcode/SumOfRootToLeafBinaryNumbers {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/SumOfRootToLeafBinaryNumbersMPT : dev/shtanko/algorithms/leetcode/SumOfRootToLeafBinaryNumbers {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public final class dev/shtanko/algorithms/leetcode/SumOfRootToLeafBinaryNumbersRPT : dev/shtanko/algorithms/leetcode/SumOfRootToLeafBinaryNumbers {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SumOfSquareNumbers {
	public abstract fun invoke (I)Z
}

public final class dev/shtanko/algorithms/leetcode/SumOfSquareNumbersBetterBruteForce : dev/shtanko/algorithms/leetcode/SumOfSquareNumbers {
	public fun <init> ()V
	public fun invoke (I)Z
}

public final class dev/shtanko/algorithms/leetcode/SumOfSquareNumbersBinarySearch : dev/shtanko/algorithms/leetcode/SumOfSquareNumbers {
	public fun <init> ()V
	public fun invoke (I)Z
}

public final class dev/shtanko/algorithms/leetcode/SumOfSquareNumbersBruteForce : dev/shtanko/algorithms/leetcode/SumOfSquareNumbers {
	public fun <init> ()V
	public fun invoke (I)Z
}

public final class dev/shtanko/algorithms/leetcode/SumOfSquareNumbersFermatTheorem : dev/shtanko/algorithms/leetcode/SumOfSquareNumbers {
	public fun <init> ()V
	public fun invoke (I)Z
}

public final class dev/shtanko/algorithms/leetcode/SumOfSquareNumbersSqrt : dev/shtanko/algorithms/leetcode/SumOfSquareNumbers {
	public fun <init> ()V
	public fun invoke (I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/SumOfUnique {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/SumOfUniqueBruteForce : dev/shtanko/algorithms/leetcode/SumOfUnique {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/SumOfUniqueBruteForce$Companion;
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/SumOfUniqueBruteForce$Companion {
}

public final class dev/shtanko/algorithms/leetcode/SumOfUniqueFilter : dev/shtanko/algorithms/leetcode/SumOfUnique {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/SumOfUniqueHashMap : dev/shtanko/algorithms/leetcode/SumOfUnique {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SumPrefixScores {
	public abstract fun invoke ([Ljava/lang/String;)[I
}

public final class dev/shtanko/algorithms/leetcode/SumPrefixScoresTrie : dev/shtanko/algorithms/leetcode/SumPrefixScores {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;)[I
}

public final class dev/shtanko/algorithms/leetcode/SumPrefixScoresTrie$TrieNode {
	public fun <init> ()V
	public final fun getCnt ()I
	public final fun getNext ()[Ldev/shtanko/algorithms/leetcode/SumPrefixScoresTrie$TrieNode;
	public final fun setCnt (I)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/SumSubarrayMins {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/SumSubarrayMinsDP : dev/shtanko/algorithms/leetcode/SumSubarrayMins {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/SumSubsequenceWidths {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/SumSubsequenceWidths;
	public final fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/SummaryRangesKt {
	public static final fun getSummaryRanges ([I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/SuperEggDrop {
	public abstract fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/SuperEggDropDPBinarySearch : dev/shtanko/algorithms/leetcode/SuperEggDrop {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/SuperEggDropDPBinarySearch$Companion;
	public fun <init> ()V
	public fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/SuperEggDropDPBinarySearch$Companion {
}

public final class dev/shtanko/algorithms/leetcode/SuperEggDropDPOptimalityCriterion : dev/shtanko/algorithms/leetcode/SuperEggDrop {
	public fun <init> ()V
	public fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/SuperEggDropMathematical : dev/shtanko/algorithms/leetcode/SuperEggDrop {
	public fun <init> ()V
	public fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/SuperPalindromes {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/SuperPalindromes;
	public final fun superPalindromesInRange (Ljava/lang/String;Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SuperUglyNumber {
	public abstract fun invoke (I[I)I
}

public final class dev/shtanko/algorithms/leetcode/SuperUglyNumberCommon : dev/shtanko/algorithms/leetcode/SuperUglyNumber {
	public fun <init> ()V
	public fun invoke (I[I)I
}

public final class dev/shtanko/algorithms/leetcode/SuperUglyNumberHeap : dev/shtanko/algorithms/leetcode/SuperUglyNumber {
	public fun <init> ()V
	public fun invoke (I[I)I
}

public final class dev/shtanko/algorithms/leetcode/SuperUglyNumberHeap$Num : java/lang/Comparable {
	public fun <init> (III)V
	public fun compareTo (Ldev/shtanko/algorithms/leetcode/SuperUglyNumberHeap$Num;)I
	public synthetic fun compareTo (Ljava/lang/Object;)I
	public final fun getIdx ()I
	public final fun getP ()I
	public final fun getValue ()I
	public final fun setIdx (I)V
	public final fun setP (I)V
	public final fun setValue (I)V
}

public final class dev/shtanko/algorithms/leetcode/SuperUglyNumberRedundantMultiplication : dev/shtanko/algorithms/leetcode/SuperUglyNumber {
	public fun <init> ()V
	public fun invoke (I[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/SwapNodes {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;I)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/SwapNodesInPairs {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/SwapNodesInPairsSimple : dev/shtanko/algorithms/leetcode/SwapNodesInPairs {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/leetcode/SwapNodesTwoPointers : dev/shtanko/algorithms/leetcode/SwapNodes {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;I)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/SymmetricTree {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Z
}

public final class dev/shtanko/algorithms/leetcode/SymmetricTreeIterative : dev/shtanko/algorithms/leetcode/SymmetricTree {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Z
}

public final class dev/shtanko/algorithms/leetcode/SymmetricTreeRecursive : dev/shtanko/algorithms/leetcode/SymmetricTree {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Z
}

public final class dev/shtanko/algorithms/leetcode/TAllocator : dev/shtanko/algorithms/leetcode/Malloc {
	public fun <init> (I)V
	public fun allocate (II)I
	public fun free (I)I
}

public final class dev/shtanko/algorithms/leetcode/TAllocator$Range {
	public fun <init> (II)V
	public final fun getEnd ()I
	public final fun getStart ()I
}

public final class dev/shtanko/algorithms/leetcode/TPerformanceOptimisationDP : dev/shtanko/algorithms/leetcode/Tribonacci {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/TPerformanceOptimisationDP$Companion;
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/TPerformanceOptimisationDP$Companion {
}

public final class dev/shtanko/algorithms/leetcode/TSMAdapt : dev/shtanko/algorithms/leetcode/ThreeSumMulti {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/TSMCountingCases : dev/shtanko/algorithms/leetcode/ThreeSumMulti {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/TSMThreePointer : dev/shtanko/algorithms/leetcode/ThreeSumMulti {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/TTTOptimised : dev/shtanko/algorithms/leetcode/DesignTicTacToe {
	public fun <init> (I)V
	public final fun getN ()I
	public fun move (III)I
}

public final class dev/shtanko/algorithms/leetcode/TTTOptimizedBruteForce : dev/shtanko/algorithms/leetcode/DesignTicTacToe {
	public fun <init> (I)V
	public final fun getN ()I
	public fun move (III)I
}

public final class dev/shtanko/algorithms/leetcode/TagValidatorRegex : dev/shtanko/algorithms/leetcode/TagValidatorStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/TagValidatorStack : dev/shtanko/algorithms/leetcode/TagValidatorStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/TagValidatorStrategy {
	public abstract fun invoke (Ljava/lang/String;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/TakeCharacters {
	public abstract fun invoke (Ljava/lang/String;I)I
}

public final class dev/shtanko/algorithms/leetcode/TakeCharactersSlidingWindow : dev/shtanko/algorithms/leetcode/TakeCharacters {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/TakeCharactersSlidingWindow;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/lang/String;I)I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/TallestBillboard {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/TallestBillboardDP : dev/shtanko/algorithms/leetcode/TallestBillboard {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/TallestBillboardMiddle : dev/shtanko/algorithms/leetcode/TallestBillboard {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/TargetSum {
	public abstract fun findTargetSumWays ([II)I
}

public final class dev/shtanko/algorithms/leetcode/TargetSumBruteForce : dev/shtanko/algorithms/leetcode/TargetSum {
	public fun <init> ()V
	public final fun calculate ([IIII)V
	public fun findTargetSumWays ([II)I
}

public final class dev/shtanko/algorithms/leetcode/TargetSumMemoization : dev/shtanko/algorithms/leetcode/TargetSum {
	public fun <init> ()V
	public final fun calculate ([IIII[[I)I
	public fun findTargetSumWays ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/TaskScheduler {
	public abstract fun invoke ([CI)I
}

public final class dev/shtanko/algorithms/leetcode/TaskSchedulerPriorityQueue : dev/shtanko/algorithms/leetcode/TaskScheduler {
	public fun <init> ()V
	public fun invoke ([CI)I
}

public final class dev/shtanko/algorithms/leetcode/TaskSchedulerSimple : dev/shtanko/algorithms/leetcode/TaskScheduler {
	public fun <init> ()V
	public fun invoke ([CI)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/Template {
	public abstract fun invoke ()I
}

public final class dev/shtanko/algorithms/leetcode/TemplateImpl : dev/shtanko/algorithms/leetcode/Template {
	public fun <init> ()V
	public fun invoke ()I
}

public abstract interface class dev/shtanko/algorithms/leetcode/TextJustification {
	public abstract fun invoke ([Ljava/lang/String;I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/TextJustificationImpl : dev/shtanko/algorithms/leetcode/TextJustification {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/TextJustificationImpl2 : dev/shtanko/algorithms/leetcode/TextJustification {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/ThirdMaxKt {
	public static final fun thirdMax ([I)I
}

public final class dev/shtanko/algorithms/leetcode/ThousandOneStops : dev/shtanko/algorithms/leetcode/CarPooling {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/ThousandOneStops$Companion;
	public fun <init> ()V
	public fun invoke ([[II)Z
}

public final class dev/shtanko/algorithms/leetcode/ThousandOneStops$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/ThreeConsecutiveOdds {
	public abstract fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/ThreeConsecutiveOddsBruteForce : dev/shtanko/algorithms/leetcode/ThreeConsecutiveOdds {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/ThreeConsecutiveOddsCounting : dev/shtanko/algorithms/leetcode/ThreeConsecutiveOdds {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/ThreeEqualParts {
	public abstract fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/ThreeEqualPartsSimple : dev/shtanko/algorithms/leetcode/ThreeEqualParts {
	public fun <init> ()V
	public fun invoke ([I)[I
}

public final class dev/shtanko/algorithms/leetcode/ThreeNumbers : dev/shtanko/algorithms/leetcode/ThreeConsecutiveOdds {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/ThreeSum {
	public abstract fun invoke ([I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/ThreeSumClosestKt {
	public static final fun threeSumClosest ([II)I
}

public final class dev/shtanko/algorithms/leetcode/ThreeSumHashset : dev/shtanko/algorithms/leetcode/ThreeSum {
	public fun <init> ()V
	public fun invoke ([I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/ThreeSumMulti {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/ThreeSumNoSort : dev/shtanko/algorithms/leetcode/ThreeSum {
	public fun <init> ()V
	public fun invoke ([I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/ThreeSumSmallerBinarySearch : dev/shtanko/algorithms/leetcode/ThreeSumSmallerStrategy {
	public fun <init> ()V
	public fun invoke ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ThreeSumSmallerStrategy {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/ThreeSumSmallerTwoPointers : dev/shtanko/algorithms/leetcode/ThreeSumSmallerStrategy {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/ThreeSumTwoPointers : dev/shtanko/algorithms/leetcode/ThreeSum {
	public fun <init> ()V
	public fun invoke ([I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/TimeNeededToBuyTickets {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/TimeNeededToBuyTicketsNoQueue : dev/shtanko/algorithms/leetcode/TimeNeededToBuyTickets {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/TimeNeededToBuyTicketsOnePass : dev/shtanko/algorithms/leetcode/TimeNeededToBuyTickets {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/TimeNeededToBuyTicketsQueue : dev/shtanko/algorithms/leetcode/TimeNeededToBuyTickets {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/ToLowerCaseKt {
	public static final fun toLowerCase (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/TopDownMergeSort : dev/shtanko/algorithms/leetcode/SortListStrategy {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/TopKFrequent {
	public abstract fun invoke ([Ljava/lang/String;I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/TopKFrequentBucketSort : dev/shtanko/algorithms/leetcode/TopKFrequent {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;I)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/TopKFrequentElements {
	public abstract fun invoke ([II)[I
}

public final class dev/shtanko/algorithms/leetcode/TopKFrequentElementsHeap : dev/shtanko/algorithms/leetcode/TopKFrequentElements {
	public fun <init> ()V
	public fun invoke ([II)[I
}

public final class dev/shtanko/algorithms/leetcode/TopKFrequentElementsQuickSelect : dev/shtanko/algorithms/leetcode/TopKFrequentElements {
	public field unique [I
	public fun <init> ()V
	public final fun getCount ()Ljava/util/Map;
	public final fun getUnique ()[I
	public fun invoke ([II)[I
	public final fun partition (III)I
	public final fun setCount (Ljava/util/Map;)V
	public final fun setUnique ([I)V
	public final fun swap (II)V
}

public final class dev/shtanko/algorithms/leetcode/TopKFrequentMap : dev/shtanko/algorithms/leetcode/TopKFrequent {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/TopKFrequentMinHeap : dev/shtanko/algorithms/leetcode/TopKFrequent {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/TopKFrequentSorting : dev/shtanko/algorithms/leetcode/TopKFrequent {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/TopKFrequentTrie : dev/shtanko/algorithms/leetcode/TopKFrequent {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/TopKFrequentTrie$Trie {
	public fun <init> ()V
	public final fun addWord (Ljava/lang/String;)V
	public final fun getRoot ()Ldev/shtanko/algorithms/leetcode/TopKFrequentTrie$TrieNode;
	public final fun getWords (Ldev/shtanko/algorithms/leetcode/TopKFrequentTrie$TrieNode;Ljava/util/List;)V
	public final fun setRoot (Ldev/shtanko/algorithms/leetcode/TopKFrequentTrie$TrieNode;)V
}

public final class dev/shtanko/algorithms/leetcode/TopKFrequentTrie$TrieNode {
	public fun <init> ()V
	public final fun getChildren ()[Ldev/shtanko/algorithms/leetcode/TopKFrequentTrie$TrieNode;
	public final fun getWord ()Ljava/lang/String;
	public final fun setChildren ([Ldev/shtanko/algorithms/leetcode/TopKFrequentTrie$TrieNode;)V
	public final fun setWord (Ljava/lang/String;)V
}

public final class dev/shtanko/algorithms/leetcode/TopologicalSorting : dev/shtanko/algorithms/leetcode/SortItems {
	public fun <init> ()V
	public fun invoke (II[ILjava/util/List;)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/TotalCost {
	public abstract fun invoke ([III)J
}

public final class dev/shtanko/algorithms/leetcode/TotalCostPriorityQueue : dev/shtanko/algorithms/leetcode/TotalCost {
	public fun <init> ()V
	public fun invoke ([III)J
}

public final class dev/shtanko/algorithms/leetcode/TotalCostPriorityQueues : dev/shtanko/algorithms/leetcode/TotalCost {
	public fun <init> ()V
	public fun invoke ([III)J
}

public final class dev/shtanko/algorithms/leetcode/TotalMoney {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/TotalMoney;
	public final fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/TotalNQueensRecursive : dev/shtanko/algorithms/leetcode/TotalNQueensStrategy {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/TotalNQueensStraightForward : dev/shtanko/algorithms/leetcode/TotalNQueensStrategy {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/TotalNQueensStrategy {
	public abstract fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/TotalSteps {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/TotalStepsDp : dev/shtanko/algorithms/leetcode/TotalSteps {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/TrackSecondBiggest : dev/shtanko/algorithms/leetcode/MaxProductOfTwoElementsInArray {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/TransposeMatrix {
	public abstract fun invoke ([[I)[[I
}

public final class dev/shtanko/algorithms/leetcode/TransposeMatrixCopyDirectly : dev/shtanko/algorithms/leetcode/TransposeMatrix {
	public fun <init> ()V
	public fun invoke ([[I)[[I
}

public final class dev/shtanko/algorithms/leetcode/TreeAncestor {
	public fun <init> (I[I)V
	public final fun getKthAncestor (II)I
}

public final class dev/shtanko/algorithms/leetcode/TreeCodec {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/TreeCodec;
	public final fun deserialize (Ljava/lang/String;)Ldev/shtanko/algorithms/leetcode/TreeNode;
	public final fun serialize (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/TreeNode : java/lang/Comparable {
	public fun <init> (I)V
	public fun compareTo (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
	public synthetic fun compareTo (Ljava/lang/Object;)I
	public final fun component1 ()I
	public final fun copy (I)Ldev/shtanko/algorithms/leetcode/TreeNode;
	public static synthetic fun copy$default (Ldev/shtanko/algorithms/leetcode/TreeNode;IILjava/lang/Object;)Ldev/shtanko/algorithms/leetcode/TreeNode;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getLeft ()Ldev/shtanko/algorithms/leetcode/TreeNode;
	public final fun getRight ()Ldev/shtanko/algorithms/leetcode/TreeNode;
	public final fun getValue ()I
	public fun hashCode ()I
	public final fun setLeft (Ldev/shtanko/algorithms/leetcode/TreeNode;)V
	public final fun setRight (Ldev/shtanko/algorithms/leetcode/TreeNode;)V
	public final fun setValue (I)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/TreeNodeExtensionsKt {
	public static final fun insertLevelOrder (Ldev/shtanko/algorithms/leetcode/TreeNode;[II)Ldev/shtanko/algorithms/leetcode/TreeNode;
	public static synthetic fun insertLevelOrder$default (Ldev/shtanko/algorithms/leetcode/TreeNode;[IIILjava/lang/Object;)Ldev/shtanko/algorithms/leetcode/TreeNode;
	public static final fun toTree ([I)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public final class dev/shtanko/algorithms/leetcode/TreeNodeKt {
	public static final fun buildTree ([Ljava/lang/Integer;)Ldev/shtanko/algorithms/leetcode/TreeNode;
	public static final fun clone (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ldev/shtanko/algorithms/leetcode/TreeNode;
	public static final fun clone (Ldev/shtanko/algorithms/leetcode/TreeNode;I)Ldev/shtanko/algorithms/leetcode/TreeNode;
	public static final fun height (Ldev/shtanko/algorithms/leetcode/TreeNode;)I
	public static final fun prettyPrint (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/TreeOfCoprimes {
	public abstract fun invoke ([I[[I)[I
}

public final class dev/shtanko/algorithms/leetcode/TreeOfCoprimesDFS : dev/shtanko/algorithms/leetcode/TreeOfCoprimes {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/TreeOfCoprimesDFS$Companion;
	public field ans [I
	public fun <init> ()V
	public final fun getAns ()[I
	public fun invoke ([I[[I)[I
	public final fun setAns ([I)V
	public final fun solve ([Ljava/util/List;[Ljava/util/List;[IIII)V
}

public final class dev/shtanko/algorithms/leetcode/TreeOfCoprimesDFS$Companion {
}

public final class dev/shtanko/algorithms/leetcode/TreeOfCoprimesDFS$Pair {
	public fun <init> (II)V
	public final fun getDepth ()I
	public final fun getIdx ()I
	public final fun setDepth (I)V
	public final fun setIdx (I)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/TreeQueries {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;[I)[I
}

public final class dev/shtanko/algorithms/leetcode/TreeQueriesDP : dev/shtanko/algorithms/leetcode/TreeQueries {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/TreeQueriesDP$Companion;
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;[I)[I
}

public final class dev/shtanko/algorithms/leetcode/TreeQueriesDP$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/Triangle {
	public abstract fun invoke (Ljava/util/List;)I
}

public final class dev/shtanko/algorithms/leetcode/TriangleAuxiliarySpace : dev/shtanko/algorithms/leetcode/Triangle {
	public fun <init> ()V
	public fun invoke (Ljava/util/List;)I
}

public final class dev/shtanko/algorithms/leetcode/TriangleBottomUp : dev/shtanko/algorithms/leetcode/Triangle {
	public fun <init> ()V
	public fun invoke (Ljava/util/List;)I
}

public final class dev/shtanko/algorithms/leetcode/TriangleMemoization : dev/shtanko/algorithms/leetcode/Triangle {
	public fun <init> ()V
	public fun invoke (Ljava/util/List;)I
}

public final class dev/shtanko/algorithms/leetcode/TriangleUpsideDown : dev/shtanko/algorithms/leetcode/Triangle {
	public fun <init> ()V
	public fun invoke (Ljava/util/List;)I
}

public final class dev/shtanko/algorithms/leetcode/TribRecursionMemo : dev/shtanko/algorithms/leetcode/Tribonacci {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/TribRecursionMemo$Companion;
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/TribRecursionMemo$Companion {
}

public final class dev/shtanko/algorithms/leetcode/TribSpaceOptimisationDP : dev/shtanko/algorithms/leetcode/Tribonacci {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/Tribonacci {
	public abstract fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/Trie {
	public abstract fun insert (Ljava/lang/String;)V
	public abstract fun search (Ljava/lang/String;)Z
	public abstract fun startsWith (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/TrieArray : dev/shtanko/algorithms/leetcode/Trie {
	public fun <init> ()V
	public fun insert (Ljava/lang/String;)V
	public fun search (Ljava/lang/String;)Z
	public fun startsWith (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/TrieHashMap : dev/shtanko/algorithms/leetcode/Trie {
	public fun <init> ()V
	public fun insert (Ljava/lang/String;)V
	public fun search (Ljava/lang/String;)Z
	public fun startsWith (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/TrimBSTKt {
	public static final fun trimBST (Ldev/shtanko/algorithms/leetcode/TreeNode;II)Ldev/shtanko/algorithms/leetcode/TreeNode;
}

public abstract interface class dev/shtanko/algorithms/leetcode/TruncateSentence {
	public abstract fun invoke (Ljava/lang/String;I)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/TruncateSentenceBruteForce : dev/shtanko/algorithms/leetcode/TruncateSentence {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;I)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/TwoCitySchedCostKt {
	public static final fun twoCitySchedCost ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/TwoDDynamicProgramming : dev/shtanko/algorithms/leetcode/TargetSum {
	public fun <init> ()V
	public fun findTargetSumWays ([II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/TwoEditWords {
	public abstract fun invoke ([Ljava/lang/String;[Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/TwoEditWordsBF : dev/shtanko/algorithms/leetcode/TwoEditWords {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;[Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/TwoEditWordsTrie : dev/shtanko/algorithms/leetcode/TwoEditWords {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;[Ljava/lang/String;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/TwoKeysKeyboard {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/TwoKeysKeyboardBacktracking : dev/shtanko/algorithms/leetcode/TwoKeysKeyboard {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/TwoKeysKeyboardBottomUpDp : dev/shtanko/algorithms/leetcode/TwoKeysKeyboard {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/TwoKeysKeyboardBottomUpDp$Companion;
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/TwoKeysKeyboardBottomUpDp$Companion {
}

public final class dev/shtanko/algorithms/leetcode/TwoKeysKeyboardMath : dev/shtanko/algorithms/leetcode/TwoKeysKeyboard {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/TwoKeysKeyboardTopDownDp : dev/shtanko/algorithms/leetcode/TwoKeysKeyboard {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/TwoOutOfThree {
	public static final field ARR_SIZE I
	public static final field Companion Ldev/shtanko/algorithms/leetcode/TwoOutOfThree$Companion;
	public abstract fun invoke ([I[I[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/TwoOutOfThree$Companion {
	public static final field ARR_SIZE I
}

public final class dev/shtanko/algorithms/leetcode/TwoOutOfThreeImpl : dev/shtanko/algorithms/leetcode/TwoOutOfThree {
	public fun <init> ()V
	public fun invoke ([I[I[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/TwoOutOfThreeKotlinWay : dev/shtanko/algorithms/leetcode/TwoOutOfThree {
	public fun <init> ()V
	public fun invoke ([I[I[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/TwoOutOfThreeStream : dev/shtanko/algorithms/leetcode/TwoOutOfThree {
	public fun <init> ()V
	public fun invoke ([I[I[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/TwoPassPrefixXOR : dev/shtanko/algorithms/leetcode/CountTriplets {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/TwoSum2Kt {
	public static final fun twoSum2 ([II)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/TwoSum4 {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;I)Z
}

public final class dev/shtanko/algorithms/leetcode/TwoSum4BFS : dev/shtanko/algorithms/leetcode/TwoSum4 {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;I)Z
}

public final class dev/shtanko/algorithms/leetcode/TwoSum4BST : dev/shtanko/algorithms/leetcode/TwoSum4 {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;I)Z
}

public final class dev/shtanko/algorithms/leetcode/TwoSum4DFS : dev/shtanko/algorithms/leetcode/TwoSum4 {
	public fun <init> ()V
	public final fun dfs (Ldev/shtanko/algorithms/leetcode/TreeNode;Ldev/shtanko/algorithms/leetcode/TreeNode;I)Z
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;I)Z
	public final fun search (Ldev/shtanko/algorithms/leetcode/TreeNode;Ldev/shtanko/algorithms/leetcode/TreeNode;I)Z
}

public final class dev/shtanko/algorithms/leetcode/TwoSum4HashSet : dev/shtanko/algorithms/leetcode/TwoSum4 {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;I)Z
}

public final class dev/shtanko/algorithms/leetcode/TwoSumBruteForce : dev/shtanko/algorithms/leetcode/TwoSumStrategy {
	public fun <init> ()V
	public fun invoke ([II)[I
}

public final class dev/shtanko/algorithms/leetcode/TwoSumLessThanKBinarySearch : dev/shtanko/algorithms/leetcode/TwoSumLessThanKStrategy {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/TwoSumLessThanKBruteForce : dev/shtanko/algorithms/leetcode/TwoSumLessThanKStrategy {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/TwoSumLessThanKCountingSort : dev/shtanko/algorithms/leetcode/TwoSumLessThanKStrategy {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/TwoSumLessThanKCountingSort$Companion;
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/TwoSumLessThanKCountingSort$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/TwoSumLessThanKStrategy {
	public abstract fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/TwoSumLessThanKTwoPointers : dev/shtanko/algorithms/leetcode/TwoSumLessThanKStrategy {
	public fun <init> ()V
	public fun invoke ([II)I
}

public final class dev/shtanko/algorithms/leetcode/TwoSumOneHashMap : dev/shtanko/algorithms/leetcode/TwoSumStrategy {
	public fun <init> ()V
	public fun invoke ([II)[I
}

public final class dev/shtanko/algorithms/leetcode/TwoSumOnePassHashTable : dev/shtanko/algorithms/leetcode/TwoSumStrategy {
	public fun <init> ()V
	public fun invoke ([II)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/TwoSumStrategy {
	public abstract fun invoke ([II)[I
}

public final class dev/shtanko/algorithms/leetcode/TwoSumTwoPassHashTable : dev/shtanko/algorithms/leetcode/TwoSumStrategy {
	public fun <init> ()V
	public fun invoke ([II)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/UglyNumber2 {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/UglyNumber2Dp : dev/shtanko/algorithms/leetcode/UglyNumber2 {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/UncommonFromSentences {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/UncommonFromSentencesMap : dev/shtanko/algorithms/leetcode/UncommonFromSentences {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/UncommonFromSentencesMap;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/UncommonFromSentencesSolution : dev/shtanko/algorithms/leetcode/UncommonFromSentences {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/UncommonFromSentencesSolution;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/UncrossedLines {
	public abstract fun maxUncrossedLines ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/UncrossedLinesIterativeDP : dev/shtanko/algorithms/leetcode/UncrossedLines {
	public fun <init> ()V
	public fun maxUncrossedLines ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/UncrossedLinesRecursiveDP : dev/shtanko/algorithms/leetcode/UncrossedLines {
	public fun <init> ()V
	public fun maxUncrossedLines ([I[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/UndergroundSystem {
	public abstract fun checkIn (ILjava/lang/String;I)V
	public abstract fun checkOut (ILjava/lang/String;I)V
	public abstract fun getAverageTime (Ljava/lang/String;Ljava/lang/String;)D
}

public final class dev/shtanko/algorithms/leetcode/UndergroundSystemImpl : dev/shtanko/algorithms/leetcode/UndergroundSystem {
	public fun <init> ()V
	public fun checkIn (ILjava/lang/String;I)V
	public fun checkOut (ILjava/lang/String;I)V
	public fun getAverageTime (Ljava/lang/String;Ljava/lang/String;)D
}

public abstract interface class dev/shtanko/algorithms/leetcode/UnequalTriplets {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/UnequalTripletsOnePass : dev/shtanko/algorithms/leetcode/UnequalTriplets {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/UnequalTripletsOnePass$Companion;
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/UnequalTripletsOnePass$Companion {
}

public final class dev/shtanko/algorithms/leetcode/UnionBySizeMakeConnected : dev/shtanko/algorithms/leetcode/MakeConnected {
	public fun <init> ()V
	public fun findParent ([II)I
	public fun invoke (I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/UnionFind {
	public fun <init> (I)V
	public final fun find (I)I
	public final fun getParent ()[I
	public final fun getRank ()[I
	public final fun setParent ([I)V
	public final fun setRank ([I)V
	public final fun unionSet (II)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/UniqueBST2 {
	public abstract fun invoke (I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/UniqueBST2DPSpaceOpt : dev/shtanko/algorithms/leetcode/UniqueBST2 {
	public fun <init> ()V
	public fun invoke (I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/UniqueBST2IterativeDP : dev/shtanko/algorithms/leetcode/UniqueBST2 {
	public fun <init> ()V
	public fun invoke (I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/UniqueBST2RecursiveDP : dev/shtanko/algorithms/leetcode/UniqueBST2 {
	public fun <init> ()V
	public fun invoke (I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/UniqueBSTDP : dev/shtanko/algorithms/leetcode/UniqueBinarySearchTrees {
	public fun <init> ()V
	public fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/UniqueBSTDeduction : dev/shtanko/algorithms/leetcode/UniqueBinarySearchTrees {
	public fun <init> ()V
	public fun invoke (I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/UniqueBinarySearchTrees {
	public abstract fun invoke (I)I
}

public final class dev/shtanko/algorithms/leetcode/UniqueMorseRepresentationsKt {
	public static final fun uniqueMorseRepresentations ([Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/UniqueOccurrences {
	public abstract fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/UniqueOccurrencesMap : dev/shtanko/algorithms/leetcode/UniqueOccurrences {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/UniqueOccurrencesSort : dev/shtanko/algorithms/leetcode/UniqueOccurrences {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/UniquePaths {
	public abstract fun invoke (II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/UniquePaths2 {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/UniquePaths2DP : dev/shtanko/algorithms/leetcode/UniquePaths2 {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/UniquePaths2Short : dev/shtanko/algorithms/leetcode/UniquePaths2 {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/UniquePaths3 {
	public abstract fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/UniquePaths3Backtracking : dev/shtanko/algorithms/leetcode/UniquePaths3 {
	public fun <init> ()V
	public fun invoke ([[I)I
}

public final class dev/shtanko/algorithms/leetcode/UniquePathsBruteForce : dev/shtanko/algorithms/leetcode/UniquePaths {
	public fun <init> ()V
	public fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/UniquePathsDpMemo : dev/shtanko/algorithms/leetcode/UniquePaths {
	public fun <init> ()V
	public fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/UniquePathsDpOpt : dev/shtanko/algorithms/leetcode/UniquePaths {
	public fun <init> ()V
	public fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/UniquePathsDpTabulation : dev/shtanko/algorithms/leetcode/UniquePaths {
	public fun <init> ()V
	public fun invoke (II)I
}

public final class dev/shtanko/algorithms/leetcode/UniquePathsMath : dev/shtanko/algorithms/leetcode/UniquePaths {
	public fun <init> ()V
	public fun invoke (II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/UnivaluedBinaryTree {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Z
}

public final class dev/shtanko/algorithms/leetcode/UnivaluedBinaryTreeDFS : dev/shtanko/algorithms/leetcode/UnivaluedBinaryTree {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Z
}

public final class dev/shtanko/algorithms/leetcode/UnivaluedBinaryTreeRecursive : dev/shtanko/algorithms/leetcode/UnivaluedBinaryTree {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/ValidAnagram {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/ValidAnagramHashMap : dev/shtanko/algorithms/leetcode/ValidAnagram {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/ValidAnagramImpl : dev/shtanko/algorithms/leetcode/ValidAnagram {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/ValidAnagramImpl$Companion;
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/ValidAnagramImpl$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/ValidArrangementOfPairs {
	public abstract fun invoke ([[I)[[I
}

public final class dev/shtanko/algorithms/leetcode/ValidNumberKt {
	public static final fun isNumber (Ljava/lang/String;)Z
	public static final fun isNumberRegex (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/ValidParentheses {
	public fun <init> ()V
	public fun <init> (Ljava/util/Map;)V
	public synthetic fun <init> (Ljava/util/Map;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/ValidParenthesesKt {
	public static final fun isValidParentheses (Ljava/lang/String;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/ValidParenthesesStringPath {
	public abstract fun invoke ([[C)Z
}

public final class dev/shtanko/algorithms/leetcode/ValidParenthesesStringPathDFS : dev/shtanko/algorithms/leetcode/ValidParenthesesStringPath {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/ValidParenthesesStringPathDFS$Companion;
	public fun <init> ()V
	public fun invoke ([[C)Z
}

public final class dev/shtanko/algorithms/leetcode/ValidParenthesesStringPathDFS$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/ValidParenthesisString {
	public abstract fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/ValidParenthesisStringBruteForce : dev/shtanko/algorithms/leetcode/ValidParenthesisString {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/ValidParenthesisStringDP : dev/shtanko/algorithms/leetcode/ValidParenthesisString {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/ValidParenthesisStringGreedy : dev/shtanko/algorithms/leetcode/ValidParenthesisString {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/ValidPartition {
	public abstract fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/ValidPartitionBottomUp : dev/shtanko/algorithms/leetcode/ValidPartition {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/ValidPartitionBottomUpSpaceOpt : dev/shtanko/algorithms/leetcode/ValidPartition {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/ValidPartitionTopDown : dev/shtanko/algorithms/leetcode/ValidPartition {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/ValidPathBFS : dev/shtanko/algorithms/leetcode/ValidPathInGraph {
	public fun <init> ()V
	public fun invoke (I[[III)Z
}

public final class dev/shtanko/algorithms/leetcode/ValidPathDFS : dev/shtanko/algorithms/leetcode/ValidPathInGraph {
	public fun <init> ()V
	public fun invoke (I[[III)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/ValidPathInGraph {
	public abstract fun invoke (I[[III)Z
}

public final class dev/shtanko/algorithms/leetcode/ValidPathUnionByRank : dev/shtanko/algorithms/leetcode/ValidPathInGraph {
	public fun <init> ()V
	public fun invoke (I[[III)Z
}

public final class dev/shtanko/algorithms/leetcode/ValidPathUnionFind : dev/shtanko/algorithms/leetcode/ValidPathInGraph {
	public fun <init> ()V
	public fun invoke (I[[III)Z
}

public final class dev/shtanko/algorithms/leetcode/ValidSubArrays {
	public fun <init> ()V
	public final fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ValidSudoku {
	public abstract fun invoke ([[C)Z
}

public final class dev/shtanko/algorithms/leetcode/ValidSudokuSimple : dev/shtanko/algorithms/leetcode/ValidSudoku {
	public fun <init> ()V
	public fun invoke ([[C)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/ValidateBinarySearchTree {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/ValidateBinaryTreeNodes {
	public abstract fun invoke (I[I[I)Z
}

public final class dev/shtanko/algorithms/leetcode/ValidateBinaryTreeNodesBFS : dev/shtanko/algorithms/leetcode/ValidateBinaryTreeNodes {
	public fun <init> ()V
	public fun invoke (I[I[I)Z
}

public final class dev/shtanko/algorithms/leetcode/ValidateBinaryTreeNodesDFS : dev/shtanko/algorithms/leetcode/ValidateBinaryTreeNodes {
	public fun <init> ()V
	public fun invoke (I[I[I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/ValidateStackSequences {
	public abstract fun invoke ([I[I)Z
}

public final class dev/shtanko/algorithms/leetcode/ValidateStackSequencesGreedy : dev/shtanko/algorithms/leetcode/ValidateStackSequences {
	public fun <init> ()V
	public fun invoke ([I[I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/VerbalArithmeticPuzzle {
	public abstract fun invoke ([Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/VerbalArithmeticPuzzleBacktracking : dev/shtanko/algorithms/leetcode/VerbalArithmeticPuzzle {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/VerbalArithmeticPuzzleBacktracking$Companion;
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/VerbalArithmeticPuzzleBacktracking$Companion {
}

public final class dev/shtanko/algorithms/leetcode/VerifyPreorderInBinarySearchTreeBF : dev/shtanko/algorithms/leetcode/VerifyPreorderInBinarySearchTreeStrategy {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/VerifyPreorderInBinarySearchTreeRecursion : dev/shtanko/algorithms/leetcode/VerifyPreorderInBinarySearchTreeStrategy {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public final class dev/shtanko/algorithms/leetcode/VerifyPreorderInBinarySearchTreeStack : dev/shtanko/algorithms/leetcode/VerifyPreorderInBinarySearchTreeStrategy {
	public fun <init> ()V
	public fun invoke ([I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/VerifyPreorderInBinarySearchTreeStrategy {
	public abstract fun invoke ([I)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/VerifyingAlienDictionary {
	public abstract fun invoke ([Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/VerifyingAlienDictionaryCompare : dev/shtanko/algorithms/leetcode/VerifyingAlienDictionary {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/VoteRecord {
	public fun <init> (Ljava/lang/String;I)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()I
	public final fun copy (Ljava/lang/String;I)Ldev/shtanko/algorithms/leetcode/VoteRecord;
	public static synthetic fun copy$default (Ldev/shtanko/algorithms/leetcode/VoteRecord;Ljava/lang/String;IILjava/lang/Object;)Ldev/shtanko/algorithms/leetcode/VoteRecord;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getRanks ()[I
	public final fun getTeam ()Ljava/lang/String;
	public final fun getTeamCount ()I
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/VowelSpellchecker {
	public abstract fun invoke ([Ljava/lang/String;[Ljava/lang/String;)[Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/VowelSpellcheckerImpl : dev/shtanko/algorithms/leetcode/VowelSpellchecker {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/String;[Ljava/lang/String;)[Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/VowelsAllSubstrings {
	public abstract fun invoke (Ljava/lang/String;)J
}

public final class dev/shtanko/algorithms/leetcode/VowelsAllSubstringsImpl : dev/shtanko/algorithms/leetcode/VowelsAllSubstrings {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)J
}

public final class dev/shtanko/algorithms/leetcode/WSBruteForce : dev/shtanko/algorithms/leetcode/WiggleSubsequence {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/WSDP : dev/shtanko/algorithms/leetcode/WiggleSubsequence {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/WSGreedy : dev/shtanko/algorithms/leetcode/WiggleSubsequence {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/WSLinearDP : dev/shtanko/algorithms/leetcode/WiggleSubsequence {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/WSSpaceOptimizedDP : dev/shtanko/algorithms/leetcode/WiggleSubsequence {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/WalkSpiralMatrix4 : dev/shtanko/algorithms/leetcode/SpiralMatrix4 {
	public fun <init> ()V
	public fun invoke (IILdev/shtanko/algorithms/leetcode/ListNode;)[[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/WalkingRobotSimulation {
	public abstract fun invoke ([I[[I)I
}

public final class dev/shtanko/algorithms/leetcode/WalkingRobotSimulationImpl : dev/shtanko/algorithms/leetcode/WalkingRobotSimulation {
	public static final field INSTANCE Ldev/shtanko/algorithms/leetcode/WalkingRobotSimulationImpl;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke ([I[[I)I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/WaterBottles {
	public fun <init> ()V
	public final fun invoke (II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/WaysToBuildRooms {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/leetcode/WaysToBuildRoomsDFS : dev/shtanko/algorithms/leetcode/WaysToBuildRooms {
	public fun <init> ()V
	public fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/WiggleSort {
	public abstract fun invoke ([I)V
}

public final class dev/shtanko/algorithms/leetcode/WiggleSortBruteForce : dev/shtanko/algorithms/leetcode/WiggleSort {
	public fun <init> ()V
	public fun invoke ([I)V
}

public final class dev/shtanko/algorithms/leetcode/WiggleSortOnePassSwap : dev/shtanko/algorithms/leetcode/WiggleSort {
	public fun <init> ()V
	public fun invoke ([I)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/WiggleSubsequence {
	public abstract fun invoke ([I)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/WinnerOfGame {
	public abstract fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/WinnerOfGameCount : dev/shtanko/algorithms/leetcode/WinnerOfGame {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/WonderfulSubstrings {
	public abstract fun invoke (Ljava/lang/String;)J
}

public final class dev/shtanko/algorithms/leetcode/WonderfulSubstringsSlidingWindow : dev/shtanko/algorithms/leetcode/WonderfulSubstrings {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/WonderfulSubstringsSlidingWindow$Companion;
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)J
}

public final class dev/shtanko/algorithms/leetcode/WonderfulSubstringsSlidingWindow$Companion {
}

public abstract interface class dev/shtanko/algorithms/leetcode/WordAbbreviation {
	public fun abbrev (Ljava/lang/String;I)Ljava/lang/String;
	public abstract fun invoke (Ljava/util/List;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/WordAbbreviation$DefaultImpls {
	public static fun abbrev (Ldev/shtanko/algorithms/leetcode/WordAbbreviation;Ljava/lang/String;I)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/WordAbbreviationGreedy : dev/shtanko/algorithms/leetcode/WordAbbreviation {
	public fun <init> ()V
	public fun abbrev (Ljava/lang/String;I)Ljava/lang/String;
	public fun invoke (Ljava/util/List;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/WordAbbreviationLCP : dev/shtanko/algorithms/leetcode/WordAbbreviation {
	public fun <init> ()V
	public fun abbrev (Ljava/lang/String;I)Ljava/lang/String;
	public fun invoke (Ljava/util/List;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/WordAbbreviationTrie : dev/shtanko/algorithms/leetcode/WordAbbreviation {
	public fun <init> ()V
	public fun abbrev (Ljava/lang/String;I)Ljava/lang/String;
	public fun invoke (Ljava/util/List;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/WordBreak {
	public abstract fun invoke (Ljava/lang/String;Ljava/util/List;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/WordBreak2 {
	public abstract fun invoke (Ljava/lang/String;Ljava/util/List;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/WordBreak2Backtracking : dev/shtanko/algorithms/leetcode/WordBreak2 {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/util/List;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/WordBreak2DFS : dev/shtanko/algorithms/leetcode/WordBreak2 {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/util/List;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/WordBreak2DPDFS : dev/shtanko/algorithms/leetcode/WordBreak2 {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/util/List;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/WordBreakBFS : dev/shtanko/algorithms/leetcode/WordBreak {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/util/List;)Z
}

public final class dev/shtanko/algorithms/leetcode/WordBreakBruteForce : dev/shtanko/algorithms/leetcode/WordBreak {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/util/List;)Z
}

public final class dev/shtanko/algorithms/leetcode/WordBreakDFS : dev/shtanko/algorithms/leetcode/WordBreak {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/util/List;)Z
}

public final class dev/shtanko/algorithms/leetcode/WordBreakDP : dev/shtanko/algorithms/leetcode/WordBreak {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/util/List;)Z
}

public final class dev/shtanko/algorithms/leetcode/WordBreakDP2 : dev/shtanko/algorithms/leetcode/WordBreak {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/util/List;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/WordDictionary {
	public abstract fun addWord (Ljava/lang/String;)V
	public abstract fun search (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/WordDictionaryImpl : dev/shtanko/algorithms/leetcode/WordDictionary {
	public fun <init> ()V
	public fun addWord (Ljava/lang/String;)V
	public fun search (Ljava/lang/String;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/WordFilter {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/WordFilterTrie : dev/shtanko/algorithms/leetcode/WordFilter {
	public static final field Companion Ldev/shtanko/algorithms/leetcode/WordFilterTrie$Companion;
	public fun <init> ([Ljava/lang/String;)V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/WordFilterTrie$Companion {
}

public final class dev/shtanko/algorithms/leetcode/WordFilterTrie$WFTrieNode {
	public fun <init> ()V
	public final fun getChildren ()[Ldev/shtanko/algorithms/leetcode/WordFilterTrie$WFTrieNode;
	public final fun getWeight ()Ljava/util/Set;
	public final fun setChildren ([Ldev/shtanko/algorithms/leetcode/WordFilterTrie$WFTrieNode;)V
	public final fun setWeight (Ljava/util/Set;)V
}

public final class dev/shtanko/algorithms/leetcode/WordFilterWrappedWords : dev/shtanko/algorithms/leetcode/WordFilter {
	public fun <init> ([Ljava/lang/String;)V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/leetcode/WordFilterWrappedWords$TrieNode {
	public fun <init> ()V
	public final fun getChildren ()[Ldev/shtanko/algorithms/leetcode/WordFilterWrappedWords$TrieNode;
	public final fun getWeight ()I
	public final fun setChildren ([Ldev/shtanko/algorithms/leetcode/WordFilterWrappedWords$TrieNode;)V
	public final fun setWeight (I)V
}

public final class dev/shtanko/algorithms/leetcode/WordLadder2 : dev/shtanko/algorithms/leetcode/AbstractWordLadder2Strategy {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;Ljava/util/List;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/leetcode/WordPattern {
	public abstract fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/WordPatternSimple : dev/shtanko/algorithms/leetcode/WordPattern {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/WordSearch {
	public abstract fun invoke ([[CLjava/lang/String;)Z
}

public abstract interface class dev/shtanko/algorithms/leetcode/WordSearch2 {
	public abstract fun invoke ([[C[Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/WordSearch2Trie : dev/shtanko/algorithms/leetcode/WordSearch2 {
	public fun <init> ()V
	public fun invoke ([[C[Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/WordSearch2Trie$TrieNode {
	public fun <init> ()V
	public final fun getNext ()[Ldev/shtanko/algorithms/leetcode/WordSearch2Trie$TrieNode;
	public final fun getWord ()Ljava/lang/String;
	public final fun setNext ([Ldev/shtanko/algorithms/leetcode/WordSearch2Trie$TrieNode;)V
	public final fun setWord (Ljava/lang/String;)V
}

public final class dev/shtanko/algorithms/leetcode/WordSearchShort : dev/shtanko/algorithms/leetcode/WordSearch {
	public fun <init> ()V
	public fun invoke ([[CLjava/lang/String;)Z
}

public final class dev/shtanko/algorithms/leetcode/WordTrieNode {
	public fun <init> ()V
	public final fun getChildren ()[Ldev/shtanko/algorithms/leetcode/WordTrieNode;
	public final fun getCount ()I
	public final fun setChildren ([Ldev/shtanko/algorithms/leetcode/WordTrieNode;)V
	public final fun setCount (I)V
}

public abstract interface class dev/shtanko/algorithms/leetcode/XORQueriesOfSubarray {
	public abstract fun invoke ([I[[I)[I
}

public final class dev/shtanko/algorithms/leetcode/XORQueriesOfSubarrayInPlace : dev/shtanko/algorithms/leetcode/XORQueriesOfSubarray {
	public fun <init> ()V
	public fun invoke ([I[[I)[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/XorAllNums {
	public abstract fun invoke ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/XorAllNumsConcise : dev/shtanko/algorithms/leetcode/XorAllNums {
	public fun <init> ()V
	public fun invoke ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/XorAllNumsSimple : dev/shtanko/algorithms/leetcode/XorAllNums {
	public fun <init> ()V
	public fun invoke ([I[I)I
}

public final class dev/shtanko/algorithms/leetcode/XorOperationKt {
	public static final fun xorOperation (II)I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ZeroFilledSubarray {
	public abstract fun invoke ([I)J
}

public final class dev/shtanko/algorithms/leetcode/ZeroFilledSubarrayTwoPointers : dev/shtanko/algorithms/leetcode/ZeroFilledSubarray {
	public fun <init> ()V
	public fun invoke ([I)J
}

public abstract interface class dev/shtanko/algorithms/leetcode/ZeroOneMatrix {
	public abstract fun invoke ([[I)[[I
}

public final class dev/shtanko/algorithms/leetcode/ZeroOneMatrixBFS : dev/shtanko/algorithms/leetcode/ZeroOneMatrix {
	public fun <init> ()V
	public fun invoke ([[I)[[I
}

public final class dev/shtanko/algorithms/leetcode/ZeroOneMatrixDP : dev/shtanko/algorithms/leetcode/ZeroOneMatrix {
	public fun <init> ()V
	public fun invoke ([[I)[[I
}

public abstract interface class dev/shtanko/algorithms/leetcode/ZigzagConversion {
	public abstract fun invoke (Ljava/lang/String;I)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/leetcode/ZigzagConversionSB : dev/shtanko/algorithms/leetcode/ZigzagConversion {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;I)Ljava/lang/String;
}

public abstract interface class dev/shtanko/algorithms/leetcode/ZigzagLevelOrder {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/leetcode/ZigzagLevelOrderQueue : dev/shtanko/algorithms/leetcode/ZigzagLevelOrder {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/math/AutomorphicNumber {
	public static final fun isAutomorphic (I)Z
}

public final class dev/shtanko/algorithms/math/BinomialKt {
	public static final fun binomial (II)J
}

public abstract interface class dev/shtanko/algorithms/math/FastInverseSqrt {
	public abstract fun inverseSqrt (D)D
	public abstract fun inverseSqrt (F)F
}

public final class dev/shtanko/algorithms/math/FastInverseSqrtImpl : dev/shtanko/algorithms/math/FastInverseSqrt {
	public static final field Companion Ldev/shtanko/algorithms/math/FastInverseSqrtImpl$Companion;
	public fun <init> ()V
	public fun inverseSqrt (D)D
	public fun inverseSqrt (F)F
}

public final class dev/shtanko/algorithms/math/FastInverseSqrtImpl$Companion {
}

public abstract class dev/shtanko/algorithms/math/Fibonacci : java/lang/Enum {
	public static final field ITERATIVE Ldev/shtanko/algorithms/math/Fibonacci;
	public static final field RECURSIVE Ldev/shtanko/algorithms/math/Fibonacci;
	public synthetic fun <init> (Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public abstract fun invoke (J)J
	public static fun valueOf (Ljava/lang/String;)Ldev/shtanko/algorithms/math/Fibonacci;
	public static fun values ()[Ldev/shtanko/algorithms/math/Fibonacci;
}

public final class dev/shtanko/algorithms/math/FibonacciSequenceKt {
	public static final fun toFibonacciSequence (I)I
}

public final class dev/shtanko/algorithms/math/GcdKt {
	public static final fun gcd (II)I
	public static final fun gcd (Lkotlin/Pair;)I
}

public abstract interface class dev/shtanko/algorithms/math/KeithNumber {
	public abstract fun isKeith (I)Z
}

public final class dev/shtanko/algorithms/math/KeithNumberImpl : dev/shtanko/algorithms/math/KeithNumber {
	public fun <init> ()V
	public fun isKeith (I)Z
}

public abstract interface class dev/shtanko/algorithms/math/NarcissisticNumber {
	public abstract fun isArmstrong (I)Z
}

public final class dev/shtanko/algorithms/math/NarcissisticNumberImpl : dev/shtanko/algorithms/math/NarcissisticNumber {
	public fun <init> ()V
	public fun isArmstrong (I)Z
}

public final class dev/shtanko/algorithms/math/SqrtKt {
	public static final fun sqrt (DD)D
	public static final fun sqrt (ID)D
	public static synthetic fun sqrt$default (DDILjava/lang/Object;)D
	public static synthetic fun sqrt$default (IDILjava/lang/Object;)D
}

public abstract interface class dev/shtanko/algorithms/matrix/MatrixTraversalStrategy {
	public abstract fun invoke ([[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/matrix/RowWiseTraversal : dev/shtanko/algorithms/matrix/MatrixTraversalStrategy {
	public fun <init> ()V
	public fun invoke ([[I)Ljava/util/List;
}

public final class dev/shtanko/algorithms/mocks/interview/PairsOfPrefixOrSuffixKt {
	public static final field DELIMITER C
	public static final fun findPrefixOrSuffixPairs (Ljava/util/List;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/mocks/interview/WordSubstitutionKt {
	public static final fun compressSubstituteMap (Ljava/lang/String;Ljava/util/Map;Ljava/util/Map;)Ljava/lang/String;
	public static final fun wordSubstitution (Ljava/util/List;Ljava/util/Map;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/own/ByteBuffer {
	public fun <init> (Lkotlin/jvm/functions/Function1;)V
	public final fun execute ([B)V
}

public final class dev/shtanko/algorithms/own/LawOfLargeNumbers {
	public static final field INSTANCE Ldev/shtanko/algorithms/own/LawOfLargeNumbers;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/algorithms/own/RingBuffer {
	public static final field Companion Ldev/shtanko/algorithms/own/RingBuffer$Companion;
	public fun <init> ()V
	public final fun incrementAndGet ()B
}

public final class dev/shtanko/algorithms/own/RingBuffer$Companion {
}

public final class dev/shtanko/algorithms/own/StringTransformer {
	public static final field Companion Ldev/shtanko/algorithms/own/StringTransformer$Companion;
	public fun <init> (Ldev/shtanko/algorithms/own/RingBuffer;)V
	public final fun transform (Ljava/lang/String;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/own/StringTransformer$Companion {
}

public abstract interface class dev/shtanko/algorithms/recursion/ArraySum {
	public abstract fun invoke ([I)I
}

public final class dev/shtanko/algorithms/recursion/ArraySumTailRecursive : dev/shtanko/algorithms/recursion/ArraySum {
	public fun <init> ()V
	public fun invoke ([I)I
}

public final class dev/shtanko/algorithms/recursion/LogFactorialKt {
	public static final fun logFactorial (I)I
}

public final class dev/shtanko/algorithms/recursion/PrettyPrintPalindromeKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public abstract interface class dev/shtanko/algorithms/search/AbstractSearchStrategy {
	public abstract fun perform ([Ljava/lang/Object;Ljava/lang/Object;)I
}

public final class dev/shtanko/algorithms/search/BinaryRecursiveSearch : dev/shtanko/algorithms/search/AbstractSearchStrategy {
	public fun <init> ()V
	public fun perform ([Ljava/lang/Comparable;Ljava/lang/Comparable;)I
	public synthetic fun perform ([Ljava/lang/Object;Ljava/lang/Object;)I
}

public final class dev/shtanko/algorithms/search/BinarySearch : dev/shtanko/algorithms/search/AbstractSearchStrategy {
	public fun <init> ()V
	public fun perform ([Ljava/lang/Comparable;Ljava/lang/Comparable;)I
	public synthetic fun perform ([Ljava/lang/Object;Ljava/lang/Object;)I
}

public final class dev/shtanko/algorithms/search/LinearSearch : dev/shtanko/algorithms/search/AbstractSearchStrategy {
	public fun <init> ()V
	public fun perform ([Ljava/lang/Object;Ljava/lang/Object;)I
}

public final class dev/shtanko/algorithms/simulatedannealing/TravelingSalesmanProblem {
	public fun <init> (Ljava/util/List;DD)V
	public final fun calculateTourLength (Ljava/util/List;)D
	public final fun findShortestTour ()Ljava/util/List;
	public final fun generateNeighbor (Ljava/util/List;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/simulatedannealing/TravelingSalesmanProblem$City {
	public fun <init> (II)V
	public final fun component1 ()I
	public final fun component2 ()I
	public final fun copy (II)Ldev/shtanko/algorithms/simulatedannealing/TravelingSalesmanProblem$City;
	public static synthetic fun copy$default (Ldev/shtanko/algorithms/simulatedannealing/TravelingSalesmanProblem$City;IIILjava/lang/Object;)Ldev/shtanko/algorithms/simulatedannealing/TravelingSalesmanProblem$City;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getX ()I
	public final fun getY ()I
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/algorithms/slidingwindow/FixedSizeExampleKt {
	public static final fun maxSumFixedSizeSlidingWindow ([II)I
}

public final class dev/shtanko/algorithms/slidingwindow/VariableSizeExampleKt {
	public static final fun lengthOfLongestSubstring (Ljava/lang/String;)I
}

public abstract interface class dev/shtanko/algorithms/sorts/AbstractSortStrategy {
	public abstract fun perform ([Ljava/lang/Comparable;)V
}

public final class dev/shtanko/algorithms/sorts/ArraySort : dev/shtanko/algorithms/sorts/AbstractSortStrategy {
	public fun <init> ()V
	public fun perform ([Ljava/lang/Comparable;)V
}

public final class dev/shtanko/algorithms/sorts/BinarySort : dev/shtanko/algorithms/sorts/AbstractSortStrategy {
	public fun <init> ()V
	public fun perform ([Ljava/lang/Comparable;)V
}

public final class dev/shtanko/algorithms/sorts/BubbleSort : dev/shtanko/algorithms/sorts/AbstractSortStrategy {
	public fun <init> ()V
	public fun perform ([Ljava/lang/Comparable;)V
}

public final class dev/shtanko/algorithms/sorts/GnomeSort : dev/shtanko/algorithms/sorts/AbstractSortStrategy {
	public fun <init> ()V
	public fun perform ([Ljava/lang/Comparable;)V
}

public final class dev/shtanko/algorithms/sorts/HeapSort : dev/shtanko/algorithms/sorts/AbstractSortStrategy {
	public fun <init> ()V
	public fun perform ([Ljava/lang/Comparable;)V
}

public final class dev/shtanko/algorithms/sorts/InsertionSort : dev/shtanko/algorithms/sorts/AbstractSortStrategy {
	public fun <init> ()V
	public fun perform ([Ljava/lang/Comparable;)V
}

public final class dev/shtanko/algorithms/sorts/InsertionSort2 : dev/shtanko/algorithms/sorts/AbstractSortStrategy {
	public fun <init> ()V
	public fun perform ([Ljava/lang/Comparable;)V
}

public final class dev/shtanko/algorithms/sorts/IntArrSort : dev/shtanko/algorithms/sorts/SortStrategy {
	public fun <init> ()V
	public synthetic fun sort ([Ljava/lang/Comparable;)V
	public fun sort ([Ljava/lang/Integer;)V
}

public final class dev/shtanko/algorithms/sorts/MergeSort : dev/shtanko/algorithms/sorts/AbstractSortStrategy {
	public fun <init> ()V
	public fun perform ([Ljava/lang/Comparable;)V
}

public final class dev/shtanko/algorithms/sorts/PancakeSort : dev/shtanko/algorithms/sorts/AbstractSortStrategy {
	public fun <init> ()V
	public fun perform ([Ljava/lang/Comparable;)V
}

public final class dev/shtanko/algorithms/sorts/QuickSort : dev/shtanko/algorithms/sorts/AbstractSortStrategy {
	public fun <init> ()V
	public fun perform ([Ljava/lang/Comparable;)V
}

public final class dev/shtanko/algorithms/sorts/QuickSortRecursive : dev/shtanko/algorithms/sorts/AbstractSortStrategy {
	public fun <init> ()V
	public fun perform ([Ljava/lang/Comparable;)V
}

public final class dev/shtanko/algorithms/sorts/QuickSortRecursiveKt {
	public static final fun quickSort (Ljava/util/List;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/sorts/RadixSort : dev/shtanko/algorithms/sorts/SortStrategy {
	public static final field Companion Ldev/shtanko/algorithms/sorts/RadixSort$Companion;
	public fun <init> ()V
	public synthetic fun sort ([Ljava/lang/Comparable;)V
	public fun sort ([Ljava/lang/Integer;)V
}

public final class dev/shtanko/algorithms/sorts/RadixSort$Companion {
}

public final class dev/shtanko/algorithms/sorts/SelectionSort : dev/shtanko/algorithms/sorts/AbstractSortStrategy {
	public fun <init> ()V
	public fun perform ([Ljava/lang/Comparable;)V
}

public final class dev/shtanko/algorithms/sorts/ShellSort : dev/shtanko/algorithms/sorts/AbstractSortStrategy {
	public static final field Companion Ldev/shtanko/algorithms/sorts/ShellSort$Companion;
	public static final field GAP I
	public fun <init> ()V
	public fun perform ([Ljava/lang/Comparable;)V
}

public final class dev/shtanko/algorithms/sorts/ShellSort$Companion {
}

public final class dev/shtanko/algorithms/sorts/SimpleBubbleSort : dev/shtanko/algorithms/sorts/AbstractSortStrategy {
	public fun <init> ()V
	public fun perform ([Ljava/lang/Comparable;)V
}

public abstract interface class dev/shtanko/algorithms/sorts/SortStrategy {
	public abstract fun sort ([Ljava/lang/Comparable;)V
}

public final class dev/shtanko/algorithms/sorts/StableSelectionSort : dev/shtanko/algorithms/sorts/AbstractSortStrategy {
	public fun <init> ()V
	public fun perform ([Ljava/lang/Comparable;)V
}

public final class dev/shtanko/algorithms/sorts/TimSort : dev/shtanko/algorithms/sorts/AbstractSortStrategy {
	public static final field Companion Ldev/shtanko/algorithms/sorts/TimSort$Companion;
	public fun <init> ()V
	public fun perform ([Ljava/lang/Comparable;)V
}

public final class dev/shtanko/algorithms/sorts/TimSort$Companion {
}

public final class dev/shtanko/algorithms/strings/CheckAnagramsBruteForce : dev/shtanko/algorithms/strings/CheckAnagrams {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/strings/CheckAnagramsSort : dev/shtanko/algorithms/strings/CheckAnagrams {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/strings/CompressStringBruteForce : dev/shtanko/algorithms/strings/CompressString {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/strings/CountOccurrencesRecursive : dev/shtanko/algorithms/strings/CountOccurrences {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;CII)I
}

public final class dev/shtanko/algorithms/strings/RemoveAllWhitespaceBruteForce : dev/shtanko/algorithms/strings/RemoveAllWhitespace {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/strings/RemoveMiddleSubstringLoop : dev/shtanko/algorithms/strings/RemoveMiddleSubstring {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/strings/RemoveMiddleSubstringStd : dev/shtanko/algorithms/strings/RemoveMiddleSubstring {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/strings/ReverseStringStd : dev/shtanko/algorithms/strings/ReverseString {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/strings/ReverseStringTwoPointers : dev/shtanko/algorithms/strings/ReverseString {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/strings/SearchForSubstringBruteForce : dev/shtanko/algorithms/strings/SearchForSubstring {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/strings/SearchForSubstringStd : dev/shtanko/algorithms/strings/SearchForSubstring {
	public fun <init> ()V
	public fun invoke (Ljava/lang/String;Ljava/lang/String;)I
}

public final class dev/shtanko/algorithms/techniques/twopointer/TwoSums {
	public static final field INSTANCE Ldev/shtanko/algorithms/techniques/twopointer/TwoSums;
	public final fun twoPointers ([II)Z
}

public final class dev/shtanko/algorithms/templates/BuildPrefixSumKt {
	public static final fun buildPrefixSum ([I)[I
}

public final class dev/shtanko/algorithms/templates/EfficientStringBuildingKt {
	public static final fun efficientStringBuilding ([C)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/templates/LinkedListFastAndSlowPointerKt {
	public static final fun linkedListFastAndSlowPointer (Ldev/shtanko/algorithms/leetcode/ListNode;)I
}

public final class dev/shtanko/algorithms/templates/ReversingLinkedListKt {
	public static final fun reversingLinkedList (Ldev/shtanko/algorithms/leetcode/ListNode;)Ldev/shtanko/algorithms/leetcode/ListNode;
}

public final class dev/shtanko/algorithms/templates/SlidingWindowKt {
	public static final fun slidingWindowTemplate ([I)I
}

public final class dev/shtanko/algorithms/templates/TwoPointersOneInputOppositeEndsKt {
	public static final fun oneInputOppositeEnds ([I)I
}

public final class dev/shtanko/algorithms/templates/TwoPointersTwoInputsExhaustBothKt {
	public static final fun twoInputsExhaustBoth ([I[I)I
}

public final class dev/shtanko/algorithms/tree/traversals/BinaryTreeNode {
	public fun <init> (Ldev/shtanko/algorithms/tree/traversals/BinaryTreeNode;Ldev/shtanko/algorithms/tree/traversals/BinaryTreeNode;I)V
	public synthetic fun <init> (Ldev/shtanko/algorithms/tree/traversals/BinaryTreeNode;Ldev/shtanko/algorithms/tree/traversals/BinaryTreeNode;IILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun getData ()I
	public final fun getLeft ()Ldev/shtanko/algorithms/tree/traversals/BinaryTreeNode;
	public final fun getParent ()Ldev/shtanko/algorithms/tree/traversals/BinaryTreeNode;
	public final fun getRight ()Ldev/shtanko/algorithms/tree/traversals/BinaryTreeNode;
	public final fun isRightChild ()Z
	public final fun setLeft (Ldev/shtanko/algorithms/tree/traversals/BinaryTreeNode;)V
	public final fun setParent (Ldev/shtanko/algorithms/tree/traversals/BinaryTreeNode;)V
	public final fun setRight (Ldev/shtanko/algorithms/tree/traversals/BinaryTreeNode;)V
}

public abstract interface class dev/shtanko/algorithms/tree/traversals/BinaryTreeTraversalStrategy {
	public abstract fun invoke (Ldev/shtanko/algorithms/tree/traversals/BinaryTreeNode;)Ljava/util/List;
}

public abstract interface class dev/shtanko/algorithms/tree/traversals/TreeTraversalStrategy {
	public abstract fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/tree/traversals/inorder/BinaryTreeInorderIterativeTraversal : dev/shtanko/algorithms/tree/traversals/BinaryTreeTraversalStrategy {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/tree/traversals/BinaryTreeNode;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/tree/traversals/inorder/BinaryTreeInorderStackTraversal : dev/shtanko/algorithms/tree/traversals/BinaryTreeTraversalStrategy {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/tree/traversals/BinaryTreeNode;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/tree/traversals/inorder/InorderRecursive : dev/shtanko/algorithms/tree/traversals/TreeTraversalStrategy {
	public fun <init> ()V
	public fun invoke (Ldev/shtanko/algorithms/leetcode/TreeNode;)Ljava/util/List;
}

public final class dev/shtanko/algorithms/twopointers/ContainerWithMostWaterKt {
	public static final fun maxArea ([I)I
}

public abstract interface class dev/shtanko/algorithms/twopointers/IsPalindrome {
	public abstract fun invoke (Ljava/lang/String;)Z
}

public final class dev/shtanko/algorithms/twopointers/IsPalindromeKt {
	public static final fun isPalindromeSimplified ()Ldev/shtanko/algorithms/twopointers/IsPalindrome;
	public static final fun isPalindromeTwoPointers ()Ldev/shtanko/algorithms/twopointers/IsPalindrome;
}

public final class dev/shtanko/algorithms/twopointers/RemoveDuplicatesKt {
	public static final fun removeDuplicates ([I)I
}

public final class dev/shtanko/algorithms/twopointers/ReverseVowelsOfStringKt {
	public static final fun reverseVowels (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/algorithms/twopointers/SquaresOfSortedArrayKt {
	public static final fun sortedSquares ([I)[I
}

public final class dev/shtanko/algorithms/twopointers/TrappingRainWaterKt {
	public static final fun trap ([I)I
}

public final class dev/shtanko/algorithms/twopointers/ValidPalindromeKt {
	public static final fun isPalindrome (Ljava/lang/String;)Z
}

public abstract interface annotation class dev/shtanko/algorithms/utils/Dp : java/lang/annotation/Annotation {
}

public final class dev/shtanko/algorithms/utils/MeasureTimeKt {
	public static final fun measureTime (Ldev/shtanko/algorithms/sorts/AbstractSortStrategy;[ILkotlin/jvm/functions/Function0;)V
	public static final fun measureTime (Ljava/lang/String;Lkotlin/jvm/functions/Function0;)V
	public static final fun measureTime (Lkotlin/time/DurationUnit;Lkotlin/jvm/functions/Function0;)J
}

public final class dev/shtanko/algorithms/utils/ReverseKt {
	public static final fun reverse ([CII)V
}

public final class dev/shtanko/algorithms/utils/StringArrayKt {
	public static final fun emptyStringArray ()[Ljava/lang/String;
}

public abstract interface class dev/shtanko/api/GitHubService {
	public abstract fun getOrgRepos (Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getOrgReposCall (Ljava/lang/String;)Lretrofit2/Call;
	public abstract fun getRepoContributors (Ljava/lang/String;Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getRepoContributorsCall (Ljava/lang/String;Ljava/lang/String;)Lretrofit2/Call;
}

public final class dev/shtanko/api/GitHubServiceKt {
	public static final fun createGitHubService (Ljava/lang/String;Ljava/lang/String;Lokhttp3/OkHttpClient;Lretrofit2/Retrofit;)Ldev/shtanko/api/GitHubService;
	public static synthetic fun createGitHubService$default (Ljava/lang/String;Ljava/lang/String;Lokhttp3/OkHttpClient;Lretrofit2/Retrofit;ILjava/lang/Object;)Ldev/shtanko/api/GitHubService;
	public static final fun createHttpClient (Ljava/lang/String;)Lokhttp3/OkHttpClient;
	public static final fun createRetrofit (Lokhttp3/OkHttpClient;Lokhttp3/HttpUrl;Lkotlinx/serialization/json/Json;)Lretrofit2/Retrofit;
	public static synthetic fun createRetrofit$default (Lokhttp3/OkHttpClient;Lokhttp3/HttpUrl;Lkotlinx/serialization/json/Json;ILjava/lang/Object;)Lretrofit2/Retrofit;
}

public final class dev/shtanko/api/KtorGitHubApi {
	public fun <init> (Lio/ktor/client/HttpClient;)V
	public final fun getOrgRepos (Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun getRepoContributors (Ljava/lang/String;Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/api/KtorGithubServiceKt {
	public static final fun createKtorClient (Ljava/lang/String;Ljava/lang/String;Lio/ktor/client/engine/HttpClientEngine;)Lio/ktor/client/HttpClient;
	public static synthetic fun createKtorClient$default (Ljava/lang/String;Ljava/lang/String;Lio/ktor/client/engine/HttpClientEngine;ILjava/lang/Object;)Lio/ktor/client/HttpClient;
}

public final class dev/shtanko/api/KtorInterceptorKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public abstract interface class dev/shtanko/api/contributors/Contributors : kotlinx/coroutines/CoroutineScope {
	public abstract fun addCancelListener (Ljava/awt/event/ActionListener;)V
	public abstract fun addLoadListener (Lkotlin/jvm/functions/Function0;)V
	public abstract fun addOnWindowClosingListener (Lkotlin/jvm/functions/Function0;)V
	public fun getCoroutineContext ()Lkotlin/coroutines/CoroutineContext;
	public abstract fun getJob ()Lkotlinx/coroutines/Job;
	public abstract fun getParams ()Ldev/shtanko/api/contributors/Params;
	public abstract fun getSelectedVariant ()Ldev/shtanko/api/contributors/Variant;
	public fun init ()V
	public fun loadContributors ()V
	public fun loadInitialParams ()V
	public abstract fun removeCancelListener (Ljava/awt/event/ActionListener;)V
	public fun saveParams ()V
	public abstract fun setActionsStatus (ZZ)V
	public static synthetic fun setActionsStatus$default (Ldev/shtanko/api/contributors/Contributors;ZZILjava/lang/Object;)V
	public abstract fun setLoadingStatus (Ljava/lang/String;Z)V
	public abstract fun setParams (Ldev/shtanko/api/contributors/Params;)V
	public abstract fun updateContributors (Ljava/util/List;)V
}

public final class dev/shtanko/api/contributors/Contributors$DefaultImpls {
	public static fun getCoroutineContext (Ldev/shtanko/api/contributors/Contributors;)Lkotlin/coroutines/CoroutineContext;
	public static fun init (Ldev/shtanko/api/contributors/Contributors;)V
	public static fun loadContributors (Ldev/shtanko/api/contributors/Contributors;)V
	public static fun loadInitialParams (Ldev/shtanko/api/contributors/Contributors;)V
	public static fun saveParams (Ldev/shtanko/api/contributors/Contributors;)V
	public static synthetic fun setActionsStatus$default (Ldev/shtanko/api/contributors/Contributors;ZZILjava/lang/Object;)V
}

public final class dev/shtanko/api/contributors/ContributorsImpl : dev/shtanko/api/contributors/Contributors {
	public fun <init> ()V
	public fun addCancelListener (Ljava/awt/event/ActionListener;)V
	public fun addLoadListener (Lkotlin/jvm/functions/Function0;)V
	public fun addOnWindowClosingListener (Lkotlin/jvm/functions/Function0;)V
	public fun getCoroutineContext ()Lkotlin/coroutines/CoroutineContext;
	public fun getJob ()Lkotlinx/coroutines/CompletableJob;
	public synthetic fun getJob ()Lkotlinx/coroutines/Job;
	public fun getParams ()Ldev/shtanko/api/contributors/Params;
	public fun getSelectedVariant ()Ldev/shtanko/api/contributors/Variant;
	public fun init ()V
	public fun loadContributors ()V
	public fun loadInitialParams ()V
	public fun removeCancelListener (Ljava/awt/event/ActionListener;)V
	public fun saveParams ()V
	public fun setActionsStatus (ZZ)V
	public fun setLoadingStatus (Ljava/lang/String;Z)V
	public fun setParams (Ldev/shtanko/api/contributors/Params;)V
	public fun updateContributors (Ljava/util/List;)V
}

public abstract interface class dev/shtanko/api/contributors/ContributorsRepository {
	public abstract fun getOrgRepos (Ljava/lang/String;)V
}

public final class dev/shtanko/api/contributors/LoggerKt {
	public static final fun getLog ()Lorg/slf4j/Logger;
	public static final fun log (Ljava/lang/String;)V
	public static final fun logRepos (Ldev/shtanko/api/model/RequestData;Lretrofit2/Response;)V
	public static final fun logUsers (Ldev/shtanko/api/model/Repo;Lretrofit2/Response;)V
}

public final class dev/shtanko/api/contributors/MainKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/api/contributors/Params {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ldev/shtanko/api/contributors/Variant;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ljava/lang/String;
	public final fun component3 ()Ljava/lang/String;
	public final fun component4 ()Ldev/shtanko/api/contributors/Variant;
	public final fun copy (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ldev/shtanko/api/contributors/Variant;)Ldev/shtanko/api/contributors/Params;
	public static synthetic fun copy$default (Ldev/shtanko/api/contributors/Params;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ldev/shtanko/api/contributors/Variant;ILjava/lang/Object;)Ldev/shtanko/api/contributors/Params;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getOrg ()Ljava/lang/String;
	public final fun getPassword ()Ljava/lang/String;
	public final fun getUsername ()Ljava/lang/String;
	public final fun getVariant ()Ldev/shtanko/api/contributors/Variant;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/api/contributors/ParamsKt {
	public static final fun loadStoredParams ()Ldev/shtanko/api/contributors/Params;
	public static final fun removeStoredParams ()V
	public static final fun saveParams (Ldev/shtanko/api/contributors/Params;)V
}

public final class dev/shtanko/api/contributors/Variant : java/lang/Enum {
	public static final field BACKGROUND Ldev/shtanko/api/contributors/Variant;
	public static final field BLOCKING Ldev/shtanko/api/contributors/Variant;
	public static final field CALLBACKS Ldev/shtanko/api/contributors/Variant;
	public static final field CHANNELS Ldev/shtanko/api/contributors/Variant;
	public static final field CONCURRENT Ldev/shtanko/api/contributors/Variant;
	public static final field NOT_CANCELLABLE Ldev/shtanko/api/contributors/Variant;
	public static final field PROGRESS Ldev/shtanko/api/contributors/Variant;
	public static final field SUSPEND Ldev/shtanko/api/contributors/Variant;
	public final fun getDescription ()Ljava/lang/String;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Ldev/shtanko/api/contributors/Variant;
	public static fun values ()[Ldev/shtanko/api/contributors/Variant;
}

public final class dev/shtanko/api/model/Repo {
	public static final field Companion Ldev/shtanko/api/model/Repo$Companion;
	public fun <init> (JLjava/lang/String;)V
	public final fun component1 ()J
	public final fun component2 ()Ljava/lang/String;
	public final fun copy (JLjava/lang/String;)Ldev/shtanko/api/model/Repo;
	public static synthetic fun copy$default (Ldev/shtanko/api/model/Repo;JLjava/lang/String;ILjava/lang/Object;)Ldev/shtanko/api/model/Repo;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getId ()J
	public final fun getName ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final synthetic class dev/shtanko/api/model/Repo$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Ldev/shtanko/api/model/Repo$$serializer;
	public final fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public final fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ldev/shtanko/api/model/Repo;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public final fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public final fun serialize (Lkotlinx/serialization/encoding/Encoder;Ldev/shtanko/api/model/Repo;)V
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class dev/shtanko/api/model/Repo$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class dev/shtanko/api/model/RequestData {
	public static final field Companion Ldev/shtanko/api/model/RequestData$Companion;
	public fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ljava/lang/String;
	public final fun component3 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ldev/shtanko/api/model/RequestData;
	public static synthetic fun copy$default (Ldev/shtanko/api/model/RequestData;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Ldev/shtanko/api/model/RequestData;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getOrg ()Ljava/lang/String;
	public final fun getPassword ()Ljava/lang/String;
	public final fun getUsername ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final synthetic class dev/shtanko/api/model/RequestData$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Ldev/shtanko/api/model/RequestData$$serializer;
	public final fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public final fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ldev/shtanko/api/model/RequestData;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public final fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public final fun serialize (Lkotlinx/serialization/encoding/Encoder;Ldev/shtanko/api/model/RequestData;)V
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class dev/shtanko/api/model/RequestData$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class dev/shtanko/api/model/User {
	public static final field Companion Ldev/shtanko/api/model/User$Companion;
	public fun <init> (Ljava/lang/String;I)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()I
	public final fun copy (Ljava/lang/String;I)Ldev/shtanko/api/model/User;
	public static synthetic fun copy$default (Ldev/shtanko/api/model/User;Ljava/lang/String;IILjava/lang/Object;)Ldev/shtanko/api/model/User;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getContributions ()I
	public final fun getLogin ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final synthetic class dev/shtanko/api/model/User$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Ldev/shtanko/api/model/User$$serializer;
	public final fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public final fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ldev/shtanko/api/model/User;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public final fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public final fun serialize (Lkotlinx/serialization/encoding/Encoder;Ldev/shtanko/api/model/User;)V
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class dev/shtanko/api/model/User$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class dev/shtanko/api/samples/ChannelsSample {
	public static final field INSTANCE Ldev/shtanko/api/samples/ChannelsSample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/api/tasks/AggregateKt {
	public static final fun aggregate (Ljava/util/List;)Ljava/util/List;
}

public final class dev/shtanko/api/tasks/BlockingRequestKt {
	public static final fun bodyList (Lretrofit2/Response;)Ljava/util/List;
	public static final fun loadContributorsBlocking (Ldev/shtanko/api/GitHubService;Ldev/shtanko/api/model/RequestData;)Ljava/util/List;
}

public final class dev/shtanko/api/tasks/CallbackRequestKt {
	public static final fun loadContributorsCallbacks (Ldev/shtanko/api/GitHubService;Ldev/shtanko/api/model/RequestData;Lkotlin/jvm/functions/Function1;)V
	public static final fun onResponse (Lretrofit2/Call;Lkotlin/jvm/functions/Function1;)V
}

public final class dev/shtanko/api/tasks/LoadContributorsBackgroundKt {
	public static final fun loadContributorsBackground (Ldev/shtanko/api/GitHubService;Ldev/shtanko/api/model/RequestData;)V
}

public final class dev/shtanko/api/tasks/LoadContributorsChannelsKt {
	public static final fun loadContributorsChannels (Ldev/shtanko/api/GitHubService;Ldev/shtanko/api/model/RequestData;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/api/tasks/LoadContributorsConcurrentKt {
	public static final fun loadContributorsConcurrent (Ldev/shtanko/api/GitHubService;Ldev/shtanko/api/model/RequestData;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/api/tasks/LoadContributorsNotCancellableKt {
	public static final fun loadContributorsNotCancellable (Ldev/shtanko/api/GitHubService;Ldev/shtanko/api/model/RequestData;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/api/tasks/LoadContributorsProgressKt {
	public static final fun loadContributorsProgress (Ldev/shtanko/api/GitHubService;Ldev/shtanko/api/model/RequestData;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/api/tasks/LoadContributorsSuspendKt {
	public static final fun loadContributorsSuspend (Ldev/shtanko/api/GitHubService;Ldev/shtanko/api/model/RequestData;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/benchmark/Benchmark {
	public fun <init> ()V
	public fun <init> (Ldev/shtanko/benchmark/MemoryMeasurer;)V
	public synthetic fun <init> (Ldev/shtanko/benchmark/MemoryMeasurer;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun invoke (Ljava/lang/String;Lkotlin/jvm/functions/Function1;Ldev/shtanko/benchmark/BenchmarkConfig;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun invoke$default (Ldev/shtanko/benchmark/Benchmark;Ljava/lang/String;Lkotlin/jvm/functions/Function1;Ldev/shtanko/benchmark/BenchmarkConfig;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public final fun runBenchmarks (Ljava/util/List;Ldev/shtanko/benchmark/BenchmarkConfig;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun runBenchmarks$default (Ldev/shtanko/benchmark/Benchmark;Ljava/util/List;Ldev/shtanko/benchmark/BenchmarkConfig;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
}

public final class dev/shtanko/benchmark/BenchmarkConfig {
	public fun <init> ()V
	public fun <init> (III)V
	public synthetic fun <init> (IIIILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()I
	public final fun component2 ()I
	public final fun component3 ()I
	public final fun copy (III)Ldev/shtanko/benchmark/BenchmarkConfig;
	public static synthetic fun copy$default (Ldev/shtanko/benchmark/BenchmarkConfig;IIIILjava/lang/Object;)Ldev/shtanko/benchmark/BenchmarkConfig;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getIterations ()I
	public final fun getMemorySamples ()I
	public final fun getWarmUpIterations ()I
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/benchmark/BenchmarkKt {
	public static final fun main (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun main ([Ljava/lang/String;)V
}

public abstract class dev/shtanko/benchmark/BenchmarkResult {
}

public final class dev/shtanko/benchmark/BenchmarkResult$Error : dev/shtanko/benchmark/BenchmarkResult {
	public fun <init> (Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;)Ldev/shtanko/benchmark/BenchmarkResult$Error;
	public static synthetic fun copy$default (Ldev/shtanko/benchmark/BenchmarkResult$Error;Ljava/lang/String;ILjava/lang/Object;)Ldev/shtanko/benchmark/BenchmarkResult$Error;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getMessage ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/benchmark/BenchmarkResult$Success : dev/shtanko/benchmark/BenchmarkResult {
	public fun <init> (Ljava/lang/String;JJ)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()J
	public final fun component3 ()J
	public final fun copy (Ljava/lang/String;JJ)Ldev/shtanko/benchmark/BenchmarkResult$Success;
	public static synthetic fun copy$default (Ldev/shtanko/benchmark/BenchmarkResult$Success;Ljava/lang/String;JJILjava/lang/Object;)Ldev/shtanko/benchmark/BenchmarkResult$Success;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getExecutionTimeNanos ()J
	public final fun getLabel ()Ljava/lang/String;
	public final fun getMemoryUsage ()J
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/benchmark/BenchmarkRunner {
	public abstract fun invoke (Ljava/util/List;Ldev/shtanko/benchmark/BenchmarkConfig;)V
}

public final class dev/shtanko/benchmark/CoroutinesMemoryMeasurer : dev/shtanko/benchmark/MemoryMeasurer {
	public fun <init> ()V
	public fun invoke (Lkotlin/jvm/functions/Function1;Ldev/shtanko/benchmark/BenchmarkConfig;)J
}

public abstract interface class dev/shtanko/benchmark/MemoryMeasurer {
	public abstract fun invoke (Lkotlin/jvm/functions/Function1;Ldev/shtanko/benchmark/BenchmarkConfig;)J
}

public final class dev/shtanko/benchmark/SimpleBenchmarkRunner : dev/shtanko/benchmark/BenchmarkRunner {
	public fun <init> ()V
	public fun invoke (Ljava/util/List;Ldev/shtanko/benchmark/BenchmarkConfig;)V
}

public final class dev/shtanko/benchmark/executor/CoroutineCPU : dev/shtanko/benchmark/executor/TaskExecutor {
	public static final field INSTANCE Ldev/shtanko/benchmark/executor/CoroutineCPU;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/util/List;Lkotlin/jvm/functions/Function1;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/benchmark/executor/CoroutineCPULimit : dev/shtanko/benchmark/executor/TaskExecutor {
	public static final field INSTANCE Ldev/shtanko/benchmark/executor/CoroutineCPULimit;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/util/List;Lkotlin/jvm/functions/Function1;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/benchmark/executor/CoroutineIo : dev/shtanko/benchmark/executor/TaskExecutor {
	public static final field INSTANCE Ldev/shtanko/benchmark/executor/CoroutineIo;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/util/List;Lkotlin/jvm/functions/Function1;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/benchmark/executor/CoroutineOne : dev/shtanko/benchmark/executor/TaskExecutor {
	public static final field INSTANCE Ldev/shtanko/benchmark/executor/CoroutineOne;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/util/List;Lkotlin/jvm/functions/Function1;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/benchmark/executor/DirectInvoke : dev/shtanko/benchmark/executor/TaskExecutor {
	public static final field INSTANCE Ldev/shtanko/benchmark/executor/DirectInvoke;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/util/List;Lkotlin/jvm/functions/Function1;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/benchmark/executor/ExecutorCachedCPU : dev/shtanko/benchmark/executor/TaskExecutor {
	public static final field INSTANCE Ldev/shtanko/benchmark/executor/ExecutorCachedCPU;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/util/List;Lkotlin/jvm/functions/Function1;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/benchmark/executor/ExecutorFixedCPU : dev/shtanko/benchmark/executor/TaskExecutor {
	public static final field INSTANCE Ldev/shtanko/benchmark/executor/ExecutorFixedCPU;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/util/List;Lkotlin/jvm/functions/Function1;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/benchmark/executor/ExecutorFixedIo : dev/shtanko/benchmark/executor/TaskExecutor {
	public static final field INSTANCE Ldev/shtanko/benchmark/executor/ExecutorFixedIo;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/util/List;Lkotlin/jvm/functions/Function1;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/benchmark/executor/ExecutorSingleCPU : dev/shtanko/benchmark/executor/TaskExecutor {
	public static final field INSTANCE Ldev/shtanko/benchmark/executor/ExecutorSingleCPU;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/util/List;Lkotlin/jvm/functions/Function1;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/benchmark/executor/ExecutorStealCPU : dev/shtanko/benchmark/executor/TaskExecutor {
	public static final field INSTANCE Ldev/shtanko/benchmark/executor/ExecutorStealCPU;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/util/List;Lkotlin/jvm/functions/Function1;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/benchmark/executor/ExecutorStealIo : dev/shtanko/benchmark/executor/TaskExecutor {
	public static final field INSTANCE Ldev/shtanko/benchmark/executor/ExecutorStealIo;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/util/List;Lkotlin/jvm/functions/Function1;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/benchmark/executor/FlowCPU : dev/shtanko/benchmark/executor/TaskExecutor {
	public static final field INSTANCE Ldev/shtanko/benchmark/executor/FlowCPU;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/util/List;Lkotlin/jvm/functions/Function1;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/benchmark/executor/FlowCPULimit : dev/shtanko/benchmark/executor/TaskExecutor {
	public static final field INSTANCE Ldev/shtanko/benchmark/executor/FlowCPULimit;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/util/List;Lkotlin/jvm/functions/Function1;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/benchmark/executor/FlowIo : dev/shtanko/benchmark/executor/TaskExecutor {
	public static final field INSTANCE Ldev/shtanko/benchmark/executor/FlowIo;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/util/List;Lkotlin/jvm/functions/Function1;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/benchmark/executor/FlowOne : dev/shtanko/benchmark/executor/TaskExecutor {
	public static final field INSTANCE Ldev/shtanko/benchmark/executor/FlowOne;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/util/List;Lkotlin/jvm/functions/Function1;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/benchmark/executor/RxCPU : dev/shtanko/benchmark/executor/TaskExecutor {
	public static final field INSTANCE Ldev/shtanko/benchmark/executor/RxCPU;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/util/List;Lkotlin/jvm/functions/Function1;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/benchmark/executor/RxFlow : dev/shtanko/benchmark/executor/TaskExecutor {
	public static final field INSTANCE Ldev/shtanko/benchmark/executor/RxFlow;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/util/List;Lkotlin/jvm/functions/Function1;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/benchmark/executor/RxIo : dev/shtanko/benchmark/executor/TaskExecutor {
	public static final field INSTANCE Ldev/shtanko/benchmark/executor/RxIo;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/util/List;Lkotlin/jvm/functions/Function1;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/benchmark/executor/RxOne : dev/shtanko/benchmark/executor/TaskExecutor {
	public static final field INSTANCE Ldev/shtanko/benchmark/executor/RxOne;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun invoke (Ljava/util/List;Lkotlin/jvm/functions/Function1;)V
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/benchmark/executor/TaskExecutor {
	public abstract fun invoke (Ljava/util/List;Lkotlin/jvm/functions/Function1;)V
}

public final class dev/shtanko/benchmark/jobs/ArithmeticJob : dev/shtanko/benchmark/jobs/BenchmarkJob {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract interface class dev/shtanko/benchmark/jobs/BenchmarkJob {
	public abstract fun invoke ([Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/benchmark/jobs/ConcurrentJob : dev/shtanko/benchmark/jobs/BenchmarkJob {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/benchmark/jobs/DatabaseQuerySimulationJob : dev/shtanko/benchmark/jobs/BenchmarkJob {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/benchmark/jobs/FileCompressionJob : dev/shtanko/benchmark/jobs/BenchmarkJob {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/benchmark/jobs/FileIOManipulationsJob : dev/shtanko/benchmark/jobs/BenchmarkJob {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/benchmark/jobs/HeapSortJob : dev/shtanko/benchmark/jobs/BenchmarkJob {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/benchmark/jobs/HeavyCPUJob : dev/shtanko/benchmark/jobs/BenchmarkJob {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/benchmark/jobs/JSONJob : dev/shtanko/benchmark/jobs/BenchmarkJob {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/benchmark/jobs/ListManipulationsJob : dev/shtanko/benchmark/jobs/BenchmarkJob {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/benchmark/jobs/ListOperationsJob : dev/shtanko/benchmark/jobs/BenchmarkJob {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/benchmark/jobs/MatrixMultiplicationJob : dev/shtanko/benchmark/jobs/BenchmarkJob {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/benchmark/jobs/PrimeNumberComputationJob : dev/shtanko/benchmark/jobs/BenchmarkJob {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/benchmark/jobs/SimpleJob : dev/shtanko/benchmark/jobs/BenchmarkJob {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/benchmark/jobs/SortingLargeArrayJob : dev/shtanko/benchmark/jobs/BenchmarkJob {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/benchmark/jobs/StorageJob : dev/shtanko/benchmark/jobs/BenchmarkJob {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/benchmark/jobs/StringManipulationJob : dev/shtanko/benchmark/jobs/BenchmarkJob {
	public fun <init> ()V
	public fun invoke ([Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/benchmark/memory/MemoryKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
	public static final fun recordMemoryUsage (Ljava/lang/Runnable;I)V
}

public final class dev/shtanko/collection/CanonicalizedMap : java/util/Map, kotlin/jvm/internal/markers/KMutableMap {
	public fun <init> (Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)V
	public synthetic fun <init> (Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun clear ()V
	public fun containsKey (Ljava/lang/Object;)Z
	public fun containsValue (Ljava/lang/Object;)Z
	public final fun copy ()Ldev/shtanko/collection/CanonicalizedMap;
	public final fun entrySet ()Ljava/util/Set;
	public fun get (Ljava/lang/Object;)Ljava/lang/Object;
	public fun getEntries ()Ljava/util/Set;
	public fun getKeys ()Ljava/util/Set;
	public fun getSize ()I
	public fun getValues ()Ljava/util/Collection;
	public fun isEmpty ()Z
	public final fun keySet ()Ljava/util/Set;
	public fun put (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
	public fun putAll (Ljava/util/Map;)V
	public fun remove (Ljava/lang/Object;)Ljava/lang/Object;
	public final fun size ()I
	public final fun toMap ()Ljava/util/Map;
	public final fun toMapOfCanonicalKeys ()Ljava/util/Map;
	public final fun values ()Ljava/util/Collection;
}

public final class dev/shtanko/collection/CanonicalizedMapKt {
	public static final fun toCanonicalizedMap (Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ldev/shtanko/collection/CanonicalizedMap;
	public static synthetic fun toCanonicalizedMap$default (Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Ldev/shtanko/collection/CanonicalizedMap;
}

public class dev/shtanko/collection/SplayTreeMapNode : dev/shtanko/collection/SplayTreeNode {
	public fun <init> (Ljava/lang/Object;Ljava/lang/Object;)V
	public final fun getValue ()Ljava/lang/Object;
	public final fun replaceValue (Ljava/lang/Object;)Ldev/shtanko/collection/SplayTreeMapNode;
	public final fun setValue (Ljava/lang/Object;)V
}

public class dev/shtanko/collection/SplayTreeNode {
	public fun <init> (Ljava/lang/Object;)V
	public final fun getKey ()Ljava/lang/Object;
	public final fun getLeft ()Ldev/shtanko/collection/SplayTreeNode;
	public final fun getRight ()Ldev/shtanko/collection/SplayTreeNode;
	public final fun setLeft (Ldev/shtanko/collection/SplayTreeNode;)V
	public final fun setRight (Ldev/shtanko/collection/SplayTreeNode;)V
}

public class dev/shtanko/collection/SplayTreeSetNode : dev/shtanko/collection/SplayTreeNode {
	public fun <init> (Ljava/lang/Object;)V
}

public final class dev/shtanko/concurrency/AtomicExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/AtomicExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/AtomicIncrementor {
	public fun <init> ()V
	public final fun getSharedCounter ()I
	public final fun getSharedCounter ()Ljava/util/concurrent/atomic/AtomicInteger;
	public final fun updateCounterIfNecessary (Z)V
}

public final class dev/shtanko/concurrency/AtomicPrimitivesKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/AtomicReferenceArrayExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/AtomicReferenceArrayExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/ConcurrentFileDownloads {
	public static final field INSTANCE Ldev/shtanko/concurrency/ConcurrentFileDownloads;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/ConcurrentFileDownloads$FileDownloadTask : java/util/concurrent/Callable {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;)V
	public synthetic fun call ()Ljava/lang/Object;
	public fun call ()Ljava/lang/String;
}

public final class dev/shtanko/concurrency/CountDownLatchKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/CountedCompleterExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/CountedCompleterExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/CountedCompleterExample$SumTask : java/util/concurrent/CountedCompleter {
	public fun <init> ([IIILjava/util/concurrent/CountedCompleter;)V
	public fun compute ()V
	public final fun getResult ()I
	public fun onCompletion (Ljava/util/concurrent/CountedCompleter;)V
}

public final class dev/shtanko/concurrency/Counter {
	public fun <init> ()V
	public final fun addAndGet ()I
	public final fun get ()I
	public final fun inc ()I
}

public final class dev/shtanko/concurrency/CounterMutex {
	public fun <init> ()V
	public final fun inc (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun value ()I
}

public final class dev/shtanko/concurrency/CustomContinuation : kotlin/coroutines/Continuation {
	public fun <init> (Lkotlin/coroutines/Continuation;)V
	public fun getContext ()Lkotlin/coroutines/CoroutineContext;
	public fun resumeWith (Ljava/lang/Object;)V
}

public final class dev/shtanko/concurrency/CyclicBarrierKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/DeadlockExample3 {
	public static final field INSTANCE Ldev/shtanko/concurrency/DeadlockExample3;
	public static final fun main ([Ljava/lang/String;)V
	public final fun thread1 ()V
	public final fun thread2 ()V
	public final fun thread3 ()V
}

public final class dev/shtanko/concurrency/DeadlockPrevention {
	public static final field INSTANCE Ldev/shtanko/concurrency/DeadlockPrevention;
	public static final fun main ([Ljava/lang/String;)V
	public final fun method1 ()V
	public final fun method2 ()V
}

public final class dev/shtanko/concurrency/DeadlockPrevention3 {
	public static final field INSTANCE Ldev/shtanko/concurrency/DeadlockPrevention3;
	public static final fun main ([Ljava/lang/String;)V
	public final fun thread1 ()V
	public final fun thread2 ()V
	public final fun thread3 ()V
}

public final class dev/shtanko/concurrency/DeadlocksExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/DeadlocksExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/DeadlocksExample$Human {
	public fun <init> (Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;)Ldev/shtanko/concurrency/DeadlocksExample$Human;
	public static synthetic fun copy$default (Ldev/shtanko/concurrency/DeadlocksExample$Human;Ljava/lang/String;ILjava/lang/Object;)Ldev/shtanko/concurrency/DeadlocksExample$Human;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getName ()Ljava/lang/String;
	public fun hashCode ()I
	public final fun sayHi (Ldev/shtanko/concurrency/DeadlocksExample$Human;)V
	public final fun sayHiBack (Ldev/shtanko/concurrency/DeadlocksExample$Human;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/concurrency/DeadlocksExample2 {
	public static final field INSTANCE Ldev/shtanko/concurrency/DeadlocksExample2;
	public static final fun main ([Ljava/lang/String;)V
	public final fun method1 ()V
	public final fun method2 ()V
}

public final class dev/shtanko/concurrency/DiningPhilosophersProblem {
	public static final field INSTANCE Ldev/shtanko/concurrency/DiningPhilosophersProblem;
	public static final fun main ([Ljava/lang/String;)V
	public final fun philosopher (I)V
	public final fun run ()V
}

public final class dev/shtanko/concurrency/ExchangerExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/ExchangerExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/ExchangerSample {
	public static final field INSTANCE Ldev/shtanko/concurrency/ExchangerSample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/ExecutorServiceExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/ExecutorServiceExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/ForkJoinPoolExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/ForkJoinPoolExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/ForkJoinPoolExample$SumTask : java/util/concurrent/RecursiveTask {
	public static final field Companion Ldev/shtanko/concurrency/ForkJoinPoolExample$SumTask$Companion;
	public fun <init> ([III)V
	public synthetic fun compute ()Ljava/lang/Object;
}

public final class dev/shtanko/concurrency/ForkJoinPoolExample$SumTask$Companion {
}

public final class dev/shtanko/concurrency/ForkJoinPoolMergeSort {
	public static final field INSTANCE Ldev/shtanko/concurrency/ForkJoinPoolMergeSort;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/GeneratingUserReportsConcurrently {
	public static final field INSTANCE Ldev/shtanko/concurrency/GeneratingUserReportsConcurrently;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/GeneratingUserReportsConcurrently$ReportGenerationTask : java/util/concurrent/Callable {
	public fun <init> (Ljava/lang/String;)V
	public synthetic fun call ()Ljava/lang/Object;
	public fun call ()Ljava/lang/String;
}

public final class dev/shtanko/concurrency/InheritableThreadLocalExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/InheritableThreadLocalExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/InterruptibleThread : java/lang/Thread {
	public fun <init> (Lkotlin/jvm/functions/Function0;)V
	public fun run ()V
}

public final class dev/shtanko/concurrency/LinkedTransferQueueExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/LinkedTransferQueueExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/Livelocks {
	public static final field INSTANCE Ldev/shtanko/concurrency/Livelocks;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/LocksKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/MatrixMultiplyBruteForce : dev/shtanko/concurrency/MatrixMultiplyStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/util/List;Ljava/util/List;)Ljava/util/List;
}

public final class dev/shtanko/concurrency/MatrixMultiplyParallelism : dev/shtanko/concurrency/MatrixMultiplyStrategy {
	public fun <init> ()V
	public fun invoke (Ljava/util/List;Ljava/util/List;)Ljava/util/List;
}

public abstract interface class dev/shtanko/concurrency/MatrixMultiplyStrategy {
	public abstract fun invoke (Ljava/util/List;Ljava/util/List;)Ljava/util/List;
}

public final class dev/shtanko/concurrency/MatrixMultiplyStrategyKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
	public static final fun transpose (Ljava/util/List;)Ljava/util/List;
}

public final class dev/shtanko/concurrency/MatrixMultiplyTiles : dev/shtanko/concurrency/MatrixMultiplyStrategy {
	public static final field Companion Ldev/shtanko/concurrency/MatrixMultiplyTiles$Companion;
	public static final field TILE_SIZE I
	public fun <init> ()V
	public fun invoke (Ljava/util/List;Ljava/util/List;)Ljava/util/List;
}

public final class dev/shtanko/concurrency/MatrixMultiplyTiles$Companion {
}

public final class dev/shtanko/concurrency/MergeSortTask : java/util/concurrent/RecursiveAction {
	public static final field Companion Ldev/shtanko/concurrency/MergeSortTask$Companion;
	public fun <init> ([III)V
}

public final class dev/shtanko/concurrency/MergeSortTask$Companion {
}

public final class dev/shtanko/concurrency/MultipleReading {
	public static final field INSTANCE Ldev/shtanko/concurrency/MultipleReading;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/MultipleReadingExample2 {
	public static final field INSTANCE Ldev/shtanko/concurrency/MultipleReadingExample2;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/MyAtomicInteger {
	public fun <init> (I)V
	public final fun get ()I
	public final fun incrementAndGet ()I
}

public final class dev/shtanko/concurrency/ParallelSmartMergeSort : java/util/concurrent/RecursiveAction {
	public static final field Companion Ldev/shtanko/concurrency/ParallelSmartMergeSort$Companion;
	public fun <init> ([III)V
	public final fun getArray ()[I
	public final fun getHigh ()I
	public final fun getLow ()I
}

public final class dev/shtanko/concurrency/ParallelSmartMergeSort$Companion {
}

public final class dev/shtanko/concurrency/PhaserExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/PhaserExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/ProduceNumbersChannel2Kt {
	public static final fun filterNumbers (Lkotlinx/coroutines/channels/ReceiveChannel;Lkotlinx/coroutines/channels/SendChannel;Lkotlin/jvm/functions/Function1;)Lkotlinx/coroutines/Job;
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
	public static final fun printResults2 (Lkotlinx/coroutines/channels/ReceiveChannel;)Lkotlinx/coroutines/Job;
	public static final fun produceNumbers (Lkotlinx/coroutines/channels/SendChannel;)Lkotlinx/coroutines/Job;
	public static final fun squareNumbers (Lkotlinx/coroutines/channels/ReceiveChannel;Lkotlinx/coroutines/channels/SendChannel;)Lkotlinx/coroutines/Job;
}

public final class dev/shtanko/concurrency/ProduceNumbersChannelKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
	public static final fun printResults (Lkotlinx/coroutines/channels/ReceiveChannel;)Lkotlinx/coroutines/Job;
	public static final fun produceNumbers ()Lkotlinx/coroutines/channels/ReceiveChannel;
	public static final fun squareNumbers (Lkotlinx/coroutines/channels/ReceiveChannel;)Lkotlinx/coroutines/channels/ReceiveChannel;
}

public final class dev/shtanko/concurrency/ProducerConsumerExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/ProducerConsumerExample;
	public final fun consumer ()V
	public static final fun main ([Ljava/lang/String;)V
	public final fun producer ()V
	public final fun run ()V
}

public final class dev/shtanko/concurrency/RaceConditionExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/RaceConditionExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/RaceConditionFix {
	public static final field INSTANCE Ldev/shtanko/concurrency/RaceConditionFix;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/ReadWriteLockExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/ReadWriteLockExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/ScalableThreadSafeArrayList {
	public fun <init> ()V
	public fun <init> (I)V
	public synthetic fun <init> (IILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun addElement (Ljava/lang/Object;)V
	public final fun getElement (I)Ljava/lang/Object;
}

public final class dev/shtanko/concurrency/ScheduledExecutorExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/ScheduledExecutorExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/SemaphoreCoroutinesKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/SemaphoreIncrementor {
	public fun <init> ()V
	public final fun getSharedCounter ()I
	public final fun updateCounterIfNecessary (Z)V
}

public final class dev/shtanko/concurrency/SemaphoreKt {
	public static final field MAX_PROCESSING_TIME J
	public static final field MIN_PROCESSING_TIME J
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
	public static final fun processItem (I)V
}

public final class dev/shtanko/concurrency/SemaphoreRWSample {
	public static final field INSTANCE Ldev/shtanko/concurrency/SemaphoreRWSample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/SequenceGenerator {
	public fun <init> ()V
	public final fun getNextSequence ()I
	public final fun invoke (IILkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun invoke$default (Ldev/shtanko/concurrency/SequenceGenerator;IILkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public final fun next ()V
	public final fun prev ()V
}

public final class dev/shtanko/concurrency/SerialExecutor : java/util/concurrent/Executor {
	public static final field Companion Ldev/shtanko/concurrency/SerialExecutor$Companion;
	public fun <init> ()V
	public fun execute (Ljava/lang/Runnable;)V
}

public final class dev/shtanko/concurrency/SerialExecutor$Companion {
}

public final class dev/shtanko/concurrency/SharedFlagThread : java/lang/Thread {
	public fun <init> (Ljava/util/concurrent/atomic/AtomicBoolean;Lkotlin/jvm/functions/Function0;)V
	public fun run ()V
}

public final class dev/shtanko/concurrency/SimpleExecutorExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/SimpleExecutorExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/Starvation {
	public static final field INSTANCE Ldev/shtanko/concurrency/Starvation;
	public final fun getLock ()Lkotlinx/coroutines/sync/Mutex;
	public static final fun main ([Ljava/lang/String;)V
	public final fun withLock (Lkotlinx/coroutines/sync/Mutex;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/concurrency/StarvationThreads {
	public static final field INSTANCE Ldev/shtanko/concurrency/StarvationThreads;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/StopThreadKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/SynchronizedIncrementor {
	public fun <init> ()V
	public final fun getSharedCounter ()I
	public final fun setSharedCounter (I)V
	public final fun updateCounter ()V
}

public final class dev/shtanko/concurrency/SynchronizedKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/SynchronizedOptimizedIncrementor {
	public fun <init> ()V
	public final fun getSharedCounter ()I
	public final fun updateCounterIfNecessary (Z)V
}

public final class dev/shtanko/concurrency/SynchronizedOptimizedKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/ThreadInterruption {
	public static final field INSTANCE Ldev/shtanko/concurrency/ThreadInterruption;
	public final fun longRunningTask ()V
	public static final fun main ([Ljava/lang/String;)V
	public final fun run ()V
}

public final class dev/shtanko/concurrency/ThreadLocalExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/ThreadLocalExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/TryLockKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/UsingCallableAndFuture {
	public static final field INSTANCE Ldev/shtanko/concurrency/UsingCallableAndFuture;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/VolatileIncrementor {
	public fun <init> ()V
	public final fun getSharedCounter ()I
	public final fun setSharedCounter (I)V
	public final fun updateCounter ()V
}

public final class dev/shtanko/concurrency/VolatileKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/collections/BlockingQueueExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/collections/BlockingQueueExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/collections/CollectionsSynchronizedList {
	public static final field INSTANCE Ldev/shtanko/concurrency/collections/CollectionsSynchronizedList;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/collections/ConcurrentHashMapExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/collections/ConcurrentHashMapExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/collections/ConcurrentLinkedDequeExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/collections/ConcurrentLinkedDequeExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/collections/ConcurrentLinkedQueueExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/collections/ConcurrentLinkedQueueExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/collections/ConcurrentSkipListMapExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/collections/ConcurrentSkipListMapExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/collections/ConcurrentSkipListSetExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/collections/ConcurrentSkipListSetExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/collections/CopyOnWriteArrayListExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/collections/CopyOnWriteArrayListExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/collections/CopyOnWriteArrayListExampleKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/collections/EventDispatcher {
	public fun <init> ()V
	public final fun addListener (Ldev/shtanko/concurrency/collections/EventListener;)V
	public final fun dispatchEvent (Ljava/lang/String;)V
	public final fun removeListener (Ldev/shtanko/concurrency/collections/EventListener;)V
}

public abstract interface class dev/shtanko/concurrency/collections/EventListener {
	public abstract fun onEvent (Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/collections/HashtableExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/collections/HashtableExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/collections/SharedMutableStateExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/collections/SharedMutableStateExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/BackgroundTaskCancellation {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/BackgroundTaskCancellation;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/BackpressureHandling {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/BackpressureHandling;
	public final fun fastEmittingFlow ()Lkotlinx/coroutines/flow/Flow;
	public static final fun main ([Ljava/lang/String;)V
	public final fun slowConsumer (ILkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/concurrency/coroutines/CachingWithSharedFlow {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/CachingWithSharedFlow;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/ChainingMultipleAsyncOperations {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/ChainingMultipleAsyncOperations;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/ChannelEventBusKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/Consumer {
	public fun <init> (Lkotlinx/coroutines/channels/Channel;)V
	public final fun consume (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/concurrency/coroutines/ConsumerProducerKt {
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/CoroutineAsyncBuilderExceptionKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/CoroutineAsyncBuilderKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/CoroutineChannelsKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/CoroutineJobKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/CoroutineJobWithChildKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/CoroutineProducer {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/CoroutineProducer;
	public static final fun main ([Ljava/lang/String;)V
	public final fun produceNumbers (Lkotlinx/coroutines/CoroutineScope;)Lkotlinx/coroutines/channels/ReceiveChannel;
}

public final class dev/shtanko/concurrency/coroutines/CoroutineScopeBuilderKt {
	public static final fun doWork (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/CoroutineScopeExampleKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/CountdownTimer {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/CountdownTimer;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/CountdownTimerKt {
	public static final fun startCountdownTimer (ILkotlinx/coroutines/flow/StateFlow;)Lkotlinx/coroutines/flow/Flow;
}

public final class dev/shtanko/concurrency/coroutines/CustomDispatcherKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/DebouncingSearchQueries {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/DebouncingSearchQueries;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/DebouncingSearchQueriesKt {
	public static final fun searchFeature (Lkotlinx/coroutines/flow/Flow;)Lkotlinx/coroutines/flow/Flow;
	public static final fun userInputFlow (Ljava/util/List;J)Lkotlinx/coroutines/flow/Flow;
}

public final class dev/shtanko/concurrency/coroutines/DispatchersIOKt {
	public static final fun fetchData (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/DispatchersUnconfinedKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public abstract class dev/shtanko/concurrency/coroutines/Event {
}

public final class dev/shtanko/concurrency/coroutines/Event$Message : dev/shtanko/concurrency/coroutines/Event {
	public fun <init> (Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;)Ldev/shtanko/concurrency/coroutines/Event$Message;
	public static synthetic fun copy$default (Ldev/shtanko/concurrency/coroutines/Event$Message;Ljava/lang/String;ILjava/lang/Object;)Ldev/shtanko/concurrency/coroutines/Event$Message;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getContent ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/concurrency/coroutines/Event$Signal : dev/shtanko/concurrency/coroutines/Event {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/Event$Signal;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/concurrency/coroutines/EventBus {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/EventBus;
	public final fun sendEvent (Ldev/shtanko/concurrency/coroutines/Event;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun subscribeToAll (Lkotlinx/coroutines/CoroutineScope;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
	public final fun subscribeToMessages (Lkotlinx/coroutines/CoroutineScope;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
}

public final class dev/shtanko/concurrency/coroutines/FactorialKt {
	public static final fun calculateFactorial (ILkotlinx/coroutines/CoroutineDispatcher;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun calculateFactorial$default (ILkotlinx/coroutines/CoroutineDispatcher;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public static final fun flowFactorial (ILkotlinx/coroutines/CoroutineDispatcher;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun flowFactorial$default (ILkotlinx/coroutines/CoroutineDispatcher;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
}

public final class dev/shtanko/concurrency/coroutines/FlowAsynchronousStreamsKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/FlowBufferingKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/FlowCancellationAndExceptionsKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/FlowColdStreamsKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/FlowContextPreservationKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/FlowHandlingKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/FlowOperatorsKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/PeriodicDataFetch {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/PeriodicDataFetch;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/PeriodicDataFetchKt {
	public static final fun fetchDataPeriodically ()Lkotlinx/coroutines/flow/Flow;
}

public final class dev/shtanko/concurrency/coroutines/Producer {
	public fun <init> (Lkotlinx/coroutines/channels/Channel;Lkotlinx/coroutines/CompletableDeferred;)V
	public final fun produce (ILkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/concurrency/coroutines/ProgressTracker {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/ProgressTracker;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/ProgressTrackerKt {
	public static final fun fileDownloadProgress ()Lkotlinx/coroutines/flow/Flow;
}

public final class dev/shtanko/concurrency/coroutines/RateLimiter {
	public fun <init> (I)V
	public final fun withRateLimit (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/concurrency/coroutines/RateLimiterDemo {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/RateLimiterDemo;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/RetryingFailedNetworkCalls {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/RetryingFailedNetworkCalls;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/SingleExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/SingleExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/SuspendAndMutex {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/SuspendAndMutex;
	public final fun incrementCounter (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/actors/ExampleKt {
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/examples/AtomicBankTransfer : dev/shtanko/concurrency/coroutines/examples/IAtomicBankTransfer {
	public static final field Companion Ldev/shtanko/concurrency/coroutines/examples/AtomicBankTransfer$Companion;
	public fun <init> ()V
	public fun compensateTransaction (Ldev/shtanko/concurrency/coroutines/examples/AtomicBankTransfer$Account;Ldev/shtanko/concurrency/coroutines/examples/AtomicBankTransfer$Account;DLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun creditAccount (Ldev/shtanko/concurrency/coroutines/examples/AtomicBankTransfer$Account;DLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun debitAccount (Ldev/shtanko/concurrency/coroutines/examples/AtomicBankTransfer$Account;DLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun logTransaction (Ldev/shtanko/concurrency/coroutines/examples/AtomicBankTransfer$Account;Ldev/shtanko/concurrency/coroutines/examples/AtomicBankTransfer$Account;DLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static final fun main ([Ljava/lang/String;)V
	public fun performAtomicTransfer (Ldev/shtanko/concurrency/coroutines/examples/AtomicBankTransfer$Account;Ldev/shtanko/concurrency/coroutines/examples/AtomicBankTransfer$Account;DLkotlinx/coroutines/CoroutineDispatcher;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun transferFunds (Ldev/shtanko/concurrency/coroutines/examples/AtomicBankTransfer$Account;Ldev/shtanko/concurrency/coroutines/examples/AtomicBankTransfer$Account;DLkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/concurrency/coroutines/examples/AtomicBankTransfer$Account {
	public fun <init> (ID)V
	public final fun component1 ()I
	public final fun component2 ()D
	public final fun copy (ID)Ldev/shtanko/concurrency/coroutines/examples/AtomicBankTransfer$Account;
	public static synthetic fun copy$default (Ldev/shtanko/concurrency/coroutines/examples/AtomicBankTransfer$Account;IDILjava/lang/Object;)Ldev/shtanko/concurrency/coroutines/examples/AtomicBankTransfer$Account;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getBalance ()D
	public final fun getId ()I
	public fun hashCode ()I
	public final fun setBalance (D)V
	public final fun setId (I)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/concurrency/coroutines/examples/AtomicBankTransfer$Companion {
	public final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/examples/ECommerceDataSync {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/examples/ECommerceDataSync;
	public static final fun main ([Ljava/lang/String;)V
	public final fun productSyncProgressFlow ()Lkotlinx/coroutines/flow/Flow;
}

public abstract interface class dev/shtanko/concurrency/coroutines/examples/IAtomicBankTransfer {
	public abstract fun compensateTransaction (Ldev/shtanko/concurrency/coroutines/examples/AtomicBankTransfer$Account;Ldev/shtanko/concurrency/coroutines/examples/AtomicBankTransfer$Account;DLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun creditAccount (Ldev/shtanko/concurrency/coroutines/examples/AtomicBankTransfer$Account;DLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun debitAccount (Ldev/shtanko/concurrency/coroutines/examples/AtomicBankTransfer$Account;DLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun logTransaction (Ldev/shtanko/concurrency/coroutines/examples/AtomicBankTransfer$Account;Ldev/shtanko/concurrency/coroutines/examples/AtomicBankTransfer$Account;DLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun performAtomicTransfer (Ldev/shtanko/concurrency/coroutines/examples/AtomicBankTransfer$Account;Ldev/shtanko/concurrency/coroutines/examples/AtomicBankTransfer$Account;DLkotlinx/coroutines/CoroutineDispatcher;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun transferFunds (Ldev/shtanko/concurrency/coroutines/examples/AtomicBankTransfer$Account;Ldev/shtanko/concurrency/coroutines/examples/AtomicBankTransfer$Account;DLkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/concurrency/coroutines/examples/ImageProcessingKt {
	public static final fun adjustBrightness (Ljava/awt/image/BufferedImage;I)Ljava/awt/image/BufferedImage;
	public static synthetic fun adjustBrightness$default (Ljava/awt/image/BufferedImage;IILjava/lang/Object;)Ljava/awt/image/BufferedImage;
	public static final fun applySepia (Ljava/awt/image/BufferedImage;)Ljava/awt/image/BufferedImage;
	public static final fun blur (Ljava/awt/image/BufferedImage;I)Ljava/awt/image/BufferedImage;
	public static synthetic fun blur$default (Ljava/awt/image/BufferedImage;IILjava/lang/Object;)Ljava/awt/image/BufferedImage;
	public static final fun decodeImage ([B)Ljava/awt/image/BufferedImage;
	public static final fun display ([B)V
	public static final fun flipVertical (Ljava/awt/image/BufferedImage;)Ljava/awt/image/BufferedImage;
	public static final fun invertColors (Ljava/awt/image/BufferedImage;)Ljava/awt/image/BufferedImage;
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
	public static final fun mirrorHorizontal (Ljava/awt/image/BufferedImage;)Ljava/awt/image/BufferedImage;
	public static final fun rotate90 (Ljava/awt/image/BufferedImage;)Ljava/awt/image/BufferedImage;
	public static final fun toBlackAndWhite (Ljava/awt/image/BufferedImage;I)Ljava/awt/image/BufferedImage;
	public static synthetic fun toBlackAndWhite$default (Ljava/awt/image/BufferedImage;IILjava/lang/Object;)Ljava/awt/image/BufferedImage;
	public static final fun toByteArray (Ljava/awt/image/BufferedImage;Ljava/lang/String;)[B
	public static synthetic fun toByteArray$default (Ljava/awt/image/BufferedImage;Ljava/lang/String;ILjava/lang/Object;)[B
	public static final fun toGrayscale (Ljava/awt/image/BufferedImage;)Ljava/awt/image/BufferedImage;
}

public final class dev/shtanko/concurrency/coroutines/flow/EmployeeManager {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/flow/EmployeeManager;
	public final fun getEmployee (I)Lkotlinx/coroutines/flow/Flow;
}

public final class dev/shtanko/concurrency/coroutines/flow/NumberMapper {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/flow/NumberMapper;
	public final fun map (ILkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/concurrency/coroutines/flow/SharedFlowExample {
	public fun <init> ()V
	public final fun emitEvent (Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun getEvents ()Lkotlinx/coroutines/flow/SharedFlow;
}

public final class dev/shtanko/concurrency/coroutines/flow/StateFlowExample {
	public fun <init> ()V
	public final fun getState ()Lkotlinx/coroutines/flow/StateFlow;
	public final fun updateState (Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/flow/operators/FlowCombiningOperators {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/flow/operators/FlowCombiningOperators;
}

public final class dev/shtanko/concurrency/coroutines/flow/operators/FlowCombiningOperators$CombineExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/flow/operators/FlowCombiningOperators$CombineExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/flow/operators/FlowCombiningOperators$FlattenConcatExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/flow/operators/FlowCombiningOperators$FlattenConcatExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/flow/operators/FlowCombiningOperators$FlattenMergeExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/flow/operators/FlowCombiningOperators$FlattenMergeExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/flow/operators/FlowCombiningOperators$MergeExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/flow/operators/FlowCombiningOperators$MergeExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/flow/operators/FlowCombiningOperators$ZipExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/flow/operators/FlowCombiningOperators$ZipExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/flow/operators/FlowFilteringOperators {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/flow/operators/FlowFilteringOperators;
}

public final class dev/shtanko/concurrency/coroutines/flow/operators/FlowFilteringOperators$DropExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/flow/operators/FlowFilteringOperators$DropExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/flow/operators/FlowFilteringOperators$DropWhileExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/flow/operators/FlowFilteringOperators$DropWhileExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/flow/operators/FlowFilteringOperators$FilterExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/flow/operators/FlowFilteringOperators$FilterExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/flow/operators/FlowFilteringOperators$FilterIsInstanceExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/flow/operators/FlowFilteringOperators$FilterIsInstanceExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/flow/operators/FlowFilteringOperators$FilterNotExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/flow/operators/FlowFilteringOperators$FilterNotExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/flow/operators/FlowFilteringOperators$FilterNotNullExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/flow/operators/FlowFilteringOperators$FilterNotNullExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/flow/operators/FlowFilteringOperators$TakeExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/flow/operators/FlowFilteringOperators$TakeExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/flow/operators/FlowFilteringOperators$TakeWhile {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/flow/operators/FlowFilteringOperators$TakeWhile;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/flow/operators/FlowTransformingOperators {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/flow/operators/FlowTransformingOperators;
}

public final class dev/shtanko/concurrency/coroutines/flow/operators/FlowTransformingOperators$FlatMapConcatExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/flow/operators/FlowTransformingOperators$FlatMapConcatExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/flow/operators/FlowTransformingOperators$FlatMapLatestExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/flow/operators/FlowTransformingOperators$FlatMapLatestExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/flow/operators/FlowTransformingOperators$FlatMapMergeExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/flow/operators/FlowTransformingOperators$FlatMapMergeExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/flow/operators/FlowTransformingOperators$MapExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/flow/operators/FlowTransformingOperators$MapExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/flow/operators/FlowTransformingOperators$MapIndexedExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/flow/operators/FlowTransformingOperators$MapIndexedExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/flow/operators/FlowTransformingOperators$MapNotNullExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/flow/operators/FlowTransformingOperators$MapNotNullExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/flow/operators/FlowTransformingOperators$TransformExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/flow/operators/FlowTransformingOperators$TransformExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/flow/operators/ReducingAndAccumulatingOperators {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/flow/operators/ReducingAndAccumulatingOperators;
}

public final class dev/shtanko/concurrency/coroutines/flow/operators/ReducingAndAccumulatingOperators$RunningFoldExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/flow/operators/ReducingAndAccumulatingOperators$RunningFoldExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/flow/operators/ReducingAndAccumulatingOperators$RunningReduceExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/flow/operators/ReducingAndAccumulatingOperators$RunningReduceExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/flow/operators/ReducingAndAccumulatingOperators$ScanExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/flow/operators/ReducingAndAccumulatingOperators$ScanExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/mutex/Counter {
	public fun <init> ()V
	public final fun dec (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun inc (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun value ()I
}

public final class dev/shtanko/concurrency/coroutines/mutex/CounterKt {
	public static final fun massiveRun (IILkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun massiveRun$default (IILkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
}

public final class dev/shtanko/concurrency/coroutines/mutex/bank/Bank {
	public fun <init> ()V
	public final fun deposit (ILkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun getBalance ()I
	public final fun invoke (IILkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun invoke$default (Ldev/shtanko/concurrency/coroutines/mutex/bank/Bank;IILkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public final fun withdraw (ILkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/concurrency/coroutines/playground/DefferedListMain {
	public static final field INSTANCE Ldev/shtanko/concurrency/coroutines/playground/DefferedListMain;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/problems/UrlFetcherKt {
	public static final fun fetchData (Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/problems/stonks/FetchStonksServiceKt {
	public static final fun fetchHistoricalPrices (Ljava/lang/String;ILkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/concurrency/coroutines/problems/stonks/StonksCalculatorKt {
	public static final fun calculateBollingerBands (Ljava/util/List;ID)Ldev/shtanko/concurrency/coroutines/problems/stonks/model/BollingerBands;
	public static final fun calculateMovingAverage (Ljava/util/List;I)D
	public static final fun calculateRSI (Ljava/util/List;I)D
	public static final fun standardDeviation (Ljava/util/List;)D
}

public final class dev/shtanko/concurrency/coroutines/problems/stonks/StonksClientKt {
	public static final fun displayFinancialIndicators (Ldev/shtanko/concurrency/coroutines/problems/stonks/model/FinancialIndicators;)Ljava/lang/String;
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/problems/stonks/StonksTradingServiceKt {
	public static final fun makeTradingRecommendation (DLdev/shtanko/concurrency/coroutines/problems/stonks/model/BollingerBands;D)Ljava/lang/String;
}

public final class dev/shtanko/concurrency/coroutines/problems/stonks/model/BollingerBands {
	public fun <init> (DDD)V
	public final fun component1 ()D
	public final fun component2 ()D
	public final fun component3 ()D
	public final fun copy (DDD)Ldev/shtanko/concurrency/coroutines/problems/stonks/model/BollingerBands;
	public static synthetic fun copy$default (Ldev/shtanko/concurrency/coroutines/problems/stonks/model/BollingerBands;DDDILjava/lang/Object;)Ldev/shtanko/concurrency/coroutines/problems/stonks/model/BollingerBands;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getLower ()D
	public final fun getMiddle ()D
	public final fun getUpper ()D
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/concurrency/coroutines/problems/stonks/model/FinancialIndicators {
	public fun <init> (Ljava/lang/String;DLdev/shtanko/concurrency/coroutines/problems/stonks/model/BollingerBands;DLjava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()D
	public final fun component3 ()Ldev/shtanko/concurrency/coroutines/problems/stonks/model/BollingerBands;
	public final fun component4 ()D
	public final fun component5 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;DLdev/shtanko/concurrency/coroutines/problems/stonks/model/BollingerBands;DLjava/lang/String;)Ldev/shtanko/concurrency/coroutines/problems/stonks/model/FinancialIndicators;
	public static synthetic fun copy$default (Ldev/shtanko/concurrency/coroutines/problems/stonks/model/FinancialIndicators;Ljava/lang/String;DLdev/shtanko/concurrency/coroutines/problems/stonks/model/BollingerBands;DLjava/lang/String;ILjava/lang/Object;)Ldev/shtanko/concurrency/coroutines/problems/stonks/model/FinancialIndicators;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getBollingerBands ()Ldev/shtanko/concurrency/coroutines/problems/stonks/model/BollingerBands;
	public final fun getMovingAverage ()D
	public final fun getRecommendation ()Ljava/lang/String;
	public final fun getRsi ()D
	public final fun getSymbol ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/concurrency/coroutines/problems/stonks/model/StockPrice {
	public fun <init> (Ljava/lang/String;DJ)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()D
	public final fun component3 ()J
	public final fun copy (Ljava/lang/String;DJ)Ldev/shtanko/concurrency/coroutines/problems/stonks/model/StockPrice;
	public static synthetic fun copy$default (Ldev/shtanko/concurrency/coroutines/problems/stonks/model/StockPrice;Ljava/lang/String;DJILjava/lang/Object;)Ldev/shtanko/concurrency/coroutines/problems/stonks/model/StockPrice;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getPrice ()D
	public final fun getSymbol ()Ljava/lang/String;
	public final fun getTimestamp ()J
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/concurrency/coroutines/problems/weather/WeatherClientKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/coroutines/problems/weather/WeatherServiceKt {
	public static final fun displayWeatherData (Ldev/shtanko/concurrency/coroutines/problems/weather/model/CurrentWeather;Ldev/shtanko/concurrency/coroutines/problems/weather/model/WeatherForecast;Ldev/shtanko/concurrency/coroutines/problems/weather/model/AirQuality;)Ljava/lang/String;
	public static final fun fetchAirQuality (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static final fun fetchCurrentWeather (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static final fun fetchWeatherForecast (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/concurrency/coroutines/problems/weather/model/AirQuality {
	public fun <init> (ILjava/lang/String;)V
	public final fun component1 ()I
	public final fun component2 ()Ljava/lang/String;
	public final fun copy (ILjava/lang/String;)Ldev/shtanko/concurrency/coroutines/problems/weather/model/AirQuality;
	public static synthetic fun copy$default (Ldev/shtanko/concurrency/coroutines/problems/weather/model/AirQuality;ILjava/lang/String;ILjava/lang/Object;)Ldev/shtanko/concurrency/coroutines/problems/weather/model/AirQuality;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getDescription ()Ljava/lang/String;
	public final fun getIndex ()I
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/concurrency/coroutines/problems/weather/model/CurrentWeather {
	public fun <init> (DLjava/lang/String;)V
	public final fun component1 ()D
	public final fun component2 ()Ljava/lang/String;
	public final fun copy (DLjava/lang/String;)Ldev/shtanko/concurrency/coroutines/problems/weather/model/CurrentWeather;
	public static synthetic fun copy$default (Ldev/shtanko/concurrency/coroutines/problems/weather/model/CurrentWeather;DLjava/lang/String;ILjava/lang/Object;)Ldev/shtanko/concurrency/coroutines/problems/weather/model/CurrentWeather;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getCondition ()Ljava/lang/String;
	public final fun getTemperature ()D
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/concurrency/coroutines/problems/weather/model/DailyForecast {
	public fun <init> (Ljava/lang/String;DLjava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()D
	public final fun component3 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;DLjava/lang/String;)Ldev/shtanko/concurrency/coroutines/problems/weather/model/DailyForecast;
	public static synthetic fun copy$default (Ldev/shtanko/concurrency/coroutines/problems/weather/model/DailyForecast;Ljava/lang/String;DLjava/lang/String;ILjava/lang/Object;)Ldev/shtanko/concurrency/coroutines/problems/weather/model/DailyForecast;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getCondition ()Ljava/lang/String;
	public final fun getDay ()Ljava/lang/String;
	public final fun getTemperature ()D
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/concurrency/coroutines/problems/weather/model/WeatherForecast {
	public fun <init> (Ljava/util/List;)V
	public final fun component1 ()Ljava/util/List;
	public final fun copy (Ljava/util/List;)Ldev/shtanko/concurrency/coroutines/problems/weather/model/WeatherForecast;
	public static synthetic fun copy$default (Ldev/shtanko/concurrency/coroutines/problems/weather/model/WeatherForecast;Ljava/util/List;ILjava/lang/Object;)Ldev/shtanko/concurrency/coroutines/problems/weather/model/WeatherForecast;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getDaily ()Ljava/util/List;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/concurrency/coroutines/sort/CoroutinesMergeSort {
	public fun <init> ()V
	public final fun perform ([II)[I
	public static synthetic fun perform$default (Ldev/shtanko/concurrency/coroutines/sort/CoroutinesMergeSort;[IIILjava/lang/Object;)[I
}

public final class dev/shtanko/concurrency/jvm/deadlock/DeadLockSample {
	public static final field INSTANCE Ldev/shtanko/concurrency/jvm/deadlock/DeadLockSample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/jvm/queue/AlphabetSample {
	public static final field INSTANCE Ldev/shtanko/concurrency/jvm/queue/AlphabetSample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/rx/CreatingObservables {
	public static final field INSTANCE Ldev/shtanko/concurrency/rx/CreatingObservables;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/rx/RxJavaErrorHandlingExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/rx/RxJavaErrorHandlingExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/rx/RxJavaSample1 {
	public static final field INSTANCE Ldev/shtanko/concurrency/rx/RxJavaSample1;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/rx/RxTimerSample {
	public static final field INSTANCE Ldev/shtanko/concurrency/rx/RxTimerSample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/rx/operators/RxJavaMapOperators {
	public static final field INSTANCE Ldev/shtanko/concurrency/rx/operators/RxJavaMapOperators;
}

public final class dev/shtanko/concurrency/rx/operators/RxJavaMapOperators$ConcatMapExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/rx/operators/RxJavaMapOperators$ConcatMapExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/rx/operators/RxJavaMapOperators$FlatMapExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/rx/operators/RxJavaMapOperators$FlatMapExample;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/concurrency/rx/operators/RxJavaMapOperators$SwitchMapExample {
	public static final field INSTANCE Ldev/shtanko/concurrency/rx/operators/RxJavaMapOperators$SwitchMapExample;
	public static final fun main ([Ljava/lang/String;)V
}

public abstract interface annotation class dev/shtanko/concurrent/NotThreadSafe : java/lang/annotation/Annotation {
}

public abstract interface annotation class dev/shtanko/concurrent/ThreadSafe : java/lang/annotation/Annotation {
}

public final class dev/shtanko/datastructures/ArrayMap {
	public fun <init> ()V
	public fun <init> (I)V
	public synthetic fun <init> (IILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun containsKey (Ljava/lang/Object;)Z
	public final fun get (Ljava/lang/Object;)Ljava/lang/Object;
	public final fun indexOfKey (Ljava/lang/Object;)I
	public final fun isEmpty ()Z
	public final fun keyAt (I)Ljava/lang/Object;
	public final fun put (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
	public final fun remove (Ljava/lang/Object;)Ljava/lang/Object;
	public final fun setValueAt (ILjava/lang/Object;)Ljava/lang/Object;
	public final fun valueAt (I)Ljava/lang/Object;
}

public final class dev/shtanko/datastructures/BinaryIndexedTree {
	public fun <init> (I)V
	public final fun query (I)I
	public final fun rangeQuery (II)I
	public final fun update (II)V
}

public final class dev/shtanko/datastructures/BinaryTrie {
	public static final field Companion Ldev/shtanko/datastructures/BinaryTrie$Companion;
	public fun <init> ()V
	public final fun count (I)I
	public final fun findMaxXor (I)I
	public final fun insert (I)V
}

public final class dev/shtanko/datastructures/BinaryTrie$Companion {
}

public final class dev/shtanko/datastructures/BinaryTrie$TrieNode {
	public fun <init> ()V
	public final fun getChildren ()[Ldev/shtanko/datastructures/BinaryTrie$TrieNode;
	public final fun getCount ()I
	public final fun setCount (I)V
}

public abstract interface class dev/shtanko/datastructures/CartesianTree {
	public abstract fun getLeft ()Ldev/shtanko/datastructures/CartesianTree;
	public abstract fun getRight ()Ldev/shtanko/datastructures/CartesianTree;
	public abstract fun getValue ()I
	public abstract fun inOrderTraversal ()Ljava/util/List;
	public abstract fun preOrderTraversal ()Ljava/util/List;
	public abstract fun setLeft (Ldev/shtanko/datastructures/CartesianTree;)V
	public abstract fun setRight (Ldev/shtanko/datastructures/CartesianTree;)V
}

public final class dev/shtanko/datastructures/CartesianTreeImpl : dev/shtanko/datastructures/CartesianTree {
	public static final field Companion Ldev/shtanko/datastructures/CartesianTreeImpl$Companion;
	public fun <init> (ILdev/shtanko/datastructures/CartesianTree;Ldev/shtanko/datastructures/CartesianTree;)V
	public synthetic fun <init> (ILdev/shtanko/datastructures/CartesianTree;Ldev/shtanko/datastructures/CartesianTree;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun getLeft ()Ldev/shtanko/datastructures/CartesianTree;
	public fun getRight ()Ldev/shtanko/datastructures/CartesianTree;
	public fun getValue ()I
	public fun inOrderTraversal ()Ljava/util/List;
	public fun preOrderTraversal ()Ljava/util/List;
	public fun setLeft (Ldev/shtanko/datastructures/CartesianTree;)V
	public fun setRight (Ldev/shtanko/datastructures/CartesianTree;)V
}

public final class dev/shtanko/datastructures/CartesianTreeImpl$Companion {
	public final fun build ([I)Ldev/shtanko/datastructures/CartesianTree;
}

public final class dev/shtanko/datastructures/CaseInsensitiveTrie {
	public fun <init> ()V
	public fun <init> (I)V
	public synthetic fun <init> (IILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun clear ()V
	public final fun filterStrings (Ljava/util/List;Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun insert (Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun insertAll (Ljava/util/List;)V
	public final fun search (Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/shtanko/datastructures/DisjointSet {
	public fun <init> (I)V
	public final fun connected (II)Z
	public final fun getCount ()I
	public final fun getSize ()I
	public final fun union (II)V
}

public final class dev/shtanko/datastructures/DynamicArray {
	public fun <init> (I)V
	public final fun add (Ljava/lang/Object;)V
	public final fun contains (Ljava/lang/Object;)Z
	public final fun delete (I)V
	public final fun get (I)Ljava/lang/Object;
	public final fun insert (ILjava/lang/Object;)V
	public final fun isEmpty ()Z
	public final fun print ()V
	public final fun set (ILjava/lang/Object;)V
	public final fun size ()I
}

public final class dev/shtanko/datastructures/ImmutableSet : java/util/Set, kotlin/jvm/internal/markers/KMappedMarker {
	public fun <init> ([Ljava/lang/Comparable;)V
	public fun add (Ljava/lang/Comparable;)Z
	public synthetic fun add (Ljava/lang/Object;)Z
	public fun addAll (Ljava/util/Collection;)Z
	public fun clear ()V
	public fun contains (Ljava/lang/Comparable;)Z
	public final fun contains (Ljava/lang/Object;)Z
	public fun containsAll (Ljava/util/Collection;)Z
	public fun getSize ()I
	public fun isEmpty ()Z
	public fun iterator ()Ljava/util/Iterator;
	public fun remove (Ljava/lang/Object;)Z
	public fun removeAll (Ljava/util/Collection;)Z
	public fun retainAll (Ljava/util/Collection;)Z
	public final fun size ()I
	public fun toArray ()[Ljava/lang/Object;
	public fun toArray ([Ljava/lang/Object;)[Ljava/lang/Object;
}

public final class dev/shtanko/datastructures/ImmutableSetKt {
	public static final fun immutableSetOf ([Ljava/lang/Comparable;)Ldev/shtanko/datastructures/ImmutableSet;
}

public final class dev/shtanko/datastructures/IntMap {
	public fun <init> ()V
	public fun <init> (I)V
	public synthetic fun <init> (IILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun containsKey (I)Z
	public final fun delete (I)V
	public final fun get (I)Ljava/lang/Object;
	public final fun get (ILjava/lang/Object;)Ljava/lang/Object;
	public final fun getSize ()I
	public final fun indexOfKey (I)I
	public final fun isEmpty ()Z
	public final fun keyAt (I)I
	public final fun put (ILjava/lang/Object;)V
	public final fun removeAt (I)V
	public final fun setSize (I)V
	public final fun setValueAt (ILjava/lang/Object;)V
	public final fun valueAt (I)Ljava/lang/Object;
}

public final class dev/shtanko/datastructures/LinkedList : java/util/List, kotlin/jvm/internal/markers/KMappedMarker {
	public fun <init> ()V
	public fun add (ILjava/lang/Object;)V
	public fun add (Ljava/lang/Object;)Z
	public fun addAll (ILjava/util/Collection;)Z
	public fun addAll (Ljava/util/Collection;)Z
	public fun clear ()V
	public fun contains (Ljava/lang/Object;)Z
	public fun containsAll (Ljava/util/Collection;)Z
	public fun get (I)Ljava/lang/Object;
	public fun getSize ()I
	public fun indexOf (Ljava/lang/Object;)I
	public fun isEmpty ()Z
	public fun iterator ()Ljava/util/Iterator;
	public fun lastIndexOf (Ljava/lang/Object;)I
	public fun listIterator ()Ljava/util/ListIterator;
	public fun listIterator (I)Ljava/util/ListIterator;
	public fun remove (I)Ljava/lang/Object;
	public fun remove (Ljava/lang/Object;)Z
	public fun removeAll (Ljava/util/Collection;)Z
	public fun replaceAll (Ljava/util/function/UnaryOperator;)V
	public fun retainAll (Ljava/util/Collection;)Z
	public fun set (ILjava/lang/Object;)Ljava/lang/Object;
	public final fun size ()I
	public fun sort (Ljava/util/Comparator;)V
	public fun subList (II)Ljava/util/List;
	public fun toArray ()[Ljava/lang/Object;
	public fun toArray ([Ljava/lang/Object;)[Ljava/lang/Object;
}

public final class dev/shtanko/datastructures/MutableVector : java/util/RandomAccess {
	public fun <init> ([Ljava/lang/Object;I)V
	public final fun add (ILjava/lang/Object;)V
	public final fun add (Ljava/lang/Object;)Z
	public final fun addAll (ILdev/shtanko/datastructures/MutableVector;)Z
	public final fun addAll (ILjava/util/Collection;)Z
	public final fun addAll (ILjava/util/List;)Z
	public final fun addAll (Ldev/shtanko/datastructures/MutableVector;)Z
	public final fun addAll (Ljava/util/Collection;)Z
	public final fun addAll (Ljava/util/List;)Z
	public final fun addAll ([Ljava/lang/Object;)Z
	public final fun any (Lkotlin/jvm/functions/Function1;)Z
	public final fun asMutableList ()Ljava/util/List;
	public final fun clear ()V
	public final fun contains (Ljava/lang/Object;)Z
	public final fun containsAll (Ldev/shtanko/datastructures/MutableVector;)Z
	public final fun containsAll (Ljava/util/Collection;)Z
	public final fun containsAll (Ljava/util/List;)Z
	public final fun contentEquals (Ldev/shtanko/datastructures/MutableVector;)Z
	public final fun ensureCapacity (I)V
	public final fun first ()Ljava/lang/Object;
	public final fun first (Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public final fun firstOrNull ()Ljava/lang/Object;
	public final fun firstOrNull (Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public final fun fold (Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;
	public final fun foldIndexed (Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;
	public final fun foldRight (Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;
	public final fun foldRightIndexed (Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;
	public final fun forEach (Lkotlin/jvm/functions/Function1;)V
	public final fun forEachIndexed (Lkotlin/jvm/functions/Function2;)V
	public final fun forEachReversed (Lkotlin/jvm/functions/Function1;)V
	public final fun forEachReversedIndexed (Lkotlin/jvm/functions/Function2;)V
	public final fun get (I)Ljava/lang/Object;
	public final fun getContent ()[Ljava/lang/Object;
	public final fun getIndices ()Lkotlin/ranges/IntRange;
	public final fun getLastIndex ()I
	public final fun getSize ()I
	public final fun indexOf (Ljava/lang/Object;)I
	public final fun indexOfFirst (Lkotlin/jvm/functions/Function1;)I
	public final fun indexOfLast (Lkotlin/jvm/functions/Function1;)I
	public final fun isEmpty ()Z
	public final fun isNotEmpty ()Z
	public final fun last ()Ljava/lang/Object;
	public final fun last (Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public final fun lastIndexOf (Ljava/lang/Object;)I
	public final fun lastOrNull ()Ljava/lang/Object;
	public final fun lastOrNull (Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public final fun minusAssign (Ljava/lang/Object;)V
	public final fun plusAssign (Ljava/lang/Object;)V
	public final fun remove (Ljava/lang/Object;)Z
	public final fun removeAll (Ldev/shtanko/datastructures/MutableVector;)Z
	public final fun removeAll (Ljava/util/Collection;)Z
	public final fun removeAll (Ljava/util/List;)Z
	public final fun removeAt (I)Ljava/lang/Object;
	public final fun removeIf (Lkotlin/jvm/functions/Function1;)V
	public final fun removeRange (II)V
	public final fun retainAll (Ljava/util/Collection;)Z
	public final fun reversedAny (Lkotlin/jvm/functions/Function1;)Z
	public final fun set (ILjava/lang/Object;)Ljava/lang/Object;
	public final fun setContent ([Ljava/lang/Object;)V
	public final fun setSize (I)V
	public final fun sortWith (Ljava/util/Comparator;)V
	public final fun sumBy (Lkotlin/jvm/functions/Function1;)I
	public final fun throwNoSuchElementException ()Ljava/lang/Void;
	public final fun throwNoSuchElementException (Ljava/lang/String;)Ljava/lang/Void;
}

public final class dev/shtanko/datastructures/PersistentSegmentTree {
	public fun <init> (I)V
	public final fun query (III)I
	public final fun update (III)I
}

public final class dev/shtanko/datastructures/PersistentSegmentTree$Node {
	public fun <init> (ILdev/shtanko/datastructures/PersistentSegmentTree$Node;Ldev/shtanko/datastructures/PersistentSegmentTree$Node;)V
	public synthetic fun <init> (ILdev/shtanko/datastructures/PersistentSegmentTree$Node;Ldev/shtanko/datastructures/PersistentSegmentTree$Node;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()I
	public final fun component2 ()Ldev/shtanko/datastructures/PersistentSegmentTree$Node;
	public final fun component3 ()Ldev/shtanko/datastructures/PersistentSegmentTree$Node;
	public final fun copy (ILdev/shtanko/datastructures/PersistentSegmentTree$Node;Ldev/shtanko/datastructures/PersistentSegmentTree$Node;)Ldev/shtanko/datastructures/PersistentSegmentTree$Node;
	public static synthetic fun copy$default (Ldev/shtanko/datastructures/PersistentSegmentTree$Node;ILdev/shtanko/datastructures/PersistentSegmentTree$Node;Ldev/shtanko/datastructures/PersistentSegmentTree$Node;ILjava/lang/Object;)Ldev/shtanko/datastructures/PersistentSegmentTree$Node;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getLeft ()Ldev/shtanko/datastructures/PersistentSegmentTree$Node;
	public final fun getRight ()Ldev/shtanko/datastructures/PersistentSegmentTree$Node;
	public final fun getValue ()I
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/datastructures/PriorityQueue : java/util/Collection, kotlin/jvm/internal/markers/KMappedMarker {
	public static final field Companion Ldev/shtanko/datastructures/PriorityQueue$Companion;
	public fun <init> (ILjava/util/Comparator;)V
	public synthetic fun <init> (ILjava/util/Comparator;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun add (Ljava/lang/Object;)V
	public fun add (Ljava/lang/Object;)Z
	public fun addAll (Ljava/util/Collection;)Z
	public fun clear ()V
	public fun contains (Ljava/lang/Object;)Z
	public fun containsAll (Ljava/util/Collection;)Z
	public fun getSize ()I
	public fun isEmpty ()Z
	public fun iterator ()Ljava/util/Iterator;
	public final fun peek ()Ljava/lang/Object;
	public final fun poll ()Ljava/lang/Object;
	public fun remove (Ljava/lang/Object;)Z
	public fun removeAll (Ljava/util/Collection;)Z
	public fun removeIf (Ljava/util/function/Predicate;)Z
	public fun retainAll (Ljava/util/Collection;)Z
	public final fun size ()I
	public fun toArray ()[Ljava/lang/Object;
	public fun toArray ([Ljava/lang/Object;)[Ljava/lang/Object;
}

public final class dev/shtanko/datastructures/PriorityQueue$Companion {
	public final fun sink ([Ljava/lang/Object;IILjava/util/Comparator;)V
	public static synthetic fun sink$default (Ldev/shtanko/datastructures/PriorityQueue$Companion;[Ljava/lang/Object;IILjava/util/Comparator;ILjava/lang/Object;)V
	public final fun swim ([Ljava/lang/Object;ILjava/util/Comparator;)V
	public static synthetic fun swim$default (Ldev/shtanko/datastructures/PriorityQueue$Companion;[Ljava/lang/Object;ILjava/util/Comparator;ILjava/lang/Object;)V
}

public final class dev/shtanko/datastructures/Queue : java/util/Collection, kotlin/jvm/internal/markers/KMappedMarker {
	public fun <init> ()V
	public final fun add (Ljava/lang/Object;)V
	public fun add (Ljava/lang/Object;)Z
	public fun addAll (Ljava/util/Collection;)Z
	public fun clear ()V
	public fun contains (Ljava/lang/Object;)Z
	public fun containsAll (Ljava/util/Collection;)Z
	public fun getSize ()I
	public fun isEmpty ()Z
	public fun iterator ()Ljava/util/Iterator;
	public final fun peek ()Ljava/lang/Object;
	public final fun poll ()Ljava/lang/Object;
	public fun remove (Ljava/lang/Object;)Z
	public fun removeAll (Ljava/util/Collection;)Z
	public fun removeIf (Ljava/util/function/Predicate;)Z
	public fun retainAll (Ljava/util/Collection;)Z
	public final fun size ()I
	public fun toArray ()[Ljava/lang/Object;
	public fun toArray ([Ljava/lang/Object;)[Ljava/lang/Object;
}

public final class dev/shtanko/datastructures/SkipList {
	public fun <init> ()V
	public final fun delete (Ljava/lang/Comparable;)V
	public final fun display ()Ljava/lang/String;
	public final fun insert (Ljava/lang/Comparable;Ljava/lang/Object;)V
	public final fun search (Ljava/lang/Comparable;)Ljava/lang/Object;
}

public final class dev/shtanko/datastructures/Stack : java/util/Collection, kotlin/jvm/internal/markers/KMappedMarker {
	public fun <init> ()V
	public fun add (Ljava/lang/Object;)Z
	public fun addAll (Ljava/util/Collection;)Z
	public fun clear ()V
	public fun contains (Ljava/lang/Object;)Z
	public fun containsAll (Ljava/util/Collection;)Z
	public fun getSize ()I
	public fun isEmpty ()Z
	public fun iterator ()Ljava/util/Iterator;
	public final fun peek ()Ljava/lang/Object;
	public final fun poll ()Ljava/lang/Object;
	public final fun push (Ljava/lang/Object;)V
	public fun remove (Ljava/lang/Object;)Z
	public fun removeAll (Ljava/util/Collection;)Z
	public fun removeIf (Ljava/util/function/Predicate;)Z
	public fun retainAll (Ljava/util/Collection;)Z
	public final fun size ()I
	public fun toArray ()[Ljava/lang/Object;
	public fun toArray ([Ljava/lang/Object;)[Ljava/lang/Object;
}

public final class dev/shtanko/datastructures/Stack$Node {
	public fun <init> (Ljava/lang/Object;)V
	public final fun getNext ()Ldev/shtanko/datastructures/Stack$Node;
	public final fun getValue ()Ljava/lang/Object;
	public final fun setNext (Ldev/shtanko/datastructures/Stack$Node;)V
}

public final class dev/shtanko/datastructures/StackIterator : java/util/Iterator, kotlin/jvm/internal/markers/KMappedMarker {
	public fun <init> (Ldev/shtanko/datastructures/Stack$Node;)V
	public fun hasNext ()Z
	public fun next ()Ljava/lang/Object;
	public fun remove ()V
}

public final class dev/shtanko/datastructures/WaveletTree {
	public fun <init> ([III)V
	public final fun count (III)I
	public final fun kthSmallest (III)I
	public final fun rank (III)I
}

public final class dev/shtanko/datastructures/arrays/Array2D : java/lang/Iterable, kotlin/jvm/internal/markers/KMappedMarker {
	public fun <init> (IILjava/lang/Object;)V
	public final fun get (II)Ljava/lang/Object;
	public final fun getColumn (I)Ljava/util/List;
	public final fun getRow (I)Ljava/util/List;
	public fun iterator ()Ljava/util/Iterator;
	public final fun printArray ()V
	public final fun set (IILjava/lang/Object;)V
	public final fun toList ()Ljava/util/List;
}

public final class dev/shtanko/datastructures/caches/LFUCache {
	public fun <init> ()V
	public fun <init> (I)V
	public synthetic fun <init> (IILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun get (Ljava/lang/Object;)Ljava/lang/Object;
	public final fun getCapacity ()I
	public final fun set (Ljava/lang/Object;Ljava/lang/Object;)V
}

public final class dev/shtanko/datastructures/caches/LRUCache {
	public fun <init> ()V
	public fun <init> (I)V
	public synthetic fun <init> (IILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun get (Ljava/lang/Object;)Ljava/lang/Object;
	public final fun set (Ljava/lang/Object;Ljava/lang/Object;)V
	public final fun setCapacity (I)V
}

public final class dev/shtanko/datastructures/caches/LRUCache$Entry {
	public fun <init> ()V
	public fun <init> (Ldev/shtanko/datastructures/caches/LRUCache$Entry;Ldev/shtanko/datastructures/caches/LRUCache$Entry;Ljava/lang/Object;Ljava/lang/Object;)V
	public synthetic fun <init> (Ldev/shtanko/datastructures/caches/LRUCache$Entry;Ldev/shtanko/datastructures/caches/LRUCache$Entry;Ljava/lang/Object;Ljava/lang/Object;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ldev/shtanko/datastructures/caches/LRUCache$Entry;
	public final fun component2 ()Ldev/shtanko/datastructures/caches/LRUCache$Entry;
	public final fun component3 ()Ljava/lang/Object;
	public final fun component4 ()Ljava/lang/Object;
	public final fun copy (Ldev/shtanko/datastructures/caches/LRUCache$Entry;Ldev/shtanko/datastructures/caches/LRUCache$Entry;Ljava/lang/Object;Ljava/lang/Object;)Ldev/shtanko/datastructures/caches/LRUCache$Entry;
	public static synthetic fun copy$default (Ldev/shtanko/datastructures/caches/LRUCache$Entry;Ldev/shtanko/datastructures/caches/LRUCache$Entry;Ldev/shtanko/datastructures/caches/LRUCache$Entry;Ljava/lang/Object;Ljava/lang/Object;ILjava/lang/Object;)Ldev/shtanko/datastructures/caches/LRUCache$Entry;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getKey ()Ljava/lang/Object;
	public final fun getNextEntry ()Ldev/shtanko/datastructures/caches/LRUCache$Entry;
	public final fun getPreEntry ()Ldev/shtanko/datastructures/caches/LRUCache$Entry;
	public final fun getValue ()Ljava/lang/Object;
	public fun hashCode ()I
	public final fun setKey (Ljava/lang/Object;)V
	public final fun setNextEntry (Ldev/shtanko/datastructures/caches/LRUCache$Entry;)V
	public final fun setPreEntry (Ldev/shtanko/datastructures/caches/LRUCache$Entry;)V
	public final fun setValue (Ljava/lang/Object;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/datastructures/graphs/AdjacencyListGraph {
	public fun <init> ()V
	public fun <init> (Ljava/util/List;)V
	public synthetic fun <init> (Ljava/util/List;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun addEdge (Ljava/lang/Comparable;Ljava/lang/Comparable;)Z
	public final fun removeEdge (Ljava/lang/Comparable;Ljava/lang/Comparable;)Z
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/datastructures/graphs/AdjacencyListGraph$Vertex {
	public fun <init> (Ljava/lang/Comparable;Ljava/util/List;)V
	public synthetic fun <init> (Ljava/lang/Comparable;Ljava/util/List;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun addAdjacentVertex (Ldev/shtanko/datastructures/graphs/AdjacencyListGraph$Vertex;)Z
	public final fun component1 ()Ljava/lang/Comparable;
	public final fun component2 ()Ljava/util/List;
	public final fun copy (Ljava/lang/Comparable;Ljava/util/List;)Ldev/shtanko/datastructures/graphs/AdjacencyListGraph$Vertex;
	public static synthetic fun copy$default (Ldev/shtanko/datastructures/graphs/AdjacencyListGraph$Vertex;Ljava/lang/Comparable;Ljava/util/List;ILjava/lang/Object;)Ldev/shtanko/datastructures/graphs/AdjacencyListGraph$Vertex;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getAdjacentVertices ()Ljava/util/List;
	public final fun getData ()Ljava/lang/Comparable;
	public fun hashCode ()I
	public final fun removeAdjacentVertex (Ljava/lang/Comparable;)Z
	public final fun setAdjacentVertices (Ljava/util/List;)V
	public final fun setData (Ljava/lang/Comparable;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/datastructures/maps/hashmaps/HashMapExamples {
	public static final field INSTANCE Ldev/shtanko/datastructures/maps/hashmaps/HashMapExamples;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public static final fun main ([Ljava/lang/String;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/datastructures/maps/hashmaps/SimpleConcurrentHashMap {
	public fun <init> (I)V
	public final fun delete (Ljava/lang/Object;)V
	public final fun insert (Ljava/lang/Object;Ljava/lang/Object;)V
	public final fun lookup (Ljava/lang/Object;)Ljava/lang/Object;
}

public final class dev/shtanko/datastructures/maps/hashmaps/SimpleHashMap {
	public fun <init> (I)V
	public final fun delete (Ljava/lang/Object;)V
	public final fun insert (Ljava/lang/Object;Ljava/lang/Object;)V
	public final fun lookup (Ljava/lang/Object;)Ljava/lang/Object;
}

public final class dev/shtanko/datastructures/stacks/IntStack {
	public fun <init> ()V
	public final fun clear ()V
	public final fun getSize ()I
	public final fun indexOf (I)I
	public final fun isEmpty ()Z
	public final fun isNotEmpty ()Z
	public final fun peek ()I
	public final fun peekAt (I)I
	public final fun peekOr (I)I
	public final fun peekSecond ()I
	public final fun pop ()I
	public final fun push (I)V
}

public final class dev/shtanko/datastructures/stacks/Stack {
	public static final synthetic fun box-impl (Ljava/util/ArrayList;)Ldev/shtanko/datastructures/stacks/Stack;
	public static final fun clear-impl (Ljava/util/ArrayList;)V
	public static fun constructor-impl (Ljava/util/ArrayList;)Ljava/util/ArrayList;
	public static synthetic fun constructor-impl$default (Ljava/util/ArrayList;ILkotlin/jvm/internal/DefaultConstructorMarker;)Ljava/util/ArrayList;
	public fun equals (Ljava/lang/Object;)Z
	public static fun equals-impl (Ljava/util/ArrayList;Ljava/lang/Object;)Z
	public static final fun equals-impl0 (Ljava/util/ArrayList;Ljava/util/ArrayList;)Z
	public static final fun getSize-impl (Ljava/util/ArrayList;)I
	public fun hashCode ()I
	public static fun hashCode-impl (Ljava/util/ArrayList;)I
	public static final fun isEmpty-impl (Ljava/util/ArrayList;)Z
	public static final fun isNotEmpty-impl (Ljava/util/ArrayList;)Z
	public static final fun peek-impl (Ljava/util/ArrayList;)Ljava/lang/Object;
	public static final fun peek-impl (Ljava/util/ArrayList;I)Ljava/lang/Object;
	public static final fun pop-impl (Ljava/util/ArrayList;)Ljava/lang/Object;
	public static final fun push-impl (Ljava/util/ArrayList;Ljava/lang/Object;)Z
	public static final fun toArray-impl (Ljava/util/ArrayList;)[Ljava/lang/Object;
	public fun toString ()Ljava/lang/String;
	public static fun toString-impl (Ljava/util/ArrayList;)Ljava/lang/String;
	public final synthetic fun unbox-impl ()Ljava/util/ArrayList;
}

public final class dev/shtanko/datastructures/tree/AVLTree {
	public static final field Companion Ldev/shtanko/datastructures/tree/AVLTree$Companion;
	public fun <init> ()V
	public final fun getRoot ()Ldev/shtanko/datastructures/tree/AVLTree$Node;
	public final fun insert (Ldev/shtanko/datastructures/tree/AVLTree$Node;I)Ldev/shtanko/datastructures/tree/AVLTree$Node;
	public final fun max (II)I
	public final fun preOrder (Ldev/shtanko/datastructures/tree/AVLTree$Node;)V
	public final fun setRoot (Ldev/shtanko/datastructures/tree/AVLTree$Node;)V
}

public final class dev/shtanko/datastructures/tree/AVLTree$Companion {
}

public final class dev/shtanko/datastructures/tree/AVLTree$Node {
	public fun <init> (IILdev/shtanko/datastructures/tree/AVLTree$Node;Ldev/shtanko/datastructures/tree/AVLTree$Node;)V
	public synthetic fun <init> (IILdev/shtanko/datastructures/tree/AVLTree$Node;Ldev/shtanko/datastructures/tree/AVLTree$Node;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()I
	public final fun component2 ()I
	public final fun component3 ()Ldev/shtanko/datastructures/tree/AVLTree$Node;
	public final fun component4 ()Ldev/shtanko/datastructures/tree/AVLTree$Node;
	public final fun copy (IILdev/shtanko/datastructures/tree/AVLTree$Node;Ldev/shtanko/datastructures/tree/AVLTree$Node;)Ldev/shtanko/datastructures/tree/AVLTree$Node;
	public static synthetic fun copy$default (Ldev/shtanko/datastructures/tree/AVLTree$Node;IILdev/shtanko/datastructures/tree/AVLTree$Node;Ldev/shtanko/datastructures/tree/AVLTree$Node;ILjava/lang/Object;)Ldev/shtanko/datastructures/tree/AVLTree$Node;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getHeight ()I
	public final fun getKey ()I
	public final fun getLeft ()Ldev/shtanko/datastructures/tree/AVLTree$Node;
	public final fun getRight ()Ldev/shtanko/datastructures/tree/AVLTree$Node;
	public fun hashCode ()I
	public final fun setHeight (I)V
	public final fun setLeft (Ldev/shtanko/datastructures/tree/AVLTree$Node;)V
	public final fun setRight (Ldev/shtanko/datastructures/tree/AVLTree$Node;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/datastructures/tree/BinarySearchTree : java/util/Map, kotlin/jvm/internal/markers/KMappedMarker {
	public fun <init> ()V
	public final fun add (Ljava/lang/Comparable;Ljava/lang/Object;)V
	public fun clear ()V
	public fun compute (Ljava/lang/Comparable;Ljava/util/function/BiFunction;)Ljava/lang/Object;
	public synthetic fun compute (Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;
	public fun computeIfAbsent (Ljava/lang/Comparable;Ljava/util/function/Function;)Ljava/lang/Object;
	public synthetic fun computeIfAbsent (Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
	public fun computeIfPresent (Ljava/lang/Comparable;Ljava/util/function/BiFunction;)Ljava/lang/Object;
	public synthetic fun computeIfPresent (Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;
	public fun containsKey (Ljava/lang/Comparable;)Z
	public final fun containsKey (Ljava/lang/Object;)Z
	public fun containsValue (Ljava/lang/Object;)Z
	public final fun entrySet ()Ljava/util/Set;
	public fun get (Ljava/lang/Comparable;)Ljava/lang/Object;
	public final fun get (Ljava/lang/Object;)Ljava/lang/Object;
	public fun getEntries ()Ljava/util/Set;
	public fun getKeys ()Ljava/util/Set;
	public fun getSize ()I
	public fun getValues ()Ljava/util/Collection;
	public final fun height ()I
	public fun isEmpty ()Z
	public final fun keySet ()Ljava/util/Set;
	public final fun max ()Ljava/lang/Comparable;
	public fun merge (Ljava/lang/Comparable;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;
	public synthetic fun merge (Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;
	public final fun min ()Ljava/lang/Comparable;
	public final fun pollMax ()V
	public final fun pollMin ()V
	public fun put (Ljava/lang/Comparable;Ljava/lang/Object;)Ljava/lang/Object;
	public synthetic fun put (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
	public fun putAll (Ljava/util/Map;)V
	public fun putIfAbsent (Ljava/lang/Comparable;Ljava/lang/Object;)Ljava/lang/Object;
	public synthetic fun putIfAbsent (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
	public final fun remove (Ljava/lang/Comparable;)V
	public fun remove (Ljava/lang/Object;)Ljava/lang/Object;
	public fun remove (Ljava/lang/Object;Ljava/lang/Object;)Z
	public fun replace (Ljava/lang/Comparable;Ljava/lang/Object;)Ljava/lang/Object;
	public fun replace (Ljava/lang/Comparable;Ljava/lang/Object;Ljava/lang/Object;)Z
	public synthetic fun replace (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
	public synthetic fun replace (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
	public fun replaceAll (Ljava/util/function/BiFunction;)V
	public final fun size ()I
	public final fun values ()Ljava/util/Collection;
}

public final class dev/shtanko/datastructures/tree/BinarySearchTree$Node : java/util/Map$Entry, kotlin/jvm/internal/markers/KMappedMarker {
	public fun <init> (Ljava/lang/Object;Ljava/lang/Object;Ldev/shtanko/datastructures/tree/BinarySearchTree$Node;Ldev/shtanko/datastructures/tree/BinarySearchTree$Node;I)V
	public synthetic fun <init> (Ljava/lang/Object;Ljava/lang/Object;Ldev/shtanko/datastructures/tree/BinarySearchTree$Node;Ldev/shtanko/datastructures/tree/BinarySearchTree$Node;IILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ljava/lang/Object;
	public final fun component2 ()Ljava/lang/Object;
	public final fun component3 ()Ldev/shtanko/datastructures/tree/BinarySearchTree$Node;
	public final fun component4 ()Ldev/shtanko/datastructures/tree/BinarySearchTree$Node;
	public final fun component5 ()I
	public final fun copy (Ljava/lang/Object;Ljava/lang/Object;Ldev/shtanko/datastructures/tree/BinarySearchTree$Node;Ldev/shtanko/datastructures/tree/BinarySearchTree$Node;I)Ldev/shtanko/datastructures/tree/BinarySearchTree$Node;
	public static synthetic fun copy$default (Ldev/shtanko/datastructures/tree/BinarySearchTree$Node;Ljava/lang/Object;Ljava/lang/Object;Ldev/shtanko/datastructures/tree/BinarySearchTree$Node;Ldev/shtanko/datastructures/tree/BinarySearchTree$Node;IILjava/lang/Object;)Ldev/shtanko/datastructures/tree/BinarySearchTree$Node;
	public fun equals (Ljava/lang/Object;)Z
	public fun getKey ()Ljava/lang/Object;
	public final fun getLeft ()Ldev/shtanko/datastructures/tree/BinarySearchTree$Node;
	public final fun getRight ()Ldev/shtanko/datastructures/tree/BinarySearchTree$Node;
	public final fun getSize ()I
	public fun getValue ()Ljava/lang/Object;
	public fun hashCode ()I
	public final fun setLeft (Ldev/shtanko/datastructures/tree/BinarySearchTree$Node;)V
	public final fun setRight (Ldev/shtanko/datastructures/tree/BinarySearchTree$Node;)V
	public final fun setSize (I)V
	public fun setValue (Ljava/lang/Object;)Ljava/lang/Object;
	public fun setValue (Ljava/lang/Object;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/datastructures/tree/Heap {
	public fun <init> (Ljava/util/Comparator;)V
	public final fun add (Ljava/lang/Object;)V
	public final fun peek ()Ljava/lang/Object;
	public final fun poll ()Ljava/lang/Object;
	public final fun size ()I
}

public final class dev/shtanko/extensions/ArrayKt {
	public static final fun flip ([Ljava/lang/Object;II)V
	public static final fun reverse ([Ljava/lang/Object;)V
	public static final fun reverse2 ([Ljava/lang/Object;)V
	public static final fun second ([I)I
	public static final fun swap ([CII)V
	public static final fun swap ([III)V
	public static final fun swap ([Ljava/lang/Object;II)V
}

public final class dev/shtanko/extensions/CharKt {
	public static final fun isVowel (C)Z
	public static final fun randomString (Lkotlin/ranges/ClosedRange;I)Ljava/lang/String;
}

public final class dev/shtanko/extensions/DoubleExtKt {
	public static final fun isEven (D)Z
}

public final class dev/shtanko/extensions/IntArrayExtKt {
	public static final fun subList ([III)Ljava/util/List;
}

public final class dev/shtanko/extensions/IntKt {
	public static final fun generateRandomArray (I)[I
	public static final fun isEven ()Ldev/shtanko/extensions/IntPredicate;
	public static final fun isEven (I)Z
	public static final fun isPrime (I)Z
	public static final fun isUgly (I)Z
	public static final fun isUgly2 (I)Z
	public static final fun lessThanZero (I)Z
}

public final class dev/shtanko/extensions/IntPairKt {
	public static final fun keepDividingWhenDivisible (Lkotlin/Pair;)I
	public static final fun maxDivide (Lkotlin/Pair;)I
}

public abstract interface class dev/shtanko/extensions/IntPredicate {
	public abstract fun accept (I)Z
}

public final class dev/shtanko/extensions/LongKt {
	public static final fun isPalindrome (J)Z
	public static final fun isSuperPalindrome (J)Z
	public static final fun reverse (J)J
}

public final class dev/shtanko/extensions/NumberKt {
	public static final fun isSquare (Ljava/lang/Number;)Z
}

public final class dev/shtanko/extensions/ReverseKt {
	public static final fun reverse ([III)V
}

public final class dev/shtanko/extensions/StringKt {
	public static final fun commonPrefix (Lkotlin/Pair;)Ljava/lang/String;
	public static final fun countZeroesOnes (Ljava/lang/String;)[I
	public static final fun getNumberOfLetter (Ljava/lang/String;)I
	public static final fun isAllZeroes (Ljava/lang/String;)Z
	public static final fun isBinary (Ljava/lang/String;)Z
	public static final fun isZero (C)Z
	public static final fun removeZeroesInBegin (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/extensions/SumKt {
	public static final fun sum (Ljava/lang/Iterable;)Ljava/math/BigInteger;
}

public final class dev/shtanko/game/Run2048Kt {
	public static final fun display ([[I)V
	public static final fun generateNumber ()I
	public static final fun isGridFull ([[I)Z
	public static final fun isGridSolved ([[I)Z
	public static final fun isValidInput (Ljava/lang/String;)Z
	public static final fun locateSpawnCoordinates ([[I)Lkotlin/Pair;
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
	public static final fun manipulateGrid ([[ILjava/lang/String;)[[I
	public static final fun merge ([III)[I
	public static synthetic fun merge$default ([IIIILjava/lang/Object;)[I
	public static final fun mergeAndOrganizeCells ([I)[I
	public static final fun organize ([III)[I
	public static synthetic fun organize$default ([IIIILjava/lang/Object;)[I
	public static final fun run2048 ([[I)Ljava/lang/String;
	public static final fun shiftCellsDown ([[I)[[I
	public static final fun shiftCellsLeft ([[I)[[I
	public static final fun shiftCellsRight ([[I)[[I
	public static final fun shiftCellsUp ([[I)[[I
	public static final fun spawnNumber ([[I)[[I
	public static final fun updateGrid ([[ILkotlin/Pair;I)[[I
	public static final fun waitForInput ()Ljava/lang/String;
	public static final fun waitForValidInput ()Ljava/lang/String;
}

public final class dev/shtanko/github/GithubClient {
	public static final field INSTANCE Ldev/shtanko/github/GithubClient;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/github/data/cache/InMemoryNetworkResponseCache : dev/shtanko/github/data/cache/NetworkResponseCache {
	public synthetic fun <init> (JILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public synthetic fun <init> (JLkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun clear ()V
	public fun get (Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun getExpiration-UwyO8pc ()J
	public fun invalidate (Ljava/lang/String;)V
	public fun put (Ljava/lang/String;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun size ()I
}

public abstract interface class dev/shtanko/github/data/cache/NetworkResponseCache {
	public abstract fun clear ()V
	public abstract fun get (Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun invalidate (Ljava/lang/String;)V
	public abstract fun put (Ljava/lang/String;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun size ()I
}

public final class dev/shtanko/github/data/model/GitHubItemModel {
	public static final field Companion Ldev/shtanko/github/data/model/GitHubItemModel$Companion;
	public fun <init> ()V
	public fun <init> (Ljava/lang/Integer;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;Ldev/shtanko/github/data/model/GitHubOwnerModel;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Integer;Ldev/shtanko/github/data/model/GitHubLicenseModel;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/util/List;Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/String;Ljava/lang/Double;)V
	public synthetic fun <init> (Ljava/lang/Integer;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;Ldev/shtanko/github/data/model/GitHubOwnerModel;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Integer;Ldev/shtanko/github/data/model/GitHubLicenseModel;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/util/List;Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/String;Ljava/lang/Double;IIILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ljava/lang/Integer;
	public final fun component10 ()Ljava/lang/String;
	public final fun component11 ()Ljava/lang/String;
	public final fun component12 ()Ljava/lang/String;
	public final fun component13 ()Ljava/lang/String;
	public final fun component14 ()Ljava/lang/String;
	public final fun component15 ()Ljava/lang/String;
	public final fun component16 ()Ljava/lang/String;
	public final fun component17 ()Ljava/lang/String;
	public final fun component18 ()Ljava/lang/String;
	public final fun component19 ()Ljava/lang/String;
	public final fun component2 ()Ljava/lang/String;
	public final fun component20 ()Ljava/lang/String;
	public final fun component21 ()Ljava/lang/String;
	public final fun component22 ()Ljava/lang/String;
	public final fun component23 ()Ljava/lang/String;
	public final fun component24 ()Ljava/lang/String;
	public final fun component25 ()Ljava/lang/String;
	public final fun component26 ()Ljava/lang/String;
	public final fun component27 ()Ljava/lang/String;
	public final fun component28 ()Ljava/lang/String;
	public final fun component29 ()Ljava/lang/String;
	public final fun component3 ()Ljava/lang/String;
	public final fun component30 ()Ljava/lang/String;
	public final fun component31 ()Ljava/lang/String;
	public final fun component32 ()Ljava/lang/String;
	public final fun component33 ()Ljava/lang/String;
	public final fun component34 ()Ljava/lang/String;
	public final fun component35 ()Ljava/lang/String;
	public final fun component36 ()Ljava/lang/String;
	public final fun component37 ()Ljava/lang/String;
	public final fun component38 ()Ljava/lang/String;
	public final fun component39 ()Ljava/lang/String;
	public final fun component4 ()Ljava/lang/String;
	public final fun component40 ()Ljava/lang/String;
	public final fun component41 ()Ljava/lang/String;
	public final fun component42 ()Ljava/lang/String;
	public final fun component43 ()Ljava/lang/String;
	public final fun component44 ()Ljava/lang/String;
	public final fun component45 ()Ljava/lang/String;
	public final fun component46 ()Ljava/lang/String;
	public final fun component47 ()Ljava/lang/String;
	public final fun component48 ()Ljava/lang/String;
	public final fun component49 ()Ljava/lang/String;
	public final fun component5 ()Ljava/lang/Boolean;
	public final fun component50 ()Ljava/lang/String;
	public final fun component51 ()Ljava/lang/String;
	public final fun component52 ()Ljava/lang/String;
	public final fun component53 ()Ljava/lang/String;
	public final fun component54 ()Ljava/lang/String;
	public final fun component55 ()Ljava/lang/Integer;
	public final fun component56 ()Ljava/lang/Integer;
	public final fun component57 ()Ljava/lang/Integer;
	public final fun component58 ()Ljava/lang/String;
	public final fun component59 ()Ljava/lang/Boolean;
	public final fun component6 ()Ldev/shtanko/github/data/model/GitHubOwnerModel;
	public final fun component60 ()Ljava/lang/Boolean;
	public final fun component61 ()Ljava/lang/Boolean;
	public final fun component62 ()Ljava/lang/Boolean;
	public final fun component63 ()Ljava/lang/Boolean;
	public final fun component64 ()Ljava/lang/Boolean;
	public final fun component65 ()Ljava/lang/Integer;
	public final fun component66 ()Ljava/lang/Boolean;
	public final fun component67 ()Ljava/lang/Boolean;
	public final fun component68 ()Ljava/lang/Integer;
	public final fun component69 ()Ldev/shtanko/github/data/model/GitHubLicenseModel;
	public final fun component7 ()Ljava/lang/String;
	public final fun component70 ()Ljava/lang/Boolean;
	public final fun component71 ()Ljava/lang/Boolean;
	public final fun component72 ()Ljava/lang/Boolean;
	public final fun component73 ()Ljava/util/List;
	public final fun component74 ()Ljava/lang/String;
	public final fun component75 ()Ljava/lang/Integer;
	public final fun component76 ()Ljava/lang/Integer;
	public final fun component77 ()Ljava/lang/Integer;
	public final fun component78 ()Ljava/lang/String;
	public final fun component79 ()Ljava/lang/Double;
	public final fun component8 ()Ljava/lang/String;
	public final fun component9 ()Ljava/lang/Boolean;
	public final fun copy (Ljava/lang/Integer;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;Ldev/shtanko/github/data/model/GitHubOwnerModel;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Integer;Ldev/shtanko/github/data/model/GitHubLicenseModel;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/util/List;Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/String;Ljava/lang/Double;)Ldev/shtanko/github/data/model/GitHubItemModel;
	public static synthetic fun copy$default (Ldev/shtanko/github/data/model/GitHubItemModel;Ljava/lang/Integer;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;Ldev/shtanko/github/data/model/GitHubOwnerModel;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Integer;Ldev/shtanko/github/data/model/GitHubLicenseModel;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/util/List;Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/String;Ljava/lang/Double;IIILjava/lang/Object;)Ldev/shtanko/github/data/model/GitHubItemModel;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getAllowForking ()Ljava/lang/Boolean;
	public final fun getArchiveUrl ()Ljava/lang/String;
	public final fun getArchived ()Ljava/lang/Boolean;
	public final fun getAssigneesUrl ()Ljava/lang/String;
	public final fun getBlobsUrl ()Ljava/lang/String;
	public final fun getBranchesUrl ()Ljava/lang/String;
	public final fun getCloneUrl ()Ljava/lang/String;
	public final fun getCollaboratorsUrl ()Ljava/lang/String;
	public final fun getCommentsUrl ()Ljava/lang/String;
	public final fun getCommitsUrl ()Ljava/lang/String;
	public final fun getCompareUrl ()Ljava/lang/String;
	public final fun getContentsUrl ()Ljava/lang/String;
	public final fun getContributorsUrl ()Ljava/lang/String;
	public final fun getCreatedAt ()Ljava/lang/String;
	public final fun getDefaultBranch ()Ljava/lang/String;
	public final fun getDeploymentsUrl ()Ljava/lang/String;
	public final fun getDescription ()Ljava/lang/String;
	public final fun getDisabled ()Ljava/lang/Boolean;
	public final fun getDownloadsUrl ()Ljava/lang/String;
	public final fun getEventsUrl ()Ljava/lang/String;
	public final fun getFork ()Ljava/lang/Boolean;
	public final fun getForks ()Ljava/lang/Integer;
	public final fun getForksCount ()Ljava/lang/Integer;
	public final fun getForksUrl ()Ljava/lang/String;
	public final fun getFullName ()Ljava/lang/String;
	public final fun getGitCommitsUrl ()Ljava/lang/String;
	public final fun getGitRefsUrl ()Ljava/lang/String;
	public final fun getGitTagsUrl ()Ljava/lang/String;
	public final fun getGitUrl ()Ljava/lang/String;
	public final fun getHasDiscussions ()Ljava/lang/Boolean;
	public final fun getHasDownloads ()Ljava/lang/Boolean;
	public final fun getHasIssues ()Ljava/lang/Boolean;
	public final fun getHasPages ()Ljava/lang/Boolean;
	public final fun getHasProjects ()Ljava/lang/Boolean;
	public final fun getHasWiki ()Ljava/lang/Boolean;
	public final fun getHomepage ()Ljava/lang/String;
	public final fun getHooksUrl ()Ljava/lang/String;
	public final fun getHtmlUrl ()Ljava/lang/String;
	public final fun getId ()Ljava/lang/Integer;
	public final fun getIssueCommentUrl ()Ljava/lang/String;
	public final fun getIssueEventsUrl ()Ljava/lang/String;
	public final fun getIssuesUrl ()Ljava/lang/String;
	public final fun getKeysUrl ()Ljava/lang/String;
	public final fun getLabelsUrl ()Ljava/lang/String;
	public final fun getLanguage ()Ljava/lang/String;
	public final fun getLanguagesUrl ()Ljava/lang/String;
	public final fun getLicense ()Ldev/shtanko/github/data/model/GitHubLicenseModel;
	public final fun getMergesUrl ()Ljava/lang/String;
	public final fun getMilestonesUrl ()Ljava/lang/String;
	public final fun getName ()Ljava/lang/String;
	public final fun getNodeId ()Ljava/lang/String;
	public final fun getNotificationsUrl ()Ljava/lang/String;
	public final fun getOpenIssues ()Ljava/lang/Integer;
	public final fun getOpenIssuesCount ()Ljava/lang/Integer;
	public final fun getOwner ()Ldev/shtanko/github/data/model/GitHubOwnerModel;
	public final fun getPrivate ()Ljava/lang/Boolean;
	public final fun getPullsUrl ()Ljava/lang/String;
	public final fun getPushedAt ()Ljava/lang/String;
	public final fun getReleasesUrl ()Ljava/lang/String;
	public final fun getScore ()Ljava/lang/Double;
	public final fun getSize ()Ljava/lang/Integer;
	public final fun getSshUrl ()Ljava/lang/String;
	public final fun getStargazersCount ()Ljava/lang/Integer;
	public final fun getStargazersUrl ()Ljava/lang/String;
	public final fun getStatusesUrl ()Ljava/lang/String;
	public final fun getSubscribersUrl ()Ljava/lang/String;
	public final fun getSubscriptionUrl ()Ljava/lang/String;
	public final fun getSvnUrl ()Ljava/lang/String;
	public final fun getTagsUrl ()Ljava/lang/String;
	public final fun getTeamsUrl ()Ljava/lang/String;
	public final fun getTopics ()Ljava/util/List;
	public final fun getTreesUrl ()Ljava/lang/String;
	public final fun getUpdatedAt ()Ljava/lang/String;
	public final fun getUrl ()Ljava/lang/String;
	public final fun getVisibility ()Ljava/lang/String;
	public final fun getWatchers ()Ljava/lang/Integer;
	public final fun getWatchersCount ()Ljava/lang/Integer;
	public final fun getWebCommitSignoffRequired ()Ljava/lang/Boolean;
	public fun hashCode ()I
	public final fun isTemplate ()Ljava/lang/Boolean;
	public fun toString ()Ljava/lang/String;
}

public final synthetic class dev/shtanko/github/data/model/GitHubItemModel$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Ldev/shtanko/github/data/model/GitHubItemModel$$serializer;
	public final fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public final fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ldev/shtanko/github/data/model/GitHubItemModel;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public final fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public final fun serialize (Lkotlinx/serialization/encoding/Encoder;Ldev/shtanko/github/data/model/GitHubItemModel;)V
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class dev/shtanko/github/data/model/GitHubItemModel$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class dev/shtanko/github/data/model/GitHubLicenseModel {
	public static final field Companion Ldev/shtanko/github/data/model/GitHubLicenseModel$Companion;
	public fun <init> ()V
	public fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
	public synthetic fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ljava/lang/String;
	public final fun component3 ()Ljava/lang/String;
	public final fun component4 ()Ljava/lang/String;
	public final fun component5 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ldev/shtanko/github/data/model/GitHubLicenseModel;
	public static synthetic fun copy$default (Ldev/shtanko/github/data/model/GitHubLicenseModel;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Ldev/shtanko/github/data/model/GitHubLicenseModel;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getKey ()Ljava/lang/String;
	public final fun getName ()Ljava/lang/String;
	public final fun getNodeId ()Ljava/lang/String;
	public final fun getSpdxId ()Ljava/lang/String;
	public final fun getUrl ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final synthetic class dev/shtanko/github/data/model/GitHubLicenseModel$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Ldev/shtanko/github/data/model/GitHubLicenseModel$$serializer;
	public final fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public final fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ldev/shtanko/github/data/model/GitHubLicenseModel;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public final fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public final fun serialize (Lkotlinx/serialization/encoding/Encoder;Ldev/shtanko/github/data/model/GitHubLicenseModel;)V
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class dev/shtanko/github/data/model/GitHubLicenseModel$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class dev/shtanko/github/data/model/GitHubOwnerModel {
	public static final field Companion Ldev/shtanko/github/data/model/GitHubOwnerModel$Companion;
	public fun <init> ()V
	public fun <init> (Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
	public synthetic fun <init> (Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component10 ()Ljava/lang/String;
	public final fun component11 ()Ljava/lang/String;
	public final fun component12 ()Ljava/lang/String;
	public final fun component13 ()Ljava/lang/String;
	public final fun component14 ()Ljava/lang/String;
	public final fun component15 ()Ljava/lang/String;
	public final fun component16 ()Ljava/lang/String;
	public final fun component17 ()Ljava/lang/String;
	public final fun component18 ()Ljava/lang/String;
	public final fun component19 ()Ljava/lang/Boolean;
	public final fun component2 ()Ljava/lang/Integer;
	public final fun component3 ()Ljava/lang/String;
	public final fun component4 ()Ljava/lang/String;
	public final fun component5 ()Ljava/lang/String;
	public final fun component6 ()Ljava/lang/String;
	public final fun component7 ()Ljava/lang/String;
	public final fun component8 ()Ljava/lang/String;
	public final fun component9 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)Ldev/shtanko/github/data/model/GitHubOwnerModel;
	public static synthetic fun copy$default (Ldev/shtanko/github/data/model/GitHubOwnerModel;Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;ILjava/lang/Object;)Ldev/shtanko/github/data/model/GitHubOwnerModel;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getAvatarUrl ()Ljava/lang/String;
	public final fun getEventsUrl ()Ljava/lang/String;
	public final fun getFollowersUrl ()Ljava/lang/String;
	public final fun getFollowingUrl ()Ljava/lang/String;
	public final fun getGistsUrl ()Ljava/lang/String;
	public final fun getGravatarId ()Ljava/lang/String;
	public final fun getHtmlUrl ()Ljava/lang/String;
	public final fun getId ()Ljava/lang/Integer;
	public final fun getLogin ()Ljava/lang/String;
	public final fun getNodeId ()Ljava/lang/String;
	public final fun getOrganizationsUrl ()Ljava/lang/String;
	public final fun getReceivedEventsUrl ()Ljava/lang/String;
	public final fun getReposUrl ()Ljava/lang/String;
	public final fun getSiteAdmin ()Ljava/lang/Boolean;
	public final fun getStarredUrl ()Ljava/lang/String;
	public final fun getSubscriptionsUrl ()Ljava/lang/String;
	public final fun getType ()Ljava/lang/String;
	public final fun getUrl ()Ljava/lang/String;
	public final fun getUserViewType ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final synthetic class dev/shtanko/github/data/model/GitHubOwnerModel$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Ldev/shtanko/github/data/model/GitHubOwnerModel$$serializer;
	public final fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public final fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ldev/shtanko/github/data/model/GitHubOwnerModel;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public final fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public final fun serialize (Lkotlinx/serialization/encoding/Encoder;Ldev/shtanko/github/data/model/GitHubOwnerModel;)V
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class dev/shtanko/github/data/model/GitHubOwnerModel$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class dev/shtanko/github/data/model/Order : java/lang/Enum {
	public static final field ASC Ldev/shtanko/github/data/model/Order;
	public static final field Companion Ldev/shtanko/github/data/model/Order$Companion;
	public static final field DESC Ldev/shtanko/github/data/model/Order;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Ldev/shtanko/github/data/model/Order;
	public static fun values ()[Ldev/shtanko/github/data/model/Order;
}

public final class dev/shtanko/github/data/model/Order$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class dev/shtanko/github/data/model/SearchResponseModel {
	public static final field Companion Ldev/shtanko/github/data/model/SearchResponseModel$Companion;
	public fun <init> ()V
	public fun <init> (Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/util/List;)V
	public synthetic fun <init> (Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/util/List;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ljava/lang/Integer;
	public final fun component2 ()Ljava/lang/Boolean;
	public final fun component3 ()Ljava/util/List;
	public final fun copy (Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/util/List;)Ldev/shtanko/github/data/model/SearchResponseModel;
	public static synthetic fun copy$default (Ldev/shtanko/github/data/model/SearchResponseModel;Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/util/List;ILjava/lang/Object;)Ldev/shtanko/github/data/model/SearchResponseModel;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getIncompleteResults ()Ljava/lang/Boolean;
	public final fun getItems ()Ljava/util/List;
	public final fun getTotalCount ()Ljava/lang/Integer;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final synthetic class dev/shtanko/github/data/model/SearchResponseModel$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Ldev/shtanko/github/data/model/SearchResponseModel$$serializer;
	public final fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public final fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ldev/shtanko/github/data/model/SearchResponseModel;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public final fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public final fun serialize (Lkotlinx/serialization/encoding/Encoder;Ldev/shtanko/github/data/model/SearchResponseModel;)V
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class dev/shtanko/github/data/model/SearchResponseModel$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class dev/shtanko/github/data/model/Sort : java/lang/Enum {
	public static final field Companion Ldev/shtanko/github/data/model/Sort$Companion;
	public static final field STARS Ldev/shtanko/github/data/model/Sort;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Ldev/shtanko/github/data/model/Sort;
	public static fun values ()[Ldev/shtanko/github/data/model/Sort;
}

public final class dev/shtanko/github/data/model/Sort$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class dev/shtanko/github/data/network/di/DiKt {
	public static final fun provideHttpLoggingInterceptor ()Lkotlin/Lazy;
	public static final fun provideOkHttp (Lokhttp3/Interceptor;)Lkotlin/Lazy;
	public static final fun provideRetrofit (Lkotlinx/serialization/json/Json;Lokhttp3/OkHttpClient;)Lkotlin/Lazy;
	public static synthetic fun provideRetrofit$default (Lkotlinx/serialization/json/Json;Lokhttp3/OkHttpClient;ILjava/lang/Object;)Lkotlin/Lazy;
	public static final fun provideSearchService (Lkotlinx/serialization/json/Json;Lokhttp3/OkHttpClient;Ljava/lang/String;Lretrofit2/Retrofit;)Lkotlin/Lazy;
	public static synthetic fun provideSearchService$default (Lkotlinx/serialization/json/Json;Lokhttp3/OkHttpClient;Ljava/lang/String;Lretrofit2/Retrofit;ILjava/lang/Object;)Lkotlin/Lazy;
	public static final fun providesNetworkJson ()Lkotlin/Lazy;
}

public abstract interface class dev/shtanko/github/data/network/service/SearchService {
	public abstract fun search (Ljava/lang/String;Ldev/shtanko/github/data/model/Order;Ljava/lang/Integer;Ldev/shtanko/github/data/model/Sort;Ljava/lang/Integer;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun search$default (Ldev/shtanko/github/data/network/service/SearchService;Ljava/lang/String;Ldev/shtanko/github/data/model/Order;Ljava/lang/Integer;Ldev/shtanko/github/data/model/Sort;Ljava/lang/Integer;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
}

public final class dev/shtanko/github/data/network/service/SearchService$DefaultImpls {
	public static synthetic fun search$default (Ldev/shtanko/github/data/network/service/SearchService;Ljava/lang/String;Ldev/shtanko/github/data/model/Order;Ljava/lang/Integer;Ldev/shtanko/github/data/model/Sort;Ljava/lang/Integer;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
}

public abstract interface class dev/shtanko/github/data/repository/SearchRepository {
	public abstract fun search (Ljava/lang/String;Ldev/shtanko/github/data/model/Order;Ljava/lang/Integer;Ldev/shtanko/github/data/model/Sort;Ljava/lang/Integer;)Lkotlinx/coroutines/flow/Flow;
}

public final class dev/shtanko/github/data/repository/SearchRepositoryImpl : dev/shtanko/github/data/repository/SearchRepository {
	public fun <init> (Ldev/shtanko/github/data/network/service/SearchService;Ldev/shtanko/github/data/cache/NetworkResponseCache;Lkotlinx/coroutines/CoroutineDispatcher;)V
	public fun search (Ljava/lang/String;Ldev/shtanko/github/data/model/Order;Ljava/lang/Integer;Ldev/shtanko/github/data/model/Sort;Ljava/lang/Integer;)Lkotlinx/coroutines/flow/Flow;
}

public final class dev/shtanko/grasp/controller/example1/Book {
	public fun <init> (Ljava/lang/String;D)V
	public final fun getPrice ()D
	public final fun getTitle ()Ljava/lang/String;
}

public final class dev/shtanko/grasp/controller/example1/CheckoutController {
	public fun <init> (Ldev/shtanko/grasp/controller/example1/ShoppingCart;)V
	public final fun processCheckout ()D
}

public final class dev/shtanko/grasp/controller/example1/Example1Kt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/grasp/controller/example1/ShoppingCart {
	public fun <init> ()V
	public final fun addItem (Ldev/shtanko/grasp/controller/example1/Book;)V
	public final fun calculateTotalPrice ()D
}

public final class dev/shtanko/grasp/creator/example1/Catalog {
	public fun <init> ()V
	public final fun createProduct (Ljava/lang/String;D)Ldev/shtanko/grasp/creator/example1/Product;
}

public final class dev/shtanko/grasp/creator/example1/Example1Kt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/grasp/creator/example1/Product {
	public fun <init> (Ljava/lang/String;D)V
	public final fun getName ()Ljava/lang/String;
	public final fun getPrice ()D
}

public final class dev/shtanko/grasp/hc/example1/Example1Kt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/grasp/hc/example1/Message {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
	public final fun getContent ()Ljava/lang/String;
	public final fun getReceiver ()Ljava/lang/String;
	public final fun getSender ()Ljava/lang/String;
}

public final class dev/shtanko/grasp/hc/example1/MessageStatistics {
	public fun <init> (Ldev/shtanko/grasp/hc/example1/MessageStorage;)V
	public final fun getAverageMessageLength ()D
	public final fun getMessageCount ()I
}

public final class dev/shtanko/grasp/hc/example1/MessageStorage {
	public fun <init> ()V
	public final fun retrieveMessages ()Ljava/util/List;
	public final fun storeMessage (Ldev/shtanko/grasp/hc/example1/Message;)V
}

public final class dev/shtanko/grasp/ie/example1/Example1Kt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/grasp/ie/example1/Item {
	public fun <init> (Ljava/lang/String;D)V
	public final fun getName ()Ljava/lang/String;
	public final fun getPrice ()D
}

public final class dev/shtanko/grasp/ie/example1/Order {
	public fun <init> ()V
	public final fun addItem (Ldev/shtanko/grasp/ie/example1/Item;)V
	public final fun calculateTotalCost ()D
}

public final class dev/shtanko/grasp/indirection/example1/Booking {
	public fun <init> (Ldev/shtanko/grasp/indirection/example1/User;Ljava/lang/String;)V
	public final fun getDate ()Ljava/lang/String;
	public final fun getUser ()Ldev/shtanko/grasp/indirection/example1/User;
}

public class dev/shtanko/grasp/indirection/example1/EmailService {
	public fun <init> ()V
	public fun sendEmail (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
}

public final class dev/shtanko/grasp/indirection/example1/Example1Kt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/grasp/indirection/example1/NotificationManager {
	public fun <init> (Ldev/shtanko/grasp/indirection/example1/EmailService;)V
	public final fun notifyUser (Ldev/shtanko/grasp/indirection/example1/User;Ljava/lang/String;)V
}

public final class dev/shtanko/grasp/indirection/example1/User {
	public fun <init> (Ljava/lang/String;)V
	public final fun getName ()Ljava/lang/String;
}

public final class dev/shtanko/grasp/lc/example1/EmailSender : dev/shtanko/grasp/lc/example1/MessageSender {
	public fun <init> ()V
	public fun sendMessage (Ljava/lang/String;)V
}

public final class dev/shtanko/grasp/lc/example1/Example1Kt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public abstract interface class dev/shtanko/grasp/lc/example1/MessageSender {
	public abstract fun sendMessage (Ljava/lang/String;)V
}

public final class dev/shtanko/grasp/lc/example1/SMSMessageSender : dev/shtanko/grasp/lc/example1/MessageSender {
	public fun <init> ()V
	public fun sendMessage (Ljava/lang/String;)V
}

public final class dev/shtanko/grasp/lc/example1/UserNotification {
	public fun <init> (Ldev/shtanko/grasp/lc/example1/MessageSender;)V
	public final fun notifyUser (Ljava/lang/String;)V
}

public final class dev/shtanko/grasp/pf/example1/CartCalculator {
	public fun <init> ()V
	public final fun calculateTotal (Ljava/util/List;)D
}

public final class dev/shtanko/grasp/pf/example1/CartItem {
	public fun <init> (Ldev/shtanko/grasp/pf/example1/Product;I)V
	public final fun getProduct ()Ldev/shtanko/grasp/pf/example1/Product;
	public final fun getQuantity ()I
}

public final class dev/shtanko/grasp/pf/example1/Example1Kt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/grasp/pf/example1/Product {
	public fun <init> (Ljava/lang/String;D)V
	public final fun getName ()Ljava/lang/String;
	public final fun getPrice ()D
}

public final class dev/shtanko/grasp/polymorphism/example1/Circle : dev/shtanko/grasp/polymorphism/example1/Shape {
	public fun <init> (D)V
	public fun area ()D
}

public final class dev/shtanko/grasp/polymorphism/example1/Example1Kt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/grasp/polymorphism/example1/Rectangle : dev/shtanko/grasp/polymorphism/example1/Shape {
	public fun <init> (DD)V
	public fun area ()D
}

public abstract interface class dev/shtanko/grasp/polymorphism/example1/Shape {
	public abstract fun area ()D
}

public final class dev/shtanko/grasp/polymorphism/example1/ShapeRenderer {
	public fun <init> ()V
	public final fun render (Ldev/shtanko/grasp/polymorphism/example1/Shape;)V
}

public final class dev/shtanko/grasp/polymorphism/example1/Triangle : dev/shtanko/grasp/polymorphism/example1/Shape {
	public static final field Companion Ldev/shtanko/grasp/polymorphism/example1/Triangle$Companion;
	public fun <init> (DD)V
	public fun area ()D
}

public final class dev/shtanko/grasp/polymorphism/example1/Triangle$Companion {
}

public final class dev/shtanko/jmm/memory/ManualResourceManagementKt {
	public static final fun readFromFile (Ljava/lang/String;)V
}

public final class dev/shtanko/jmm/memory/MemoryLeaksKt {
	public static final fun createMemoryLeak ()V
}

public final class dev/shtanko/jmm/obj/AvoidingUnnecessaryObjectCreationKt {
	public static final fun avoidUnnecessaryObjectCreation (Ldev/shtanko/jmm/obj/SomeClass;)V
}

public final class dev/shtanko/jmm/obj/DataClassAndImmutability {
	public fun <init> (Ljava/lang/String;I)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()I
	public final fun copy (Ljava/lang/String;I)Ldev/shtanko/jmm/obj/DataClassAndImmutability;
	public static synthetic fun copy$default (Ldev/shtanko/jmm/obj/DataClassAndImmutability;Ljava/lang/String;IILjava/lang/Object;)Ldev/shtanko/jmm/obj/DataClassAndImmutability;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getA ()Ljava/lang/String;
	public final fun getB ()I
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/jmm/obj/ObjectCreationKt {
	public static final fun createObjects ()V
}

public final class dev/shtanko/jmm/obj/SomeClass {
	public fun <init> ()V
}

public final class dev/shtanko/jmm/ref/queue/GFG {
	public static final field INSTANCE Ldev/shtanko/jmm/ref/queue/GFG;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/jmm/ref/queue/HelperClass {
	public fun <init> ()V
	public final fun display ()V
}

public final class dev/shtanko/jmm/ref/queue/ReferenceQueueEx1 {
	public static final field INSTANCE Ldev/shtanko/jmm/ref/queue/ReferenceQueueEx1;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/kotlinlang/any/AnyExampleKt {
	public static final fun compareHashCodesAny (Ljava/lang/Object;Ljava/lang/Object;)Z
	public static final fun compareHashCodesAnyNullable (Ljava/lang/Object;Ljava/lang/Object;)Z
	public static final fun isConsistent (Lkotlin/Pair;I)Z
	public static final fun isTransitive (Lkotlin/Triple;)Z
	public static final fun symmetric (Ljava/lang/Object;Ljava/lang/Object;)Z
}

public final class dev/shtanko/kotlinlang/collections/CompareIterableSequenceKt {
	public static final fun getFirstFromList (Lkotlin/ranges/IntRange;)Lkotlin/Triple;
	public static final fun getFirstFromSequence (Lkotlin/sequences/Sequence;)Lkotlin/Triple;
}

public final class dev/shtanko/kotlinlang/collections/processing/ChunkedKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/kotlinlang/collections/processing/UnzipKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/kotlinlang/collections/processing/WindowedKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/kotlinlang/collections/processing/ZipKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/kotlinlang/collections/processing/ZipWithNextKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/kotlinlang/delegates/ClassWithDelegate {
	public fun <init> (I)V
	public final fun getAnotherClassInt ()I
}

public final class dev/shtanko/kotlinlang/delegates/DelegatingToAnotherPropertyKt {
	public static final fun getExtDelegated (Ldev/shtanko/kotlinlang/delegates/MyClass;)I
	public static final fun getTopLevelInt ()I
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
	public static final fun setExtDelegated (Ldev/shtanko/kotlinlang/delegates/MyClass;I)V
	public static final fun setTopLevelInt (I)V
}

public final class dev/shtanko/kotlinlang/delegates/MyClass {
	public fun <init> (ILdev/shtanko/kotlinlang/delegates/ClassWithDelegate;)V
	public final fun getAnotherClassInstance ()Ldev/shtanko/kotlinlang/delegates/ClassWithDelegate;
	public final fun getDelegatedToAnotherClass ()I
	public final fun getDelegatedToMember ()I
	public final fun getDelegatedToTopLevel ()I
	public final fun getMemberInt ()I
	public final fun setDelegatedToMember (I)V
	public final fun setDelegatedToTopLevel (I)V
	public final fun setMemberInt (I)V
}

public final class dev/shtanko/kotlinlang/delegates/StoringPropertiesInMapKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/kotlinlang/delegates/delegatedproperties/Delegate {
	public fun <init> ()V
	public final fun getValue (Ljava/lang/Object;Lkotlin/reflect/KProperty;)Ljava/lang/String;
	public final fun setValue (Ljava/lang/Object;Lkotlin/reflect/KProperty;Ljava/lang/String;)V
}

public final class dev/shtanko/kotlinlang/delegates/delegatedproperties/DelegatedPropertiesKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/kotlinlang/delegates/delegatedproperties/Example {
	public fun <init> ()V
	public final fun getP ()Ljava/lang/String;
	public final fun setP (Ljava/lang/String;)V
}

public final class dev/shtanko/kotlinlang/delegates/lazy/LazyValueKt {
	public static final fun getLazyValue ()Ljava/lang/String;
	public static final fun getNotThreadSafeLazy ()Ljava/lang/String;
}

public final class dev/shtanko/kotlinlang/delegates/observable/ObservableValueKt {
	public static final fun getObservableValue ()Ljava/lang/String;
	public static final fun setObservableValue (Ljava/lang/String;)V
}

public final class dev/shtanko/kotlinlang/delegates/observable/usecases/example1/Bar {
	public fun <init> ()V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/kotlinlang/delegates/observable/usecases/example1/BarKt {
	public static final fun getFoo ()Ldev/shtanko/kotlinlang/delegates/observable/usecases/example1/Foo;
	public static final fun setFoo (Ldev/shtanko/kotlinlang/delegates/observable/usecases/example1/Foo;)V
}

public final class dev/shtanko/kotlinlang/delegates/observable/usecases/example1/Foo {
	public fun <init> ()V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/kotlinlang/delegates/observable/usecases/example1/FooKt {
	public static final fun getBar ()Ldev/shtanko/kotlinlang/delegates/observable/usecases/example1/Bar;
	public static final fun setBar (Ldev/shtanko/kotlinlang/delegates/observable/usecases/example1/Bar;)V
}

public final class dev/shtanko/kotlinlang/delegates/observable/usecases/example1/PrintDelegateKt {
	public static final fun printDelegate (Ljava/lang/Object;)Lkotlin/properties/ReadWriteProperty;
}

public final class dev/shtanko/kotlinlang/delegates/vetoable/VetoableKt {
	public static final fun getMax ()I
	public static final fun getName ()Ljava/lang/String;
	public static final fun setMax (I)V
	public static final fun setName (Ljava/lang/String;)V
}

public final class dev/shtanko/kotlinlang/delegation/classic/Rectangle {
	public fun <init> (II)V
	public final fun area ()I
}

public final class dev/shtanko/kotlinlang/delegation/classic/Window {
	public fun <init> (Ldev/shtanko/kotlinlang/delegation/classic/Rectangle;)V
	public final fun area ()I
}

public final class dev/shtanko/kotlinlang/delegation/support/ClosedRectangle : dev/shtanko/kotlinlang/delegation/support/ClosedShape {
	public fun <init> (II)V
	public fun area ()I
	public final fun getHeight ()I
}

public abstract interface class dev/shtanko/kotlinlang/delegation/support/ClosedShape {
	public abstract fun area ()I
}

public final class dev/shtanko/kotlinlang/delegation/support/ClosedWindow : dev/shtanko/kotlinlang/delegation/support/ClosedShape {
	public fun <init> (Ldev/shtanko/kotlinlang/delegation/support/ClosedShape;)V
	public fun area ()I
}

public final class dev/shtanko/kotlinlang/delegation/support/sound/ElvisPresley : dev/shtanko/kotlinlang/delegation/support/sound/SoundBehavior {
	public fun <init> (Ljava/lang/String;)V
	public fun makeSound ()Ljava/lang/String;
}

public final class dev/shtanko/kotlinlang/delegation/support/sound/RockBehaviour : dev/shtanko/kotlinlang/delegation/support/sound/SoundBehavior {
	public fun <init> (Ljava/lang/String;)V
	public final fun getN ()Ljava/lang/String;
	public fun makeSound ()Ljava/lang/String;
}

public final class dev/shtanko/kotlinlang/delegation/support/sound/ScreamBehavior : dev/shtanko/kotlinlang/delegation/support/sound/SoundBehavior {
	public fun <init> (Ljava/lang/String;)V
	public final fun getN ()Ljava/lang/String;
	public fun makeSound ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/kotlinlang/delegation/support/sound/SoundBehavior {
	public abstract fun makeSound ()Ljava/lang/String;
}

public final class dev/shtanko/kotlinlang/delegation/support/sound/TomAraya : dev/shtanko/kotlinlang/delegation/support/sound/SoundBehavior {
	public fun <init> (Ljava/lang/String;)V
	public fun makeSound ()Ljava/lang/String;
}

public final class dev/shtanko/kotlinlang/functions/AnonymousKt {
	public static final fun getSum ()Lkotlin/jvm/functions/Function2;
}

public final class dev/shtanko/kotlinlang/functions/FoldKt {
	public static final fun fold (Ljava/util/Collection;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;
}

public final class dev/shtanko/kotlinlang/functions/grouping/GroupingKt {
	public static final fun getCompareByVowelCount ()Ljava/util/Comparator;
	public static final fun maxVowels (Ljava/util/List;)Ljava/util/Map;
}

public final class dev/shtanko/kotlinlang/functions/higherorder/FoldKt {
	public static final fun fold (Ljava/util/Collection;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;
}

public final class dev/shtanko/kotlinlang/functions/inline/Env {
	public static final field DEBUG Z
	public static final field INSTANCE Ldev/shtanko/kotlinlang/functions/inline/Env;
	public final fun getUTF8_SUPPORT ()Z
}

public final class dev/shtanko/kotlinlang/functions/inline/InlineKt {
	public static final fun doOnDebug (Lkotlin/jvm/functions/Function1;ILkotlin/jvm/functions/Function0;)V
	public static synthetic fun doOnDebug$default (Lkotlin/jvm/functions/Function1;ILkotlin/jvm/functions/Function0;ILjava/lang/Object;)V
	public static final fun flush (Lkotlin/jvm/functions/Function1;)V
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/kotlinlang/functions/reduce/ReduceExampleKt {
	public static final fun reduceList (Ljava/util/List;)I
	public static final fun reduceList (Ljava/util/List;)Ljava/lang/String;
	public static final fun reduceListIndexed (Ljava/util/List;)Ljava/lang/String;
}

public final class dev/shtanko/kotlinlang/functions/scope/ExampleLet {
	public fun <init> ()V
	public final fun isEmpty (Ljava/lang/String;)Z
	public final fun printNonNull (Ljava/lang/String;)V
}

public final class dev/shtanko/kotlinlang/generics/Box {
	public fun <init> (Ljava/lang/Object;)V
	public final fun getValue ()Ljava/lang/Object;
	public final fun setValue (Ljava/lang/Object;)V
}

public final class dev/shtanko/kotlinlang/generics/CopyWhenGreaterKt {
	public static final fun copyWhenGreater (Ljava/util/List;Ljava/lang/CharSequence;)Ljava/util/List;
}

public final class dev/shtanko/kotlinlang/generics/CovarianceKt {
	public static final fun copy ([Ljava/lang/Object;[Ljava/lang/Object;)V
}

public final class dev/shtanko/kotlinlang/generics/InAndOut {
	public static final field INSTANCE Ldev/shtanko/kotlinlang/generics/InAndOut;
}

public final class dev/shtanko/kotlinlang/inline/InlineKt {
	public static final fun each (Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)V
}

public final class dev/shtanko/kotlinlang/inline/Name {
	public static final synthetic fun box-impl (Ljava/lang/String;)Ldev/shtanko/kotlinlang/inline/Name;
	public static fun constructor-impl (Ljava/lang/String;)Ljava/lang/String;
	public fun equals (Ljava/lang/Object;)Z
	public static fun equals-impl (Ljava/lang/String;Ljava/lang/Object;)Z
	public static final fun equals-impl0 (Ljava/lang/String;Ljava/lang/String;)Z
	public final fun getS ()Ljava/lang/String;
	public fun hashCode ()I
	public static fun hashCode-impl (Ljava/lang/String;)I
	public fun toString ()Ljava/lang/String;
	public static fun toString-impl (Ljava/lang/String;)Ljava/lang/String;
	public final synthetic fun unbox-impl ()Ljava/lang/String;
}

public final class dev/shtanko/kotlinlang/inline/Password {
	public static final synthetic fun box-impl (Ljava/lang/String;)Ldev/shtanko/kotlinlang/inline/Password;
	public static fun constructor-impl (Ljava/lang/String;)Ljava/lang/String;
	public fun equals (Ljava/lang/Object;)Z
	public static fun equals-impl (Ljava/lang/String;Ljava/lang/Object;)Z
	public static final fun equals-impl0 (Ljava/lang/String;Ljava/lang/String;)Z
	public final fun getS ()Ljava/lang/String;
	public fun hashCode ()I
	public static fun hashCode-impl (Ljava/lang/String;)I
	public fun toString ()Ljava/lang/String;
	public static fun toString-impl (Ljava/lang/String;)Ljava/lang/String;
	public final synthetic fun unbox-impl ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/kotlinlang/inline/Printable {
	public abstract fun prettyPrint ()Ljava/lang/String;
}

public final class dev/shtanko/kotlinlang/inline/Surname : dev/shtanko/kotlinlang/inline/Printable {
	public static final synthetic fun box-impl (Ljava/lang/String;)Ldev/shtanko/kotlinlang/inline/Surname;
	public static fun constructor-impl (Ljava/lang/String;)Ljava/lang/String;
	public fun equals (Ljava/lang/Object;)Z
	public static fun equals-impl (Ljava/lang/String;Ljava/lang/Object;)Z
	public static final fun equals-impl0 (Ljava/lang/String;Ljava/lang/String;)Z
	public final fun getS ()Ljava/lang/String;
	public fun hashCode ()I
	public static fun hashCode-impl (Ljava/lang/String;)I
	public fun prettyPrint ()Ljava/lang/String;
	public static fun prettyPrint-impl (Ljava/lang/String;)Ljava/lang/String;
	public fun toString ()Ljava/lang/String;
	public static fun toString-impl (Ljava/lang/String;)Ljava/lang/String;
	public final synthetic fun unbox-impl ()Ljava/lang/String;
}

public final class dev/shtanko/kotlinlang/lambda/LambdaKt {
	public static final fun getMul ()Lkotlin/jvm/functions/Function1;
	public static final fun setMul (Lkotlin/jvm/functions/Function1;)V
}

public final class dev/shtanko/kotlinlang/loops/DoWhileLoopKt {
	public static final fun doWhileExample ()V
}

public final class dev/shtanko/kotlinlang/loops/ForLoopsKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
	public static final fun simpleForLoopArray ()V
	public static final fun simpleForLoopArrayWithIndex ()V
	public static final fun simpleForLoopDownTo ()V
	public static final fun simpleForLoopDownToStep ()V
	public static final fun simpleForLoopDownToStep1 ()V
	public static final fun simpleForLoopDownToStep2 ()V
	public static final fun simpleForLoopRange ()V
	public static final fun simpleForLoopRangeStep ()V
	public static final fun simpleForLoopUntil ()V
}

public final class dev/shtanko/kotlinlang/loops/WhileLoopKt {
	public static final fun whileLoopExample ()V
}

public abstract interface class dev/shtanko/kotlinlang/sealed/Error {
}

public final class dev/shtanko/kotlinlang/sealed/Failure : dev/shtanko/kotlinlang/sealed/Result {
	public fun <init> (Ljava/lang/Object;)V
	public final fun component1 ()Ljava/lang/Object;
	public final fun copy (Ljava/lang/Object;)Ldev/shtanko/kotlinlang/sealed/Failure;
	public static synthetic fun copy$default (Ldev/shtanko/kotlinlang/sealed/Failure;Ljava/lang/Object;ILjava/lang/Object;)Ldev/shtanko/kotlinlang/sealed/Failure;
	public fun equals (Ljava/lang/Object;)Z
	public fun get ()Ljava/lang/Object;
	public final fun getFailure ()Ljava/lang/Object;
	public fun hashCode ()I
	public fun map (Lkotlin/jvm/functions/Function1;)Ldev/shtanko/kotlinlang/sealed/Result;
	public fun mapFailure (Lkotlin/jvm/functions/Function1;)Ldev/shtanko/kotlinlang/sealed/Result;
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/kotlinlang/sealed/FileReadError : dev/shtanko/kotlinlang/sealed/IOError {
	public fun <init> (Ljava/io/File;)V
	public final fun getF ()Ljava/io/File;
}

public abstract class dev/shtanko/kotlinlang/sealed/IOError : dev/shtanko/kotlinlang/sealed/Error {
}

public abstract class dev/shtanko/kotlinlang/sealed/Result {
	public abstract fun get ()Ljava/lang/Object;
	public abstract fun map (Lkotlin/jvm/functions/Function1;)Ldev/shtanko/kotlinlang/sealed/Result;
	public abstract fun mapFailure (Lkotlin/jvm/functions/Function1;)Ldev/shtanko/kotlinlang/sealed/Result;
}

public final class dev/shtanko/kotlinlang/sealed/RuntimeError : dev/shtanko/kotlinlang/sealed/Error {
	public static final field INSTANCE Ldev/shtanko/kotlinlang/sealed/RuntimeError;
}

public final class dev/shtanko/kotlinlang/sealed/Success : dev/shtanko/kotlinlang/sealed/Result {
	public fun <init> (Ljava/lang/Object;)V
	public final fun component1 ()Ljava/lang/Object;
	public final fun copy (Ljava/lang/Object;)Ldev/shtanko/kotlinlang/sealed/Success;
	public static synthetic fun copy$default (Ldev/shtanko/kotlinlang/sealed/Success;Ljava/lang/Object;ILjava/lang/Object;)Ldev/shtanko/kotlinlang/sealed/Success;
	public fun equals (Ljava/lang/Object;)Z
	public fun get ()Ljava/lang/Object;
	public final fun getSuccess ()Ljava/lang/Object;
	public fun hashCode ()I
	public fun map (Lkotlin/jvm/functions/Function1;)Ldev/shtanko/kotlinlang/sealed/Result;
	public fun mapFailure (Lkotlin/jvm/functions/Function1;)Ldev/shtanko/kotlinlang/sealed/Result;
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/kotlinlang/types/nothing/Example1Kt {
	public static final fun describeNumber (I)Ljava/lang/String;
	public static final fun fail (Ljava/lang/String;)Ljava/lang/Void;
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/kotlinlang/types/nothing/Example2Kt {
	public static final fun exit ()Ljava/lang/Void;
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/kotlinlang/types/nothing/Example3Kt {
	public static final fun emptyListExample ()V
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/kotlinlang/types/phantom/Closed : dev/shtanko/kotlinlang/types/phantom/DoorState {
	public static final field INSTANCE Ldev/shtanko/kotlinlang/types/phantom/Closed;
}

public final class dev/shtanko/kotlinlang/types/phantom/Door {
	public fun <init> (Ldev/shtanko/kotlinlang/types/phantom/DoorState;)V
	public final fun getState ()Ldev/shtanko/kotlinlang/types/phantom/DoorState;
}

public abstract class dev/shtanko/kotlinlang/types/phantom/DoorState {
}

public final class dev/shtanko/kotlinlang/types/phantom/DoorStateKt {
	public static final fun close (Ldev/shtanko/kotlinlang/types/phantom/Door;)Ldev/shtanko/kotlinlang/types/phantom/Door;
	public static final fun open (Ldev/shtanko/kotlinlang/types/phantom/Door;)Ldev/shtanko/kotlinlang/types/phantom/Door;
}

public final class dev/shtanko/kotlinlang/types/phantom/DoorViolation {
	public fun <init> (Ldev/shtanko/kotlinlang/types/phantom/DoorState;)V
	public final fun close ()Ldev/shtanko/kotlinlang/types/phantom/DoorViolation;
	public final fun getState ()Ldev/shtanko/kotlinlang/types/phantom/DoorState;
	public final fun open ()Ldev/shtanko/kotlinlang/types/phantom/DoorViolation;
}

public final class dev/shtanko/kotlinlang/types/phantom/Open : dev/shtanko/kotlinlang/types/phantom/DoorState {
	public static final field INSTANCE Ldev/shtanko/kotlinlang/types/phantom/Open;
}

public final class dev/shtanko/kotlinlang/types/unsigned/UnsignedKt {
	public static final field BIG_COUNTER J
	public static final fun buffers ()V
	public static final fun unsignedBitwiseAnd-7apg3OU (B)B
	public static synthetic fun unsignedBitwiseAnd-7apg3OU$default (BILjava/lang/Object;)B
}

public final class dev/shtanko/kotlinlang/value/Dp : java/lang/Comparable {
	public static final field Companion Ldev/shtanko/kotlinlang/value/Dp$Companion;
	public static final field MULTIPLY_FACTOR F
	public static final synthetic fun box-impl (F)Ldev/shtanko/kotlinlang/value/Dp;
	public synthetic fun compareTo (Ljava/lang/Object;)I
	public fun compareTo-xgJiL7c (F)I
	public static fun compareTo-xgJiL7c (FF)I
	public static fun constructor-impl (F)F
	public fun equals (Ljava/lang/Object;)Z
	public static fun equals-impl (FLjava/lang/Object;)Z
	public static final fun equals-impl0 (FF)Z
	public final fun getValue ()F
	public fun hashCode ()I
	public static fun hashCode-impl (F)I
	public static final fun plus-K4sCJgA (FF)F
	public fun toString ()Ljava/lang/String;
	public static fun toString-impl (F)Ljava/lang/String;
	public final synthetic fun unbox-impl ()F
}

public final class dev/shtanko/kotlinlang/value/Dp$Companion {
}

public final class dev/shtanko/kotlinlang/value/DpKt {
	public static final fun getDp (I)F
}

public final class dev/shtanko/kotlinlang/whatsnew/v2/Cat {
	public fun <init> ()V
	public final fun purr ()V
}

public abstract interface class dev/shtanko/kotlinlang/whatsnew/v2/Declined : dev/shtanko/kotlinlang/whatsnew/v2/Status {
}

public final class dev/shtanko/kotlinlang/whatsnew/v2/HolderLegacyKotlin {
	public fun <init> (Lkotlin/jvm/functions/Function0;)V
	public final fun getProvider ()Lkotlin/jvm/functions/Function0;
	public final fun process ()V
}

public final class dev/shtanko/kotlinlang/whatsnew/v2/HolderNewKotlin {
	public fun <init> (Ldev/shtanko/kotlinlang/whatsnew/v2/Provider;Ldev/shtanko/kotlinlang/whatsnew/v2/Processor2;)V
	public final fun getProcessor ()Ldev/shtanko/kotlinlang/whatsnew/v2/Processor2;
	public final fun getProvider ()Ldev/shtanko/kotlinlang/whatsnew/v2/Provider;
	public final fun process ()V
}

public final class dev/shtanko/kotlinlang/whatsnew/v2/ListsKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public abstract interface class dev/shtanko/kotlinlang/whatsnew/v2/Ok : dev/shtanko/kotlinlang/whatsnew/v2/Status {
}

public abstract interface class dev/shtanko/kotlinlang/whatsnew/v2/Postponed : dev/shtanko/kotlinlang/whatsnew/v2/Status {
}

public abstract interface class dev/shtanko/kotlinlang/whatsnew/v2/Processor {
	public abstract fun process ()V
}

public abstract interface class dev/shtanko/kotlinlang/whatsnew/v2/Processor2 : kotlin/jvm/functions/Function0 {
}

public abstract interface class dev/shtanko/kotlinlang/whatsnew/v2/Provider {
	public abstract fun invoke ()V
}

public final class dev/shtanko/kotlinlang/whatsnew/v2/RGB : java/lang/Enum {
	public static final field BLUE Ldev/shtanko/kotlinlang/whatsnew/v2/RGB;
	public static final field GREEN Ldev/shtanko/kotlinlang/whatsnew/v2/RGB;
	public static final field RED Ldev/shtanko/kotlinlang/whatsnew/v2/RGB;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Ldev/shtanko/kotlinlang/whatsnew/v2/RGB;
	public static fun values ()[Ldev/shtanko/kotlinlang/whatsnew/v2/RGB;
}

public abstract interface class dev/shtanko/kotlinlang/whatsnew/v2/Rho {
	public fun inc ()Ldev/shtanko/kotlinlang/whatsnew/v2/Sigma;
}

public final class dev/shtanko/kotlinlang/whatsnew/v2/Rho$DefaultImpls {
	public static fun inc (Ldev/shtanko/kotlinlang/whatsnew/v2/Rho;)Ldev/shtanko/kotlinlang/whatsnew/v2/Sigma;
}

public abstract interface class dev/shtanko/kotlinlang/whatsnew/v2/Sigma : dev/shtanko/kotlinlang/whatsnew/v2/Rho {
	public fun sigma ()V
}

public final class dev/shtanko/kotlinlang/whatsnew/v2/Sigma$DefaultImpls {
	public static fun inc (Ldev/shtanko/kotlinlang/whatsnew/v2/Sigma;)Ldev/shtanko/kotlinlang/whatsnew/v2/Sigma;
	public static fun sigma (Ldev/shtanko/kotlinlang/whatsnew/v2/Sigma;)V
}

public final class dev/shtanko/kotlinlang/whatsnew/v2/SmartCastImprovementsKt {
	public static final fun inlineAction (Lkotlin/jvm/functions/Function0;)V
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
	public static final fun main2 (Ldev/shtanko/kotlinlang/whatsnew/v2/Rho;)V
	public static final fun nextProcessor ()Ldev/shtanko/kotlinlang/whatsnew/v2/Processor;
	public static final fun petAnimal (Ljava/lang/Object;)V
	public static final fun runProcessor ()Ldev/shtanko/kotlinlang/whatsnew/v2/Processor;
	public static final fun signalCheck (Ljava/lang/Object;)V
	public static final fun testString ()V
}

public final class dev/shtanko/kotlinlang/whatsnew/v2/StableEnumsKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public abstract interface class dev/shtanko/kotlinlang/whatsnew/v2/Status {
	public abstract fun signal ()V
}

public abstract interface class dev/shtanko/kotlinlang/whatsnew/v2/Tau {
	public fun tau ()V
}

public final class dev/shtanko/kotlinlang/whatsnew/v2/Tau$DefaultImpls {
	public static fun tau (Ldev/shtanko/kotlinlang/whatsnew/v2/Tau;)V
}

public abstract interface class dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/CartItem {
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/CartItem$Coupon : dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/CartItem {
	public fun <init> (Ljava/lang/String;I)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()I
	public final fun copy (Ljava/lang/String;I)Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/CartItem$Coupon;
	public static synthetic fun copy$default (Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/CartItem$Coupon;Ljava/lang/String;IILjava/lang/Object;)Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/CartItem$Coupon;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getCode ()Ljava/lang/String;
	public final fun getDiscount ()I
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/CartItem$Empty : dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/CartItem {
	public static final field INSTANCE Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/CartItem$Empty;
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/CartItem$Product : dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/CartItem {
	public fun <init> (DZ)V
	public final fun component1 ()D
	public final fun component2 ()Z
	public final fun copy (DZ)Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/CartItem$Product;
	public static synthetic fun copy$default (Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/CartItem$Product;DZILjava/lang/Object;)Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/CartItem$Product;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getPrice ()D
	public fun hashCode ()I
	public final fun isOnSale ()Z
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/Example1UserAccessControlKt {
	public static final fun accessSystem (Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/User;)Ljava/lang/String;
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/Example2SmartNavigationRulesKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
	public static final fun navigateTo (Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/Screen;)Ljava/lang/String;
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/Example3FileProcessingMultipleConditionsKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
	public static final fun process (Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/File;)Ljava/lang/String;
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/Example4HTTPResponseHandlingKt {
	public static final fun handleResponse (Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/HttpResponse;)Ljava/lang/String;
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/Example5ShoppingCartPromotionsKt {
	public static final fun applyDiscount (Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/CartItem;)Ljava/lang/String;
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public abstract interface class dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/File {
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/File$Image : dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/File {
	public fun <init> (Ljava/lang/String;D)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()D
	public final fun copy (Ljava/lang/String;D)Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/File$Image;
	public static synthetic fun copy$default (Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/File$Image;Ljava/lang/String;DILjava/lang/Object;)Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/File$Image;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getExtension ()Ljava/lang/String;
	public final fun getSizeMB ()D
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/File$Unknown : dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/File {
	public static final field INSTANCE Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/File$Unknown;
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/File$Video : dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/File {
	public fun <init> (ILjava/lang/String;)V
	public final fun component1 ()I
	public final fun component2 ()Ljava/lang/String;
	public final fun copy (ILjava/lang/String;)Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/File$Video;
	public static synthetic fun copy$default (Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/File$Video;ILjava/lang/String;ILjava/lang/Object;)Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/File$Video;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getDuration ()I
	public final fun getFormat ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/HttpResponse {
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/HttpResponse$Error : dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/HttpResponse {
	public fun <init> (ILjava/lang/String;)V
	public final fun component1 ()I
	public final fun component2 ()Ljava/lang/String;
	public final fun copy (ILjava/lang/String;)Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/HttpResponse$Error;
	public static synthetic fun copy$default (Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/HttpResponse$Error;ILjava/lang/String;ILjava/lang/Object;)Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/HttpResponse$Error;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getMessage ()Ljava/lang/String;
	public final fun getStatusCode ()I
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/HttpResponse$Success : dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/HttpResponse {
	public fun <init> (ILjava/lang/String;)V
	public final fun component1 ()I
	public final fun component2 ()Ljava/lang/String;
	public final fun copy (ILjava/lang/String;)Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/HttpResponse$Success;
	public static synthetic fun copy$default (Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/HttpResponse$Success;ILjava/lang/String;ILjava/lang/Object;)Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/HttpResponse$Success;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getData ()Ljava/lang/String;
	public final fun getStatusCode ()I
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/HttpResponse$Timeout : dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/HttpResponse {
	public static final field INSTANCE Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/HttpResponse$Timeout;
}

public abstract interface class dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/Screen {
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/Screen$Home : dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/Screen {
	public fun <init> (Z)V
	public final fun component1 ()Z
	public final fun copy (Z)Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/Screen$Home;
	public static synthetic fun copy$default (Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/Screen$Home;ZILjava/lang/Object;)Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/Screen$Home;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public final fun isLoggedIn ()Z
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/Screen$Profile : dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/Screen {
	public fun <init> (Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;)Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/Screen$Profile;
	public static synthetic fun copy$default (Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/Screen$Profile;Ljava/lang/String;ILjava/lang/Object;)Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/Screen$Profile;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getUserId ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/Screen$Settings : dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/Screen {
	public static final field INSTANCE Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/Screen$Settings;
}

public abstract interface class dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/User {
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/User$Admin : dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/User {
	public fun <init> (I)V
	public final fun component1 ()I
	public final fun copy (I)Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/User$Admin;
	public static synthetic fun copy$default (Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/User$Admin;IILjava/lang/Object;)Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/User$Admin;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getLevel ()I
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/User$Guest : dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/User {
	public fun <init> (Z)V
	public final fun component1 ()Z
	public final fun copy (Z)Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/User$Guest;
	public static synthetic fun copy$default (Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/User$Guest;ZILjava/lang/Object;)Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/User$Guest;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public final fun isTemporary ()Z
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/User$Member : dev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/User {
	public fun <init> (Z)V
	public final fun component1 ()Z
	public final fun copy (Z)Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/User$Member;
	public static synthetic fun copy$default (Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/User$Member;ZILjava/lang/Object;)Ldev/shtanko/kotlinlang/whatsnew/v2_1_0/guard_conditions/User$Member;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public final fun isPremium ()Z
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_1_0/multidollar_string_interpolation/Example1JSONSchemaTemplateKt {
	public static final fun getJsonSchema (Lkotlin/reflect/KClass;)Ljava/lang/String;
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_1_0/multidollar_string_interpolation/Example2ShellScriptTemplateKt {
	public static final fun generateScript (Ljava/lang/String;)Ljava/lang/String;
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_1_0/multidollar_string_interpolation/Example3TemplatingWithMustachestylePlaceholdersKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
	public static final fun template (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_1_0/multidollar_string_interpolation/Example4DynamicSQLQueryWithPlaceholderKt {
	public static final fun buildQuery (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_1_0/multidollar_string_interpolation/Example5InvoiceTemplateKt {
	public static final fun invoiceTemplate (D)Ljava/lang/String;
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_1_0/non_local_break_and_continue/Example1ContinueInsideRunKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
	public static final fun processList (Ljava/util/List;)Z
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_1_0/non_local_break_and_continue/Example2BreakAndContinueInWithAndAlsoKt {
	public static final fun analyzeData (Ljava/util/List;)V
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public abstract interface class dev/shtanko/kotlinlang/whatsnew/v2_1_0/opt_in/CoreLibraryApi {
	public abstract fun performCoreAction ()V
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_1_0/opt_in/CustomFeature : dev/shtanko/kotlinlang/whatsnew/v2_1_0/opt_in/CoreLibraryApi {
	public fun <init> ()V
	public fun performCoreAction ()V
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_1_0/opt_in/ExampleKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public abstract interface annotation class dev/shtanko/kotlinlang/whatsnew/v2_1_0/opt_in/UnstableApi : java/lang/annotation/Annotation {
}

public abstract class dev/shtanko/kotlinlang/whatsnew/v2_2_0/ApiResult {
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_2_0/ApiResult$Error : dev/shtanko/kotlinlang/whatsnew/v2_2_0/ApiResult {
	public fun <init> (Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;)Ldev/shtanko/kotlinlang/whatsnew/v2_2_0/ApiResult$Error;
	public static synthetic fun copy$default (Ldev/shtanko/kotlinlang/whatsnew/v2_2_0/ApiResult$Error;Ljava/lang/String;ILjava/lang/Object;)Ldev/shtanko/kotlinlang/whatsnew/v2_2_0/ApiResult$Error;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getMessage ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_2_0/ApiResult$Helper {
	public static final field INSTANCE Ldev/shtanko/kotlinlang/whatsnew/v2_2_0/ApiResult$Helper;
	public final fun sample ()Ldev/shtanko/kotlinlang/whatsnew/v2_2_0/ApiResult;
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_2_0/ApiResult$Success : dev/shtanko/kotlinlang/whatsnew/v2_2_0/ApiResult {
	public fun <init> (Ljava/lang/Object;)V
	public final fun component1 ()Ljava/lang/Object;
	public final fun copy (Ljava/lang/Object;)Ldev/shtanko/kotlinlang/whatsnew/v2_2_0/ApiResult$Success;
	public static synthetic fun copy$default (Ldev/shtanko/kotlinlang/whatsnew/v2_2_0/ApiResult$Success;Ljava/lang/Object;ILjava/lang/Object;)Ldev/shtanko/kotlinlang/whatsnew/v2_2_0/ApiResult$Success;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getData ()Ljava/lang/Object;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_2_0/ContextParametersKt {
	public static final fun getFirstUser (Ldev/shtanko/kotlinlang/whatsnew/v2_2_0/UserService;)Ljava/lang/String;
	public static final fun logWelcome (Ldev/shtanko/kotlinlang/whatsnew/v2_2_0/UserService;)V
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
	public static final fun outputMessage (Ldev/shtanko/kotlinlang/whatsnew/v2_2_0/UserService;Ljava/lang/String;)V
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_2_0/Dijkstra {
	public fun <init> ()V
	public final fun run ()V
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_2_0/Dijkstra$Node {
	public fun <init> (Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;)Ldev/shtanko/kotlinlang/whatsnew/v2_2_0/Dijkstra$Node;
	public static synthetic fun copy$default (Ldev/shtanko/kotlinlang/whatsnew/v2_2_0/Dijkstra$Node;Ljava/lang/String;ILjava/lang/Object;)Ldev/shtanko/kotlinlang/whatsnew/v2_2_0/Dijkstra$Node;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getId ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface annotation class dev/shtanko/kotlinlang/whatsnew/v2_2_0/Email : java/lang/annotation/Annotation {
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_2_0/FileProcessor {
	public fun <init> ()V
	public final fun processFiles (Ljava/util/Map;Lkotlin/jvm/functions/Function1;)V
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_2_0/FileProcessor$FileData {
	public fun <init> (Ljava/lang/String;I)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()I
	public final fun copy (Ljava/lang/String;I)Ldev/shtanko/kotlinlang/whatsnew/v2_2_0/FileProcessor$FileData;
	public static synthetic fun copy$default (Ldev/shtanko/kotlinlang/whatsnew/v2_2_0/FileProcessor$FileData;Ljava/lang/String;IILjava/lang/Object;)Ldev/shtanko/kotlinlang/whatsnew/v2_2_0/FileProcessor$FileData;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getName ()Ljava/lang/String;
	public final fun getSize ()I
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_2_0/HtmlBuilder {
	public fun <init> ()V
	public final fun render ()Ljava/lang/String;
	public final fun tag (Ljava/lang/String;)V
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_2_0/HtmlBuilder$Element {
	public fun <init> (Ljava/lang/String;)V
	public final fun getName ()Ljava/lang/String;
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_2_0/MetaTargetForPropertiesKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_2_0/NestedTypeAliasesKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_2_0/OldWay {
	public static final field INSTANCE Ldev/shtanko/kotlinlang/whatsnew/v2_2_0/OldWay;
	public final fun message (Ldev/shtanko/kotlinlang/whatsnew/v2_2_0/Problem;)Ljava/lang/String;
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_2_0/Problem : java/lang/Enum {
	public static final field AUTHENTICATION Ldev/shtanko/kotlinlang/whatsnew/v2_2_0/Problem;
	public static final field CONNECTION Ldev/shtanko/kotlinlang/whatsnew/v2_2_0/Problem;
	public static final field DATABASE Ldev/shtanko/kotlinlang/whatsnew/v2_2_0/Problem;
	public static final field UNKNOWN Ldev/shtanko/kotlinlang/whatsnew/v2_2_0/Problem;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Ldev/shtanko/kotlinlang/whatsnew/v2_2_0/Problem;
	public static fun values ()[Ldev/shtanko/kotlinlang/whatsnew/v2_2_0/Problem;
}

public final class dev/shtanko/kotlinlang/whatsnew/v2_2_0/User {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;Ljava/lang/String;)Ldev/shtanko/kotlinlang/whatsnew/v2_2_0/User;
	public static synthetic fun copy$default (Ldev/shtanko/kotlinlang/whatsnew/v2_2_0/User;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Ldev/shtanko/kotlinlang/whatsnew/v2_2_0/User;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getEmail ()Ljava/lang/String;
	public final fun getSecondaryEmail ()Ljava/lang/String;
	public final fun getUsername ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/kotlinlang/whatsnew/v2_2_0/UserService {
	public abstract fun findUserById (I)Ljava/lang/String;
	public abstract fun log (Ljava/lang/String;)V
}

public final class dev/shtanko/oop/CompositionInstrumentedHashSet : dev/shtanko/oop/ForwardingSet {
	public fun <init> (Ljava/util/Set;)V
	public fun add (Ljava/lang/Object;)Z
	public fun addAll (Ljava/util/Collection;)Z
	public final fun getAddCount ()I
}

public class dev/shtanko/oop/ForwardingSet : java/util/Set, kotlin/jvm/internal/markers/KMutableSet {
	public fun <init> (Ljava/util/Set;)V
	public fun add (Ljava/lang/Object;)Z
	public fun addAll (Ljava/util/Collection;)Z
	public fun clear ()V
	public fun contains (Ljava/lang/Object;)Z
	public fun containsAll (Ljava/util/Collection;)Z
	public fun getSize ()I
	public fun isEmpty ()Z
	public fun iterator ()Ljava/util/Iterator;
	public fun remove (Ljava/lang/Object;)Z
	public fun removeAll (Ljava/util/Collection;)Z
	public fun retainAll (Ljava/util/Collection;)Z
	public final fun size ()I
	public fun toArray ()[Ljava/lang/Object;
	public fun toArray ([Ljava/lang/Object;)[Ljava/lang/Object;
}

public final class dev/shtanko/oop/InheritanceInstrumentedHashSet : java/util/HashSet {
	public fun <init> ()V
	public fun add (Ljava/lang/Object;)Z
	public fun addAll (Ljava/util/Collection;)Z
	public final fun getAddCount ()I
	public fun getSize ()I
	public final fun size ()I
}

public final class dev/shtanko/oop/lms/Book {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V
	public synthetic fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ljava/lang/String;
	public final fun component3 ()Ljava/lang/String;
	public final fun component4 ()Ljava/lang/String;
	public final fun component5 ()Z
	public final fun copy (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Ldev/shtanko/oop/lms/Book;
	public static synthetic fun copy$default (Ldev/shtanko/oop/lms/Book;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZILjava/lang/Object;)Ldev/shtanko/oop/lms/Book;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getAuthor ()Ljava/lang/String;
	public final fun getGenre ()Ljava/lang/String;
	public final fun getIsbn ()Ljava/lang/String;
	public final fun getTitle ()Ljava/lang/String;
	public fun hashCode ()I
	public final fun isAvailable ()Z
	public final fun setAvailable (Z)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/oop/lms/Display {
	public fun <init> (Ljava/util/List;Ljava/util/List;)V
	public final fun displayBooks ()V
	public final fun displayPatrons ()V
}

public final class dev/shtanko/oop/lms/Library {
	public fun <init> ()V
	public final fun addBook (Ldev/shtanko/oop/lms/Book;)V
	public final fun addPatron (Ldev/shtanko/oop/lms/Patron;)V
	public final fun getBookCount ()I
	public final fun getPatronCount ()I
	public final fun removeBook (Ljava/lang/String;)V
	public final fun removePatron (Ljava/lang/String;)V
}

public final class dev/shtanko/oop/lms/Patron {
	public static final field Companion Ldev/shtanko/oop/lms/Patron$Companion;
	public fun <init> (Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V
	public synthetic fun <init> (Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()I
	public final fun component3 ()Ljava/lang/String;
	public final fun component4 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)Ldev/shtanko/oop/lms/Patron;
	public static synthetic fun copy$default (Ldev/shtanko/oop/lms/Patron;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Ldev/shtanko/oop/lms/Patron;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getAge ()I
	public final fun getEmail ()Ljava/lang/String;
	public final fun getId ()Ljava/lang/String;
	public final fun getName ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/oop/lms/Patron$Companion {
}

public final class dev/shtanko/patterns/behavioral/chainofresponsibility/example1/OrcCommander : dev/shtanko/patterns/behavioral/chainofresponsibility/example1/RequestHandler {
	public fun <init> (Ldev/shtanko/patterns/behavioral/chainofresponsibility/example1/RequestHandler;)V
	public fun handleRequest (Ldev/shtanko/patterns/behavioral/chainofresponsibility/example1/Request;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/behavioral/chainofresponsibility/example1/OrcKing {
	public fun <init> ()V
	public final fun makeRequest (Ldev/shtanko/patterns/behavioral/chainofresponsibility/example1/Request;)V
}

public final class dev/shtanko/patterns/behavioral/chainofresponsibility/example1/OrcOfficer : dev/shtanko/patterns/behavioral/chainofresponsibility/example1/RequestHandler {
	public fun <init> (Ldev/shtanko/patterns/behavioral/chainofresponsibility/example1/RequestHandler;)V
	public fun handleRequest (Ldev/shtanko/patterns/behavioral/chainofresponsibility/example1/Request;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/behavioral/chainofresponsibility/example1/OrcSoldier : dev/shtanko/patterns/behavioral/chainofresponsibility/example1/RequestHandler {
	public fun <init> (Ldev/shtanko/patterns/behavioral/chainofresponsibility/example1/RequestHandler;)V
	public fun handleRequest (Ldev/shtanko/patterns/behavioral/chainofresponsibility/example1/Request;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/behavioral/chainofresponsibility/example1/Request {
	public fun <init> (Ldev/shtanko/patterns/behavioral/chainofresponsibility/example1/RequestType;Ljava/lang/String;)V
	public final fun getRequestType ()Ldev/shtanko/patterns/behavioral/chainofresponsibility/example1/RequestType;
	public final fun isHandled ()Z
	public final fun markHandled ()V
	public fun toString ()Ljava/lang/String;
}

public class dev/shtanko/patterns/behavioral/chainofresponsibility/example1/RequestHandler {
	public static final field Companion Ldev/shtanko/patterns/behavioral/chainofresponsibility/example1/RequestHandler$Companion;
	public fun <init> ()V
	public fun <init> (Ldev/shtanko/patterns/behavioral/chainofresponsibility/example1/RequestHandler;)V
	public synthetic fun <init> (Ldev/shtanko/patterns/behavioral/chainofresponsibility/example1/RequestHandler;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun handleRequest (Ldev/shtanko/patterns/behavioral/chainofresponsibility/example1/Request;)V
	public final fun printHandling (Ldev/shtanko/patterns/behavioral/chainofresponsibility/example1/Request;)V
}

public final class dev/shtanko/patterns/behavioral/chainofresponsibility/example1/RequestHandler$Companion {
}

public final class dev/shtanko/patterns/behavioral/chainofresponsibility/example1/RequestType : java/lang/Enum {
	public static final field COLLECT_TAX Ldev/shtanko/patterns/behavioral/chainofresponsibility/example1/RequestType;
	public static final field DEFEND_CASTLE Ldev/shtanko/patterns/behavioral/chainofresponsibility/example1/RequestType;
	public static final field TORTURE_PRISONER Ldev/shtanko/patterns/behavioral/chainofresponsibility/example1/RequestType;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Ldev/shtanko/patterns/behavioral/chainofresponsibility/example1/RequestType;
	public static fun values ()[Ldev/shtanko/patterns/behavioral/chainofresponsibility/example1/RequestType;
}

public final class dev/shtanko/patterns/behavioral/chainofresponsibility/example2/Demo {
	public static final field INSTANCE Ldev/shtanko/patterns/behavioral/chainofresponsibility/example2/Demo;
	public static final fun main ([Ljava/lang/String;)V
}

public abstract class dev/shtanko/patterns/behavioral/chainofresponsibility/example2/middleware/Middleware {
	public static final field Companion Ldev/shtanko/patterns/behavioral/chainofresponsibility/example2/middleware/Middleware$Companion;
	public fun <init> ()V
	public abstract fun check (Ljava/lang/String;Ljava/lang/String;)Z
	protected final fun checkNext (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/patterns/behavioral/chainofresponsibility/example2/middleware/Middleware$Companion {
	public final fun link (Ldev/shtanko/patterns/behavioral/chainofresponsibility/example2/middleware/Middleware;[Ldev/shtanko/patterns/behavioral/chainofresponsibility/example2/middleware/Middleware;)Ldev/shtanko/patterns/behavioral/chainofresponsibility/example2/middleware/Middleware;
}

public final class dev/shtanko/patterns/behavioral/chainofresponsibility/example2/middleware/RoleCheckMiddleware : dev/shtanko/patterns/behavioral/chainofresponsibility/example2/middleware/Middleware {
	public fun <init> ()V
	public fun check (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/patterns/behavioral/chainofresponsibility/example2/middleware/ThrottlingMiddleware : dev/shtanko/patterns/behavioral/chainofresponsibility/example2/middleware/Middleware {
	public static final field Companion Ldev/shtanko/patterns/behavioral/chainofresponsibility/example2/middleware/ThrottlingMiddleware$Companion;
	public fun <init> (I)V
	public fun check (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/patterns/behavioral/chainofresponsibility/example2/middleware/ThrottlingMiddleware$Companion {
}

public final class dev/shtanko/patterns/behavioral/chainofresponsibility/example2/middleware/UserExistsMiddleware : dev/shtanko/patterns/behavioral/chainofresponsibility/example2/middleware/Middleware {
	public fun <init> (Ldev/shtanko/patterns/behavioral/chainofresponsibility/example2/server/Server;)V
	public fun check (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/patterns/behavioral/chainofresponsibility/example2/server/Server {
	public fun <init> ()V
	public final fun hasEmail (Ljava/lang/String;)Z
	public final fun isValidPassword (Ljava/lang/String;Ljava/lang/String;)Z
	public final fun logIn (Ljava/lang/String;Ljava/lang/String;)Z
	public final fun register (Ljava/lang/String;Ljava/lang/String;)V
	public final fun setMiddleware (Ldev/shtanko/patterns/behavioral/chainofresponsibility/example2/middleware/Middleware;)V
}

public abstract interface class dev/shtanko/patterns/behavioral/command/Command {
	public abstract fun execute (Ldev/shtanko/patterns/behavioral/command/Target;)V
	public abstract fun redo ()V
	public abstract fun undo ()V
}

public final class dev/shtanko/patterns/behavioral/command/Goblin : dev/shtanko/patterns/behavioral/command/Target {
	public fun <init> ()V
	public fun <init> (Ldev/shtanko/patterns/behavioral/command/Size;Ldev/shtanko/patterns/behavioral/command/Visibility;)V
	public synthetic fun <init> (Ldev/shtanko/patterns/behavioral/command/Size;Ldev/shtanko/patterns/behavioral/command/Visibility;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun getSize ()Ldev/shtanko/patterns/behavioral/command/Size;
	public fun getVisibility ()Ldev/shtanko/patterns/behavioral/command/Visibility;
	public fun printStatus ()V
	public fun setSize (Ldev/shtanko/patterns/behavioral/command/Size;)V
	public fun setVisibility (Ldev/shtanko/patterns/behavioral/command/Visibility;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/behavioral/command/InvisibilitySpell : dev/shtanko/patterns/behavioral/command/Command {
	public fun <init> ()V
	public fun execute (Ldev/shtanko/patterns/behavioral/command/Target;)V
	public fun redo ()V
	public fun toString ()Ljava/lang/String;
	public fun undo ()V
}

public final class dev/shtanko/patterns/behavioral/command/ShrinkSpell : dev/shtanko/patterns/behavioral/command/Command {
	public fun <init> ()V
	public fun execute (Ldev/shtanko/patterns/behavioral/command/Target;)V
	public fun redo ()V
	public fun undo ()V
}

public final class dev/shtanko/patterns/behavioral/command/Size : java/lang/Enum {
	public static final field NORMAL Ldev/shtanko/patterns/behavioral/command/Size;
	public static final field SMALL Ldev/shtanko/patterns/behavioral/command/Size;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Ldev/shtanko/patterns/behavioral/command/Size;
	public static fun values ()[Ldev/shtanko/patterns/behavioral/command/Size;
}

public abstract interface class dev/shtanko/patterns/behavioral/command/Target {
	public static final field Companion Ldev/shtanko/patterns/behavioral/command/Target$Companion;
	public abstract fun getSize ()Ldev/shtanko/patterns/behavioral/command/Size;
	public abstract fun getVisibility ()Ldev/shtanko/patterns/behavioral/command/Visibility;
	public fun printStatus ()V
	public abstract fun setSize (Ldev/shtanko/patterns/behavioral/command/Size;)V
	public abstract fun setVisibility (Ldev/shtanko/patterns/behavioral/command/Visibility;)V
}

public final class dev/shtanko/patterns/behavioral/command/Target$Companion {
}

public final class dev/shtanko/patterns/behavioral/command/Target$DefaultImpls {
	public static fun printStatus (Ldev/shtanko/patterns/behavioral/command/Target;)V
}

public final class dev/shtanko/patterns/behavioral/command/Visibility : java/lang/Enum {
	public static final field INVISIBLE Ldev/shtanko/patterns/behavioral/command/Visibility;
	public static final field VISIBLE Ldev/shtanko/patterns/behavioral/command/Visibility;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Ldev/shtanko/patterns/behavioral/command/Visibility;
	public static fun values ()[Ldev/shtanko/patterns/behavioral/command/Visibility;
}

public final class dev/shtanko/patterns/behavioral/command/Wizard {
	public static final field Companion Ldev/shtanko/patterns/behavioral/command/Wizard$Companion;
	public fun <init> ()V
	public final fun castSpell (Ldev/shtanko/patterns/behavioral/command/Command;Ldev/shtanko/patterns/behavioral/command/Target;)V
	public final fun redoLastSpell ()V
	public fun toString ()Ljava/lang/String;
	public final fun undoLastSpell ()V
}

public final class dev/shtanko/patterns/behavioral/command/Wizard$Companion {
}

public abstract interface class dev/shtanko/patterns/behavioral/command/example1/Command {
	public abstract fun execute ()V
}

public final class dev/shtanko/patterns/behavioral/command/example1/Light {
	public fun <init> ()V
	public final fun isOff ()Z
	public final fun isOn ()Z
	public final fun setOn (Z)V
	public final fun turnOff ()V
	public final fun turnOn ()V
}

public final class dev/shtanko/patterns/behavioral/command/example1/LightOffCommand : dev/shtanko/patterns/behavioral/command/example1/Command {
	public fun <init> (Ldev/shtanko/patterns/behavioral/command/example1/Light;)V
	public fun execute ()V
}

public final class dev/shtanko/patterns/behavioral/command/example1/LightOnCommand : dev/shtanko/patterns/behavioral/command/example1/Command {
	public fun <init> (Ldev/shtanko/patterns/behavioral/command/example1/Light;)V
	public fun execute ()V
}

public final class dev/shtanko/patterns/behavioral/command/example1/RemoteControl {
	public fun <init> ()V
	public final fun pressButton ()V
	public final fun setCommand (Ldev/shtanko/patterns/behavioral/command/example1/Command;)V
}

public abstract interface class dev/shtanko/patterns/behavioral/interpreter/example1/Expression {
	public abstract fun interpret ()I
}

public final class dev/shtanko/patterns/behavioral/interpreter/example1/MinusExpression : dev/shtanko/patterns/behavioral/interpreter/example1/Expression {
	public fun <init> (Ldev/shtanko/patterns/behavioral/interpreter/example1/Expression;Ldev/shtanko/patterns/behavioral/interpreter/example1/Expression;)V
	public fun interpret ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/behavioral/interpreter/example1/MultiplyExpression : dev/shtanko/patterns/behavioral/interpreter/example1/Expression {
	public fun <init> (Ldev/shtanko/patterns/behavioral/interpreter/example1/Expression;Ldev/shtanko/patterns/behavioral/interpreter/example1/Expression;)V
	public fun interpret ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/behavioral/interpreter/example1/NumberExpression : dev/shtanko/patterns/behavioral/interpreter/example1/Expression {
	public fun <init> (I)V
	public fun <init> (Ljava/lang/String;)V
	public fun interpret ()I
}

public final class dev/shtanko/patterns/behavioral/interpreter/example1/PlusExpression : dev/shtanko/patterns/behavioral/interpreter/example1/Expression {
	public fun <init> (Ldev/shtanko/patterns/behavioral/interpreter/example1/Expression;Ldev/shtanko/patterns/behavioral/interpreter/example1/Expression;)V
	public fun interpret ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/patterns/behavioral/iterator/CustomIterator {
	public abstract fun hasNext ()Z
	public abstract fun next ()Ljava/lang/Object;
}

public final class dev/shtanko/patterns/behavioral/iterator/bst/BstIterator : dev/shtanko/patterns/behavioral/iterator/CustomIterator {
	public fun <init> (Ldev/shtanko/patterns/behavioral/iterator/bst/TreeNode;)V
	public fun hasNext ()Z
	public fun next ()Ldev/shtanko/patterns/behavioral/iterator/bst/TreeNode;
	public synthetic fun next ()Ljava/lang/Object;
}

public final class dev/shtanko/patterns/behavioral/iterator/bst/TreeNode {
	public fun <init> (Ljava/lang/Comparable;Ldev/shtanko/patterns/behavioral/iterator/bst/TreeNode;Ldev/shtanko/patterns/behavioral/iterator/bst/TreeNode;)V
	public synthetic fun <init> (Ljava/lang/Comparable;Ldev/shtanko/patterns/behavioral/iterator/bst/TreeNode;Ldev/shtanko/patterns/behavioral/iterator/bst/TreeNode;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ljava/lang/Comparable;
	public final fun component2 ()Ldev/shtanko/patterns/behavioral/iterator/bst/TreeNode;
	public final fun component3 ()Ldev/shtanko/patterns/behavioral/iterator/bst/TreeNode;
	public final fun copy (Ljava/lang/Comparable;Ldev/shtanko/patterns/behavioral/iterator/bst/TreeNode;Ldev/shtanko/patterns/behavioral/iterator/bst/TreeNode;)Ldev/shtanko/patterns/behavioral/iterator/bst/TreeNode;
	public static synthetic fun copy$default (Ldev/shtanko/patterns/behavioral/iterator/bst/TreeNode;Ljava/lang/Comparable;Ldev/shtanko/patterns/behavioral/iterator/bst/TreeNode;Ldev/shtanko/patterns/behavioral/iterator/bst/TreeNode;ILjava/lang/Object;)Ldev/shtanko/patterns/behavioral/iterator/bst/TreeNode;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getLeft ()Ldev/shtanko/patterns/behavioral/iterator/bst/TreeNode;
	public final fun getRight ()Ldev/shtanko/patterns/behavioral/iterator/bst/TreeNode;
	public final fun getValue ()Ljava/lang/Comparable;
	public fun hashCode ()I
	public final fun insert (Ljava/lang/Comparable;)V
	public final fun setLeft (Ldev/shtanko/patterns/behavioral/iterator/bst/TreeNode;)V
	public final fun setRight (Ldev/shtanko/patterns/behavioral/iterator/bst/TreeNode;)V
	public final fun setValue (Ljava/lang/Comparable;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/behavioral/iterator/list/Item {
	public fun <init> (Ldev/shtanko/patterns/behavioral/iterator/list/ItemType;Ljava/lang/String;)V
	public final fun component1 ()Ldev/shtanko/patterns/behavioral/iterator/list/ItemType;
	public final fun component2 ()Ljava/lang/String;
	public final fun copy (Ldev/shtanko/patterns/behavioral/iterator/list/ItemType;Ljava/lang/String;)Ldev/shtanko/patterns/behavioral/iterator/list/Item;
	public static synthetic fun copy$default (Ldev/shtanko/patterns/behavioral/iterator/list/Item;Ldev/shtanko/patterns/behavioral/iterator/list/ItemType;Ljava/lang/String;ILjava/lang/Object;)Ldev/shtanko/patterns/behavioral/iterator/list/Item;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getName ()Ljava/lang/String;
	public final fun getType ()Ldev/shtanko/patterns/behavioral/iterator/list/ItemType;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/behavioral/iterator/list/ItemType : java/lang/Enum {
	public static final field ANY Ldev/shtanko/patterns/behavioral/iterator/list/ItemType;
	public static final field POTION Ldev/shtanko/patterns/behavioral/iterator/list/ItemType;
	public static final field RING Ldev/shtanko/patterns/behavioral/iterator/list/ItemType;
	public static final field WEAPON Ldev/shtanko/patterns/behavioral/iterator/list/ItemType;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Ldev/shtanko/patterns/behavioral/iterator/list/ItemType;
	public static fun values ()[Ldev/shtanko/patterns/behavioral/iterator/list/ItemType;
}

public final class dev/shtanko/patterns/behavioral/iterator/list/TreasureChest {
	public fun <init> ()V
	public final fun getItems ()Ljava/util/List;
	public final fun iterator (Ldev/shtanko/patterns/behavioral/iterator/list/ItemType;)Ldev/shtanko/patterns/behavioral/iterator/CustomIterator;
}

public final class dev/shtanko/patterns/behavioral/iterator/list/TreasureChestItemIterator : dev/shtanko/patterns/behavioral/iterator/CustomIterator {
	public fun <init> (Ldev/shtanko/patterns/behavioral/iterator/list/TreasureChest;Ldev/shtanko/patterns/behavioral/iterator/list/ItemType;I)V
	public synthetic fun <init> (Ldev/shtanko/patterns/behavioral/iterator/list/TreasureChest;Ldev/shtanko/patterns/behavioral/iterator/list/ItemType;IILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ldev/shtanko/patterns/behavioral/iterator/list/TreasureChest;
	public final fun component2 ()Ldev/shtanko/patterns/behavioral/iterator/list/ItemType;
	public final fun component3 ()I
	public final fun copy (Ldev/shtanko/patterns/behavioral/iterator/list/TreasureChest;Ldev/shtanko/patterns/behavioral/iterator/list/ItemType;I)Ldev/shtanko/patterns/behavioral/iterator/list/TreasureChestItemIterator;
	public static synthetic fun copy$default (Ldev/shtanko/patterns/behavioral/iterator/list/TreasureChestItemIterator;Ldev/shtanko/patterns/behavioral/iterator/list/TreasureChest;Ldev/shtanko/patterns/behavioral/iterator/list/ItemType;IILjava/lang/Object;)Ldev/shtanko/patterns/behavioral/iterator/list/TreasureChestItemIterator;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getChest ()Ldev/shtanko/patterns/behavioral/iterator/list/TreasureChest;
	public final fun getIdx ()I
	public final fun getType ()Ldev/shtanko/patterns/behavioral/iterator/list/ItemType;
	public fun hasNext ()Z
	public fun hashCode ()I
	public fun next ()Ldev/shtanko/patterns/behavioral/iterator/list/Item;
	public synthetic fun next ()Ljava/lang/Object;
	public final fun setIdx (I)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/behavioral/mediator/Action : java/lang/Enum {
	public static final field ENEMY Ldev/shtanko/patterns/behavioral/mediator/Action;
	public static final field GOLD Ldev/shtanko/patterns/behavioral/mediator/Action;
	public static final field HUNT Ldev/shtanko/patterns/behavioral/mediator/Action;
	public static final field NONE Ldev/shtanko/patterns/behavioral/mediator/Action;
	public static final field TALE Ldev/shtanko/patterns/behavioral/mediator/Action;
	public final fun getDescription ()Ljava/lang/String;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public final fun getTitle ()Ljava/lang/String;
	public static fun valueOf (Ljava/lang/String;)Ldev/shtanko/patterns/behavioral/mediator/Action;
	public static fun values ()[Ldev/shtanko/patterns/behavioral/mediator/Action;
}

public final class dev/shtanko/patterns/behavioral/mediator/Hobbit : dev/shtanko/patterns/behavioral/mediator/PartyMemberBase {
	public fun <init> ()V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/behavioral/mediator/Hunter : dev/shtanko/patterns/behavioral/mediator/PartyMemberBase {
	public fun <init> ()V
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/patterns/behavioral/mediator/Party {
	public abstract fun act (Ldev/shtanko/patterns/behavioral/mediator/PartyMember;Ldev/shtanko/patterns/behavioral/mediator/Action;)V
	public abstract fun addMember (Ldev/shtanko/patterns/behavioral/mediator/PartyMember;)V
}

public final class dev/shtanko/patterns/behavioral/mediator/PartyImpl : dev/shtanko/patterns/behavioral/mediator/Party {
	public fun <init> ()V
	public fun act (Ldev/shtanko/patterns/behavioral/mediator/PartyMember;Ldev/shtanko/patterns/behavioral/mediator/Action;)V
	public fun addMember (Ldev/shtanko/patterns/behavioral/mediator/PartyMember;)V
}

public abstract interface class dev/shtanko/patterns/behavioral/mediator/PartyMember {
	public abstract fun act (Ldev/shtanko/patterns/behavioral/mediator/Action;)V
	public abstract fun joinedParty (Ldev/shtanko/patterns/behavioral/mediator/Party;)V
	public abstract fun partyAction (Ldev/shtanko/patterns/behavioral/mediator/Action;)V
}

public abstract class dev/shtanko/patterns/behavioral/mediator/PartyMemberBase : dev/shtanko/patterns/behavioral/mediator/PartyMember {
	public static final field Companion Ldev/shtanko/patterns/behavioral/mediator/PartyMemberBase$Companion;
	public fun <init> ()V
	public fun act (Ldev/shtanko/patterns/behavioral/mediator/Action;)V
	protected final fun getParty ()Ldev/shtanko/patterns/behavioral/mediator/Party;
	public fun joinedParty (Ldev/shtanko/patterns/behavioral/mediator/Party;)V
	public fun partyAction (Ldev/shtanko/patterns/behavioral/mediator/Action;)V
	protected final fun setParty (Ldev/shtanko/patterns/behavioral/mediator/Party;)V
	public abstract fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/behavioral/mediator/PartyMemberBase$Companion {
}

public final class dev/shtanko/patterns/behavioral/mediator/Rogue : dev/shtanko/patterns/behavioral/mediator/PartyMemberBase {
	public fun <init> ()V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/behavioral/mediator/Wizard : dev/shtanko/patterns/behavioral/mediator/PartyMemberBase {
	public fun <init> ()V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/behavioral/memento/Star {
	public fun <init> (Ldev/shtanko/patterns/behavioral/memento/StarType;II)V
	public final fun getMemento ()Ldev/shtanko/patterns/behavioral/memento/StarMemento;
	public final fun setMemento (Ldev/shtanko/patterns/behavioral/memento/StarMemento;)V
	public final fun timePasses ()V
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/patterns/behavioral/memento/StarMemento {
}

public final class dev/shtanko/patterns/behavioral/memento/StarType : java/lang/Enum {
	public static final field DEAD Ldev/shtanko/patterns/behavioral/memento/StarType;
	public static final field RED_GIANT Ldev/shtanko/patterns/behavioral/memento/StarType;
	public static final field SUN Ldev/shtanko/patterns/behavioral/memento/StarType;
	public static final field SUPERNOVA Ldev/shtanko/patterns/behavioral/memento/StarType;
	public static final field WHITE_DWARF Ldev/shtanko/patterns/behavioral/memento/StarType;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public fun toString ()Ljava/lang/String;
	public static fun valueOf (Ljava/lang/String;)Ldev/shtanko/patterns/behavioral/memento/StarType;
	public static fun values ()[Ldev/shtanko/patterns/behavioral/memento/StarType;
}

public final class dev/shtanko/patterns/behavioral/observer/example1/Hobbits : dev/shtanko/patterns/behavioral/observer/example1/WeatherObserver {
	public static final field Companion Ldev/shtanko/patterns/behavioral/observer/example1/Hobbits$Companion;
	public fun <init> ()V
	public fun update (Ldev/shtanko/patterns/behavioral/observer/example1/WeatherType;)V
}

public final class dev/shtanko/patterns/behavioral/observer/example1/Hobbits$Companion {
}

public final class dev/shtanko/patterns/behavioral/observer/example1/Orcs : dev/shtanko/patterns/behavioral/observer/example1/WeatherObserver {
	public static final field Companion Ldev/shtanko/patterns/behavioral/observer/example1/Orcs$Companion;
	public fun <init> ()V
	public fun update (Ldev/shtanko/patterns/behavioral/observer/example1/WeatherType;)V
}

public final class dev/shtanko/patterns/behavioral/observer/example1/Orcs$Companion {
}

public final class dev/shtanko/patterns/behavioral/observer/example1/Weather {
	public static final field Companion Ldev/shtanko/patterns/behavioral/observer/example1/Weather$Companion;
	public fun <init> ()V
	public fun <init> (Ldev/shtanko/patterns/behavioral/observer/example1/WeatherType;Ljava/util/List;)V
	public synthetic fun <init> (Ldev/shtanko/patterns/behavioral/observer/example1/WeatherType;Ljava/util/List;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun addObserver (Ldev/shtanko/patterns/behavioral/observer/example1/WeatherObserver;)V
	public final fun removeObserver (Ldev/shtanko/patterns/behavioral/observer/example1/WeatherObserver;)V
	public final fun timePasses ()V
}

public final class dev/shtanko/patterns/behavioral/observer/example1/Weather$Companion {
}

public abstract interface class dev/shtanko/patterns/behavioral/observer/example1/WeatherObserver {
	public abstract fun update (Ldev/shtanko/patterns/behavioral/observer/example1/WeatherType;)V
}

public final class dev/shtanko/patterns/behavioral/observer/example1/WeatherType : java/lang/Enum {
	public static final field COLD Ldev/shtanko/patterns/behavioral/observer/example1/WeatherType;
	public static final field RAINY Ldev/shtanko/patterns/behavioral/observer/example1/WeatherType;
	public static final field SUNNY Ldev/shtanko/patterns/behavioral/observer/example1/WeatherType;
	public static final field WINDY Ldev/shtanko/patterns/behavioral/observer/example1/WeatherType;
	public final fun getDescription ()Ljava/lang/String;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public fun toString ()Ljava/lang/String;
	public static fun valueOf (Ljava/lang/String;)Ldev/shtanko/patterns/behavioral/observer/example1/WeatherType;
	public static fun values ()[Ldev/shtanko/patterns/behavioral/observer/example1/WeatherType;
}

public final class dev/shtanko/patterns/behavioral/observer/example2/MainKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/patterns/behavioral/observer/example2/editor/Editor {
	public fun <init> ()V
	public final fun getEvents ()Ldev/shtanko/patterns/behavioral/observer/example2/publisher/EventManager;
	public final fun openFile (Ljava/lang/String;)V
	public final fun saveFile ()V
	public final fun setEvents (Ldev/shtanko/patterns/behavioral/observer/example2/publisher/EventManager;)V
}

public final class dev/shtanko/patterns/behavioral/observer/example2/listeners/EmailNotificationListener : dev/shtanko/patterns/behavioral/observer/example2/listeners/EventListener {
	public fun <init> (Ljava/lang/String;)V
	public fun update (Ljava/lang/String;Ljava/io/File;)V
}

public abstract interface class dev/shtanko/patterns/behavioral/observer/example2/listeners/EventListener {
	public abstract fun update (Ljava/lang/String;Ljava/io/File;)V
}

public final class dev/shtanko/patterns/behavioral/observer/example2/listeners/LogOpenListener : dev/shtanko/patterns/behavioral/observer/example2/listeners/EventListener {
	public fun <init> (Ljava/lang/String;)V
	public fun update (Ljava/lang/String;Ljava/io/File;)V
}

public final class dev/shtanko/patterns/behavioral/observer/example2/publisher/EventManager {
	public fun <init> ([Ljava/lang/String;)V
	public final fun getListeners ()Ljava/util/Map;
	public final fun notify (Ljava/lang/String;Ljava/io/File;)V
	public final fun setListeners (Ljava/util/Map;)V
	public final fun subscribe (Ljava/lang/String;Ldev/shtanko/patterns/behavioral/observer/example2/listeners/EventListener;)V
	public final fun unsubscribe (Ljava/lang/String;Ldev/shtanko/patterns/behavioral/observer/example2/listeners/EventListener;)V
}

public final class dev/shtanko/patterns/behavioral/state/AngryState : dev/shtanko/patterns/behavioral/state/State {
	public static final field Companion Ldev/shtanko/patterns/behavioral/state/AngryState$Companion;
	public fun <init> (Ldev/shtanko/patterns/behavioral/state/Mammoth;)V
	public fun observe ()V
	public fun onEnterState ()V
}

public final class dev/shtanko/patterns/behavioral/state/AngryState$Companion {
}

public final class dev/shtanko/patterns/behavioral/state/Mammoth {
	public fun <init> ()V
	public final fun observe ()V
	public final fun timePasses ()V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/behavioral/state/PeacefulState : dev/shtanko/patterns/behavioral/state/State {
	public static final field Companion Ldev/shtanko/patterns/behavioral/state/PeacefulState$Companion;
	public fun <init> (Ldev/shtanko/patterns/behavioral/state/Mammoth;)V
	public fun observe ()V
	public fun onEnterState ()V
}

public final class dev/shtanko/patterns/behavioral/state/PeacefulState$Companion {
}

public abstract interface class dev/shtanko/patterns/behavioral/state/State {
	public abstract fun observe ()V
	public abstract fun onEnterState ()V
}

public final class dev/shtanko/patterns/behavioral/strategy/ConsoleInputReader : dev/shtanko/patterns/behavioral/strategy/InputReader {
	public fun <init> ()V
	public fun readLine ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/behavioral/strategy/CreditCard {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V
	public synthetic fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ljava/lang/String;
	public final fun component3 ()Ljava/lang/String;
	public final fun component4 ()I
	public final fun copy (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Ldev/shtanko/patterns/behavioral/strategy/CreditCard;
	public static synthetic fun copy$default (Ldev/shtanko/patterns/behavioral/strategy/CreditCard;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/lang/Object;)Ldev/shtanko/patterns/behavioral/strategy/CreditCard;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getAmount ()I
	public final fun getCvv ()Ljava/lang/String;
	public final fun getDate ()Ljava/lang/String;
	public final fun getNumber ()Ljava/lang/String;
	public fun hashCode ()I
	public final fun setAmount (I)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/behavioral/strategy/DragonSlayer {
	public fun <init> (Ldev/shtanko/patterns/behavioral/strategy/DragonSlayingStrategy;)V
	public final fun changeStrategy (Ldev/shtanko/patterns/behavioral/strategy/DragonSlayingStrategy;)V
	public final fun getStrategy ()Ldev/shtanko/patterns/behavioral/strategy/DragonSlayingStrategy;
	public final fun goToBattle ()V
	public final fun setStrategy (Ldev/shtanko/patterns/behavioral/strategy/DragonSlayingStrategy;)V
}

public abstract interface class dev/shtanko/patterns/behavioral/strategy/DragonSlayingStrategy {
	public abstract fun execute ()V
}

public final class dev/shtanko/patterns/behavioral/strategy/EcommerceApp {
	public static final field INSTANCE Ldev/shtanko/patterns/behavioral/strategy/EcommerceApp;
	public final fun askContinueShopping (Ljava/io/BufferedReader;)Z
	public final fun choosePaymentMethod (Ljava/io/BufferedReader;)Ldev/shtanko/patterns/behavioral/strategy/PayStrategy;
	public final fun getProductQuantity (Ljava/io/BufferedReader;)I
	public static final fun main ([Ljava/lang/String;)V
	public final fun processOrder (Ljava/io/BufferedReader;)V
	public final fun selectProduct (Ljava/io/BufferedReader;)Ldev/shtanko/patterns/behavioral/strategy/Product;
}

public final class dev/shtanko/patterns/behavioral/strategy/EcommerceAppKt {
	public static final fun firstOrDefault (Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;Ljava/lang/Object;)Ljava/lang/Object;
}

public abstract interface class dev/shtanko/patterns/behavioral/strategy/InputReader {
	public abstract fun readLine ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/behavioral/strategy/MeleeStrategy : dev/shtanko/patterns/behavioral/strategy/DragonSlayingStrategy {
	public static final field Companion Ldev/shtanko/patterns/behavioral/strategy/MeleeStrategy$Companion;
	public fun <init> ()V
	public fun execute ()V
}

public final class dev/shtanko/patterns/behavioral/strategy/MeleeStrategy$Companion {
}

public final class dev/shtanko/patterns/behavioral/strategy/NoInputException : java/io/IOException {
	public fun <init> ()V
}

public final class dev/shtanko/patterns/behavioral/strategy/Order {
	public fun <init> ()V
	public final fun getTotalCost ()I
	public final fun isClosed ()Z
	public final fun processOrder (Ldev/shtanko/patterns/behavioral/strategy/PayStrategy;)V
	public final fun setClosed ()V
	public final fun setTotalCost (I)V
}

public final class dev/shtanko/patterns/behavioral/strategy/PayByCreditCard : dev/shtanko/patterns/behavioral/strategy/PayStrategy {
	public fun <init> ()V
	public fun <init> (Ldev/shtanko/patterns/behavioral/strategy/InputReader;)V
	public synthetic fun <init> (Ldev/shtanko/patterns/behavioral/strategy/InputReader;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun collectPaymentDetails ()V
	public fun pay (I)Z
}

public final class dev/shtanko/patterns/behavioral/strategy/PayByPayPal : dev/shtanko/patterns/behavioral/strategy/PayStrategy {
	public static final field Companion Ldev/shtanko/patterns/behavioral/strategy/PayByPayPal$Companion;
	public fun <init> ()V
	public fun <init> (Ljava/io/BufferedReader;Lkotlin/jvm/functions/Function2;)V
	public synthetic fun <init> (Ljava/io/BufferedReader;Lkotlin/jvm/functions/Function2;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun collectPaymentDetails ()V
	public fun pay (I)Z
}

public final class dev/shtanko/patterns/behavioral/strategy/PayByPayPal$Companion {
}

public abstract interface class dev/shtanko/patterns/behavioral/strategy/PayStrategy {
	public abstract fun collectPaymentDetails ()V
	public abstract fun pay (I)Z
}

public final class dev/shtanko/patterns/behavioral/strategy/Product {
	public fun <init> (ILjava/lang/String;I)V
	public final fun component1 ()I
	public final fun component2 ()Ljava/lang/String;
	public final fun component3 ()I
	public final fun copy (ILjava/lang/String;I)Ldev/shtanko/patterns/behavioral/strategy/Product;
	public static synthetic fun copy$default (Ldev/shtanko/patterns/behavioral/strategy/Product;ILjava/lang/String;IILjava/lang/Object;)Ldev/shtanko/patterns/behavioral/strategy/Product;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getId ()I
	public final fun getName ()Ljava/lang/String;
	public final fun getPrice ()I
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/behavioral/strategy/ProjectileStrategy : dev/shtanko/patterns/behavioral/strategy/DragonSlayingStrategy {
	public static final field Companion Ldev/shtanko/patterns/behavioral/strategy/ProjectileStrategy$Companion;
	public fun <init> ()V
	public fun execute ()V
}

public final class dev/shtanko/patterns/behavioral/strategy/ProjectileStrategy$Companion {
}

public final class dev/shtanko/patterns/behavioral/strategy/SpellStrategy : dev/shtanko/patterns/behavioral/strategy/DragonSlayingStrategy {
	public static final field Companion Ldev/shtanko/patterns/behavioral/strategy/SpellStrategy$Companion;
	public fun <init> ()V
	public fun execute ()V
}

public final class dev/shtanko/patterns/behavioral/strategy/SpellStrategy$Companion {
}

public final class dev/shtanko/patterns/creational/abstractfactory/AppleFactory : dev/shtanko/patterns/creational/abstractfactory/PlantFactory {
	public fun <init> ()V
	public fun makePlant ()Ldev/shtanko/patterns/creational/abstractfactory/Plant;
}

public final class dev/shtanko/patterns/creational/abstractfactory/ApplePlant : dev/shtanko/patterns/creational/abstractfactory/Plant {
	public fun <init> ()V
}

public final class dev/shtanko/patterns/creational/abstractfactory/OrangeFactory : dev/shtanko/patterns/creational/abstractfactory/PlantFactory {
	public fun <init> ()V
	public fun makePlant ()Ldev/shtanko/patterns/creational/abstractfactory/Plant;
}

public final class dev/shtanko/patterns/creational/abstractfactory/OrangePlant : dev/shtanko/patterns/creational/abstractfactory/Plant {
	public fun <init> ()V
}

public abstract interface class dev/shtanko/patterns/creational/abstractfactory/Plant {
}

public abstract interface class dev/shtanko/patterns/creational/abstractfactory/PlantFactory {
	public static final field Companion Ldev/shtanko/patterns/creational/abstractfactory/PlantFactory$Companion;
	public abstract fun makePlant ()Ldev/shtanko/patterns/creational/abstractfactory/Plant;
}

public final class dev/shtanko/patterns/creational/abstractfactory/PlantFactory$Companion {
}

public final class dev/shtanko/patterns/creational/abstractfactory/examples/gui/Application {
	public fun <init> (Ldev/shtanko/patterns/creational/abstractfactory/examples/gui/GUIFactory;)V
	public final fun paint ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/creational/abstractfactory/examples/gui/Demo {
	public static final field INSTANCE Ldev/shtanko/patterns/creational/abstractfactory/examples/gui/Demo;
	public static final fun main ([Ljava/lang/String;)V
}

public abstract interface class dev/shtanko/patterns/creational/abstractfactory/examples/gui/GUIFactory {
	public abstract fun createButton ()Ldev/shtanko/patterns/creational/abstractfactory/examples/gui/buttons/Button;
	public abstract fun createCheckbox ()Ldev/shtanko/patterns/creational/abstractfactory/examples/gui/checkboxes/Checkbox;
}

public final class dev/shtanko/patterns/creational/abstractfactory/examples/gui/MacOSFactory : dev/shtanko/patterns/creational/abstractfactory/examples/gui/GUIFactory {
	public fun <init> ()V
	public fun createButton ()Ldev/shtanko/patterns/creational/abstractfactory/examples/gui/buttons/Button;
	public fun createCheckbox ()Ldev/shtanko/patterns/creational/abstractfactory/examples/gui/checkboxes/Checkbox;
}

public final class dev/shtanko/patterns/creational/abstractfactory/examples/gui/WindowsFactory : dev/shtanko/patterns/creational/abstractfactory/examples/gui/GUIFactory {
	public fun <init> ()V
	public fun createButton ()Ldev/shtanko/patterns/creational/abstractfactory/examples/gui/buttons/Button;
	public fun createCheckbox ()Ldev/shtanko/patterns/creational/abstractfactory/examples/gui/checkboxes/Checkbox;
}

public abstract interface class dev/shtanko/patterns/creational/abstractfactory/examples/gui/buttons/Button {
	public abstract fun paint ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/creational/abstractfactory/examples/gui/buttons/MacOSButton : dev/shtanko/patterns/creational/abstractfactory/examples/gui/buttons/Button {
	public fun <init> ()V
	public fun paint ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/creational/abstractfactory/examples/gui/buttons/WindowsButton : dev/shtanko/patterns/creational/abstractfactory/examples/gui/buttons/Button {
	public fun <init> ()V
	public fun paint ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/patterns/creational/abstractfactory/examples/gui/checkboxes/Checkbox {
	public abstract fun paint ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/creational/abstractfactory/examples/gui/checkboxes/MacOSCheckbox : dev/shtanko/patterns/creational/abstractfactory/examples/gui/checkboxes/Checkbox {
	public fun <init> ()V
	public fun paint ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/creational/abstractfactory/examples/gui/checkboxes/WindowsCheckbox : dev/shtanko/patterns/creational/abstractfactory/examples/gui/checkboxes/Checkbox {
	public fun <init> ()V
	public fun paint ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/creational/builder/examples/product/Product {
	public fun <init> ()V
	public fun <init> (Ljava/lang/String;Ljava/lang/Double;Ljava/lang/String;)V
	public synthetic fun <init> (Ljava/lang/String;Ljava/lang/Double;Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ljava/lang/Double;
	public final fun component3 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;Ljava/lang/Double;Ljava/lang/String;)Ldev/shtanko/patterns/creational/builder/examples/product/Product;
	public static synthetic fun copy$default (Ldev/shtanko/patterns/creational/builder/examples/product/Product;Ljava/lang/String;Ljava/lang/Double;Ljava/lang/String;ILjava/lang/Object;)Ldev/shtanko/patterns/creational/builder/examples/product/Product;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getExpirationDate ()Ljava/lang/String;
	public final fun getName ()Ljava/lang/String;
	public final fun getPrice ()Ljava/lang/Double;
	public fun hashCode ()I
	public final fun setExpirationDate (Ljava/lang/String;)V
	public final fun setName (Ljava/lang/String;)V
	public final fun setPrice (Ljava/lang/Double;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/creational/builder/examples/product/ProductBuilder {
	public fun <init> ()V
	public final fun build ()Ldev/shtanko/patterns/creational/builder/examples/product/Product;
	public final fun setExpirationDate (Ljava/lang/String;)Ldev/shtanko/patterns/creational/builder/examples/product/ProductBuilder;
	public final fun setName (Ljava/lang/String;)Ldev/shtanko/patterns/creational/builder/examples/product/ProductBuilder;
	public final fun setPrice (D)Ldev/shtanko/patterns/creational/builder/examples/product/ProductBuilder;
}

public final class dev/shtanko/patterns/creational/factorymethod/Canada : dev/shtanko/patterns/creational/factorymethod/Country {
	public fun <init> (Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;)Ldev/shtanko/patterns/creational/factorymethod/Canada;
	public static synthetic fun copy$default (Ldev/shtanko/patterns/creational/factorymethod/Canada;Ljava/lang/String;ILjava/lang/Object;)Ldev/shtanko/patterns/creational/factorymethod/Canada;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getSomeProperty ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract class dev/shtanko/patterns/creational/factorymethod/Country {
}

public final class dev/shtanko/patterns/creational/factorymethod/Country$USA : dev/shtanko/patterns/creational/factorymethod/Country {
	public static final field INSTANCE Ldev/shtanko/patterns/creational/factorymethod/Country$USA;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/creational/factorymethod/Currency {
	public fun <init> (Ljava/lang/String;)V
	public final fun getCode ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/creational/factorymethod/CurrencyFactory {
	public static final field INSTANCE Ldev/shtanko/patterns/creational/factorymethod/CurrencyFactory;
	public final fun currencyForCountry (Ldev/shtanko/patterns/creational/factorymethod/Country;)Ldev/shtanko/patterns/creational/factorymethod/Currency;
}

public final class dev/shtanko/patterns/creational/factorymethod/Greece : dev/shtanko/patterns/creational/factorymethod/Country {
	public fun <init> (Ljava/lang/String;)V
	public final fun getSomeProperty ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/creational/factorymethod/Spain : dev/shtanko/patterns/creational/factorymethod/Country {
	public static final field INSTANCE Ldev/shtanko/patterns/creational/factorymethod/Spain;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/creational/factorymethod/Ukraine : dev/shtanko/patterns/creational/factorymethod/Country {
	public static final field INSTANCE Ldev/shtanko/patterns/creational/factorymethod/Ukraine;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/patterns/creational/factorymethod/examples/buttons/Button {
	public abstract fun onClick ()V
	public abstract fun render ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/creational/factorymethod/examples/buttons/Demo {
	public static final field INSTANCE Ldev/shtanko/patterns/creational/factorymethod/examples/buttons/Demo;
	public static final fun main ([Ljava/lang/String;)V
	public final fun runExample (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class dev/shtanko/patterns/creational/factorymethod/examples/buttons/Dialog {
	public abstract fun createButton ()Ldev/shtanko/patterns/creational/factorymethod/examples/buttons/Button;
	public fun renderWindow ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/creational/factorymethod/examples/buttons/Dialog$DefaultImpls {
	public static fun renderWindow (Ldev/shtanko/patterns/creational/factorymethod/examples/buttons/Dialog;)Ljava/lang/String;
}

public final class dev/shtanko/patterns/creational/factorymethod/examples/buttons/HtmlButton : dev/shtanko/patterns/creational/factorymethod/examples/buttons/Button {
	public fun <init> ()V
	public fun onClick ()V
	public fun render ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/creational/factorymethod/examples/buttons/HtmlDialog : dev/shtanko/patterns/creational/factorymethod/examples/buttons/Dialog {
	public fun <init> ()V
	public fun createButton ()Ldev/shtanko/patterns/creational/factorymethod/examples/buttons/Button;
	public fun renderWindow ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/creational/factorymethod/examples/buttons/WindowsButton : dev/shtanko/patterns/creational/factorymethod/examples/buttons/Button {
	public fun <init> ()V
	public fun onClick ()V
	public fun render ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/creational/factorymethod/examples/buttons/WindowsDialog : dev/shtanko/patterns/creational/factorymethod/examples/buttons/Dialog {
	public fun <init> ()V
	public fun createButton ()Ldev/shtanko/patterns/creational/factorymethod/examples/buttons/Button;
	public fun renderWindow ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/creational/prototype/examples/simple/ConcretePrototype : dev/shtanko/patterns/creational/prototype/examples/simple/Prototype {
	public fun <init> (I)V
	public final fun component1 ()I
	public final fun copy (I)Ldev/shtanko/patterns/creational/prototype/examples/simple/ConcretePrototype;
	public static synthetic fun copy$default (Ldev/shtanko/patterns/creational/prototype/examples/simple/ConcretePrototype;IILjava/lang/Object;)Ldev/shtanko/patterns/creational/prototype/examples/simple/ConcretePrototype;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getId ()I
	public fun hashCode ()I
	public fun invoke ()Ldev/shtanko/patterns/creational/prototype/examples/simple/Prototype;
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/patterns/creational/prototype/examples/simple/Prototype {
	public abstract fun invoke ()Ldev/shtanko/patterns/creational/prototype/examples/simple/Prototype;
}

public final class dev/shtanko/patterns/solid/dip/example1/EmailSender : dev/shtanko/patterns/solid/dip/example1/MessageSender {
	public fun <init> ()V
	public final fun getOutput ()Ljava/lang/String;
	public fun sendMessage (Ljava/lang/String;)V
}

public abstract interface class dev/shtanko/patterns/solid/dip/example1/MessageSender {
	public abstract fun sendMessage (Ljava/lang/String;)V
}

public final class dev/shtanko/patterns/solid/dip/example1/NotificationService {
	public fun <init> (Ldev/shtanko/patterns/solid/dip/example1/MessageSender;)V
	public final fun sendNotification (Ljava/lang/String;)V
}

public final class dev/shtanko/patterns/solid/dip/example1/SmsSender : dev/shtanko/patterns/solid/dip/example1/MessageSender {
	public fun <init> ()V
	public final fun getOutput ()Ljava/lang/String;
	public fun sendMessage (Ljava/lang/String;)V
}

public abstract interface class dev/shtanko/patterns/solid/isp/example1/Eater {
	public abstract fun eat ()V
}

public final class dev/shtanko/patterns/solid/isp/example1/Human : dev/shtanko/patterns/solid/isp/example1/Eater, dev/shtanko/patterns/solid/isp/example1/Worker {
	public fun <init> ()V
	public fun eat ()V
	public final fun getOutput ()Ljava/lang/String;
	public fun work ()V
}

public final class dev/shtanko/patterns/solid/isp/example1/Robot : dev/shtanko/patterns/solid/isp/example1/Worker {
	public fun <init> ()V
	public final fun getOutput ()Ljava/lang/String;
	public fun work ()V
}

public abstract interface class dev/shtanko/patterns/solid/isp/example1/Worker {
	public abstract fun work ()V
}

public class dev/shtanko/patterns/solid/lsp/example1/Bird {
	public fun <init> ()V
	public fun fly ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/solid/lsp/example1/Ostrich : dev/shtanko/patterns/solid/lsp/example1/Bird {
	public fun <init> ()V
	public fun fly ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/solid/lsp/example1/Sparrow : dev/shtanko/patterns/solid/lsp/example1/Bird {
	public fun <init> ()V
	public fun fly ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/solid/ocp/example1/AreaCalculator {
	public fun <init> (Ljava/util/List;)V
	public final fun calculateTotalArea ()D
}

public final class dev/shtanko/patterns/solid/ocp/example1/Circle : dev/shtanko/patterns/solid/ocp/example1/Shape {
	public fun <init> (D)V
	public fun calculateArea ()D
}

public final class dev/shtanko/patterns/solid/ocp/example1/Rectangle : dev/shtanko/patterns/solid/ocp/example1/Shape {
	public fun <init> (DD)V
	public fun calculateArea ()D
}

public abstract interface class dev/shtanko/patterns/solid/ocp/example1/Shape {
	public abstract fun calculateArea ()D
}

public final class dev/shtanko/patterns/solid/srp/SingleResponsibilityPrinciple {
	public static final field INSTANCE Ldev/shtanko/patterns/solid/srp/SingleResponsibilityPrinciple;
}

public final class dev/shtanko/patterns/solid/srp/SingleResponsibilityPrinciple$Robot {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;)V
	public final fun getName ()Ljava/lang/String;
	public final fun getType ()Ljava/lang/String;
	public final fun greet ()V
}

public final class dev/shtanko/patterns/solid/srp/SingleResponsibilityPrinciple$RobotPrinter {
	public fun <init> ()V
	public final fun greet (Ldev/shtanko/patterns/solid/srp/SingleResponsibilityPrinciple$Robot;)V
}

public final class dev/shtanko/patterns/solid/srp/example1/AuthenticationManager {
	public fun <init> (Ldev/shtanko/patterns/solid/srp/example1/UserRepository;Ldev/shtanko/patterns/solid/srp/example1/Logger;)V
	public final fun authenticate (Ljava/lang/String;Ljava/lang/String;)Z
}

public final class dev/shtanko/patterns/solid/srp/example1/LogLevel : java/lang/Enum {
	public static final field ERROR Ldev/shtanko/patterns/solid/srp/example1/LogLevel;
	public static final field INFO Ldev/shtanko/patterns/solid/srp/example1/LogLevel;
	public static final field WARNING Ldev/shtanko/patterns/solid/srp/example1/LogLevel;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Ldev/shtanko/patterns/solid/srp/example1/LogLevel;
	public static fun values ()[Ldev/shtanko/patterns/solid/srp/example1/LogLevel;
}

public final class dev/shtanko/patterns/solid/srp/example1/Logger {
	public fun <init> (Ldev/shtanko/patterns/solid/srp/example1/LogLevel;)V
	public final fun log (Ljava/lang/String;)V
}

public final class dev/shtanko/patterns/solid/srp/example1/User {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;Ljava/lang/String;)Ldev/shtanko/patterns/solid/srp/example1/User;
	public static synthetic fun copy$default (Ldev/shtanko/patterns/solid/srp/example1/User;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Ldev/shtanko/patterns/solid/srp/example1/User;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getPassword ()Ljava/lang/String;
	public final fun getUsername ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/solid/srp/example1/UserRepository {
	public fun <init> (Ljava/util/List;)V
	public final fun findUserByUsername (Ljava/lang/String;)Ldev/shtanko/patterns/solid/srp/example1/User;
}

public final class dev/shtanko/patterns/structural/adapter/Captain {
	public fun <init> ()V
	public fun <init> (Ldev/shtanko/patterns/structural/adapter/RowingBoat;)V
	public synthetic fun <init> (Ldev/shtanko/patterns/structural/adapter/RowingBoat;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun copy (Ldev/shtanko/patterns/structural/adapter/RowingBoat;)Ldev/shtanko/patterns/structural/adapter/Captain;
	public static synthetic fun copy$default (Ldev/shtanko/patterns/structural/adapter/Captain;Ldev/shtanko/patterns/structural/adapter/RowingBoat;ILjava/lang/Object;)Ldev/shtanko/patterns/structural/adapter/Captain;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public final fun row ()V
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/structural/adapter/FishingBoat {
	public static final field Companion Ldev/shtanko/patterns/structural/adapter/FishingBoat$Companion;
	public fun <init> ()V
	public final fun sail ()V
}

public final class dev/shtanko/patterns/structural/adapter/FishingBoat$Companion {
}

public final class dev/shtanko/patterns/structural/adapter/FishingBoatAdapter : dev/shtanko/patterns/structural/adapter/RowingBoat {
	public fun <init> ()V
	public fun <init> (Ldev/shtanko/patterns/structural/adapter/FishingBoat;)V
	public synthetic fun <init> (Ldev/shtanko/patterns/structural/adapter/FishingBoat;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun row ()V
}

public abstract interface class dev/shtanko/patterns/structural/adapter/RowingBoat {
	public abstract fun row ()V
}

public final class dev/shtanko/patterns/structural/adapter/example/CelsiusTemperature : dev/shtanko/patterns/structural/adapter/example/Temperature {
	public fun <init> (D)V
	public fun getTemperature ()D
	public fun setTemperature (D)V
}

public final class dev/shtanko/patterns/structural/adapter/example/FahrenheitTemperature : dev/shtanko/patterns/structural/adapter/example/Temperature {
	public static final field Companion Ldev/shtanko/patterns/structural/adapter/example/FahrenheitTemperature$Companion;
	public fun <init> (Ldev/shtanko/patterns/structural/adapter/example/CelsiusTemperature;)V
	public fun getTemperature ()D
	public fun setTemperature (D)V
}

public final class dev/shtanko/patterns/structural/adapter/example/FahrenheitTemperature$Companion {
}

public abstract interface class dev/shtanko/patterns/structural/adapter/example/Temperature {
	public abstract fun getTemperature ()D
	public abstract fun setTemperature (D)V
}

public final class dev/shtanko/patterns/structural/adapter/example2/ClientCode {
	public fun <init> (Ldev/shtanko/patterns/structural/adapter/example2/NewSystem;)V
	public final fun execute ()V
}

public abstract interface class dev/shtanko/patterns/structural/adapter/example2/NewSystem {
	public abstract fun performNewAction ()V
}

public final class dev/shtanko/patterns/structural/adapter/example2/OldSystem {
	public fun <init> ()V
	public final fun performOldAction ()V
}

public final class dev/shtanko/patterns/structural/adapter/example2/SystemAdapter : dev/shtanko/patterns/structural/adapter/example2/NewSystem {
	public fun <init> (Ldev/shtanko/patterns/structural/adapter/example2/OldSystem;)V
	public fun performNewAction ()V
}

public final class dev/shtanko/patterns/structural/adapter/example3/TemperatureAdapter : dev/shtanko/patterns/structural/adapter/example3/TemperatureSystem {
	public static final field CELSIUS_TO_FAHRENHEIT_RATIO D
	public static final field Companion Ldev/shtanko/patterns/structural/adapter/example3/TemperatureAdapter$Companion;
	public static final field FAHRENHEIT_OFFSET D
	public fun <init> (Ldev/shtanko/patterns/structural/adapter/example3/TemperatureSensor;)V
	public fun getTemperatureInFahrenheit ()D
}

public final class dev/shtanko/patterns/structural/adapter/example3/TemperatureAdapter$Companion {
}

public final class dev/shtanko/patterns/structural/adapter/example3/TemperatureClient {
	public fun <init> (Ldev/shtanko/patterns/structural/adapter/example3/TemperatureSystem;)V
	public final fun displayTemperature ()V
}

public class dev/shtanko/patterns/structural/adapter/example3/TemperatureSensor {
	public static final field Companion Ldev/shtanko/patterns/structural/adapter/example3/TemperatureSensor$Companion;
	public fun <init> ()V
	public fun getTemperatureInCelsius ()D
}

public final class dev/shtanko/patterns/structural/adapter/example3/TemperatureSensor$Companion {
}

public abstract interface class dev/shtanko/patterns/structural/adapter/example3/TemperatureSystem {
	public abstract fun getTemperatureInFahrenheit ()D
}

public final class dev/shtanko/patterns/structural/adapter/examples/figures/Demo {
	public static final field INSTANCE Ldev/shtanko/patterns/structural/adapter/examples/figures/Demo;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/patterns/structural/adapter/examples/figures/adapters/SquarePegAdapter : dev/shtanko/patterns/structural/adapter/examples/figures/round/RoundPeg {
	public fun <init> (Ldev/shtanko/patterns/structural/adapter/examples/figures/square/SquarePeg;)V
	public fun getRadius ()D
}

public final class dev/shtanko/patterns/structural/adapter/examples/figures/round/RoundHole {
	public fun <init> (D)V
	public final fun fits (Ldev/shtanko/patterns/structural/adapter/examples/figures/round/RoundPeg;)Z
}

public class dev/shtanko/patterns/structural/adapter/examples/figures/round/RoundPeg {
	public fun <init> (D)V
	public fun getRadius ()D
}

public final class dev/shtanko/patterns/structural/adapter/examples/figures/square/SquarePeg {
	public fun <init> (D)V
	public final fun getSquare ()D
	public final fun getWidth ()D
}

public final class dev/shtanko/patterns/structural/bridge/App {
	public static final field INSTANCE Ldev/shtanko/patterns/structural/bridge/App;
	public static final fun main ([Ljava/lang/String;)V
}

public abstract interface class dev/shtanko/patterns/structural/bridge/Enchantment {
	public abstract fun apply ()V
	public abstract fun onActivate ()V
	public abstract fun onDeactivate ()V
}

public final class dev/shtanko/patterns/structural/bridge/FlyingEnchantment : dev/shtanko/patterns/structural/bridge/Enchantment {
	public static final field Companion Ldev/shtanko/patterns/structural/bridge/FlyingEnchantment$Companion;
	public fun <init> ()V
	public fun apply ()V
	public fun onActivate ()V
	public fun onDeactivate ()V
}

public final class dev/shtanko/patterns/structural/bridge/FlyingEnchantment$Companion {
}

public final class dev/shtanko/patterns/structural/bridge/Hammer : dev/shtanko/patterns/structural/bridge/Weapon {
	public static final field Companion Ldev/shtanko/patterns/structural/bridge/Hammer$Companion;
	public fun <init> (Ldev/shtanko/patterns/structural/bridge/Enchantment;)V
	public fun getEnchantment ()Ldev/shtanko/patterns/structural/bridge/Enchantment;
	public fun swing ()V
	public fun unWield ()V
	public fun wield ()V
}

public final class dev/shtanko/patterns/structural/bridge/Hammer$Companion {
}

public final class dev/shtanko/patterns/structural/bridge/SoulEatingEnchantment : dev/shtanko/patterns/structural/bridge/Enchantment {
	public static final field Companion Ldev/shtanko/patterns/structural/bridge/SoulEatingEnchantment$Companion;
	public fun <init> ()V
	public fun apply ()V
	public fun onActivate ()V
	public fun onDeactivate ()V
}

public final class dev/shtanko/patterns/structural/bridge/SoulEatingEnchantment$Companion {
}

public final class dev/shtanko/patterns/structural/bridge/Sword : dev/shtanko/patterns/structural/bridge/Weapon {
	public static final field Companion Ldev/shtanko/patterns/structural/bridge/Sword$Companion;
	public fun <init> (Ldev/shtanko/patterns/structural/bridge/Enchantment;)V
	public fun getEnchantment ()Ldev/shtanko/patterns/structural/bridge/Enchantment;
	public fun swing ()V
	public fun unWield ()V
	public fun wield ()V
}

public final class dev/shtanko/patterns/structural/bridge/Sword$Companion {
}

public abstract interface class dev/shtanko/patterns/structural/bridge/Weapon {
	public abstract fun getEnchantment ()Ldev/shtanko/patterns/structural/bridge/Enchantment;
	public abstract fun swing ()V
	public abstract fun unWield ()V
	public abstract fun wield ()V
}

public final class dev/shtanko/patterns/structural/bridge/example/EmailMessage : dev/shtanko/patterns/structural/bridge/example/Message {
	public fun <init> (Ldev/shtanko/patterns/structural/bridge/example/MessageSender;)V
	public fun send ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/structural/bridge/example/EmailMessageSender : dev/shtanko/patterns/structural/bridge/example/MessageSender {
	public fun <init> ()V
	public fun sendMessage ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/patterns/structural/bridge/example/Message {
	public abstract fun send ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/patterns/structural/bridge/example/MessageSender {
	public abstract fun sendMessage ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/structural/bridge/example/TextMessage : dev/shtanko/patterns/structural/bridge/example/Message {
	public fun <init> (Ldev/shtanko/patterns/structural/bridge/example/MessageSender;)V
	public fun send ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/structural/bridge/example/TextMessageSender : dev/shtanko/patterns/structural/bridge/example/MessageSender {
	public fun <init> ()V
	public fun sendMessage ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/structural/bridge/examples/example1/DemoKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
	public static final fun testDevice (Ldev/shtanko/patterns/structural/bridge/examples/example1/devices/Device;)V
}

public abstract interface class dev/shtanko/patterns/structural/bridge/examples/example1/devices/Device {
	public abstract fun disable ()V
	public abstract fun enable ()V
	public abstract fun getChannel ()I
	public abstract fun getVolume ()I
	public abstract fun isEnabled ()Z
	public abstract fun printStatus ()V
	public abstract fun setChannel (I)V
	public abstract fun setVolume (I)V
}

public final class dev/shtanko/patterns/structural/bridge/examples/example1/devices/Radio : dev/shtanko/patterns/structural/bridge/examples/example1/devices/Device {
	public fun <init> ()V
	public fun disable ()V
	public fun enable ()V
	public fun getChannel ()I
	public fun getVolume ()I
	public fun isEnabled ()Z
	public fun printStatus ()V
	public fun setChannel (I)V
	public fun setVolume (I)V
}

public final class dev/shtanko/patterns/structural/bridge/examples/example1/devices/Tv : dev/shtanko/patterns/structural/bridge/examples/example1/devices/Device {
	public fun <init> ()V
	public fun disable ()V
	public fun enable ()V
	public fun getChannel ()I
	public fun getVolume ()I
	public fun isEnabled ()Z
	public fun printStatus ()V
	public fun setChannel (I)V
	public fun setVolume (I)V
}

public final class dev/shtanko/patterns/structural/bridge/examples/example1/remotes/AdvancedRemote : dev/shtanko/patterns/structural/bridge/examples/example1/remotes/BasicRemote {
	public fun <init> (Ldev/shtanko/patterns/structural/bridge/examples/example1/devices/Device;)V
	public final fun mute ()V
}

public class dev/shtanko/patterns/structural/bridge/examples/example1/remotes/BasicRemote : dev/shtanko/patterns/structural/bridge/examples/example1/remotes/Remote {
	public fun <init> (Ldev/shtanko/patterns/structural/bridge/examples/example1/devices/Device;)V
	public fun channelDown ()V
	public fun channelUp ()V
	public fun power ()V
	public fun volumeDown ()V
	public fun volumeUp ()V
}

public abstract interface class dev/shtanko/patterns/structural/bridge/examples/example1/remotes/Remote {
	public abstract fun channelDown ()V
	public abstract fun channelUp ()V
	public abstract fun power ()V
	public abstract fun volumeDown ()V
	public abstract fun volumeUp ()V
}

public final class dev/shtanko/patterns/structural/bridge/examples/example2/BlueColor : dev/shtanko/patterns/structural/bridge/examples/example2/Color {
	public fun <init> ()V
	public fun applyColor ()V
}

public final class dev/shtanko/patterns/structural/bridge/examples/example2/Circle : dev/shtanko/patterns/structural/bridge/examples/example2/Shape {
	public fun <init> (Ldev/shtanko/patterns/structural/bridge/examples/example2/Color;)V
	public fun draw ()V
}

public abstract interface class dev/shtanko/patterns/structural/bridge/examples/example2/Color {
	public abstract fun applyColor ()V
}

public final class dev/shtanko/patterns/structural/bridge/examples/example2/RedColor : dev/shtanko/patterns/structural/bridge/examples/example2/Color {
	public fun <init> ()V
	public fun applyColor ()V
}

public abstract class dev/shtanko/patterns/structural/bridge/examples/example2/Shape {
	public fun <init> (Ldev/shtanko/patterns/structural/bridge/examples/example2/Color;)V
	public abstract fun draw ()V
	protected final fun getColor ()Ldev/shtanko/patterns/structural/bridge/examples/example2/Color;
}

public final class dev/shtanko/patterns/structural/bridge/examples/example2/Square : dev/shtanko/patterns/structural/bridge/examples/example2/Shape {
	public fun <init> (Ldev/shtanko/patterns/structural/bridge/examples/example2/Color;)V
	public fun draw ()V
}

public final class dev/shtanko/patterns/structural/bridge/examples/example3/Bike : dev/shtanko/patterns/structural/bridge/examples/example3/Vehicle {
	public fun <init> (Ldev/shtanko/patterns/structural/bridge/examples/example3/DrivingMode;)V
	public fun drive ()V
}

public final class dev/shtanko/patterns/structural/bridge/examples/example3/Car : dev/shtanko/patterns/structural/bridge/examples/example3/Vehicle {
	public fun <init> (Ldev/shtanko/patterns/structural/bridge/examples/example3/DrivingMode;)V
	public fun drive ()V
}

public abstract interface class dev/shtanko/patterns/structural/bridge/examples/example3/DrivingMode {
	public abstract fun applyMode ()V
}

public final class dev/shtanko/patterns/structural/bridge/examples/example3/EcoMode : dev/shtanko/patterns/structural/bridge/examples/example3/DrivingMode {
	public fun <init> ()V
	public fun applyMode ()V
}

public final class dev/shtanko/patterns/structural/bridge/examples/example3/Example3Kt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/patterns/structural/bridge/examples/example3/SportMode : dev/shtanko/patterns/structural/bridge/examples/example3/DrivingMode {
	public fun <init> ()V
	public fun applyMode ()V
}

public abstract class dev/shtanko/patterns/structural/bridge/examples/example3/Vehicle {
	public fun <init> (Ldev/shtanko/patterns/structural/bridge/examples/example3/DrivingMode;)V
	public abstract fun drive ()V
	protected final fun getDrivingMode ()Ldev/shtanko/patterns/structural/bridge/examples/example3/DrivingMode;
}

public class dev/shtanko/patterns/structural/composite/Composite : dev/shtanko/patterns/structural/composite/Equipment {
	public fun <init> (Ljava/lang/String;)V
	public final fun add (Ldev/shtanko/patterns/structural/composite/Equipment;)V
	public fun getPrice ()I
}

public class dev/shtanko/patterns/structural/composite/Equipment {
	public fun <init> (ILjava/lang/String;)V
	public fun getPrice ()I
}

public final class dev/shtanko/patterns/structural/composite/Letter : dev/shtanko/patterns/structural/composite/LetterComposite {
	public fun <init> (C)V
	public fun printThisBefore ()V
}

public class dev/shtanko/patterns/structural/composite/LetterComposite {
	public fun <init> ()V
	public final fun add (Ldev/shtanko/patterns/structural/composite/LetterComposite;)V
	public final fun count ()I
	public final fun print ()V
	public fun printThisAfter ()V
	public fun printThisBefore ()V
}

public final class dev/shtanko/patterns/structural/composite/Messenger {
	public fun <init> ()V
	public final fun messageFromElves ()Ldev/shtanko/patterns/structural/composite/LetterComposite;
	public final fun messageFromOrcs ()Ldev/shtanko/patterns/structural/composite/LetterComposite;
}

public final class dev/shtanko/patterns/structural/composite/Sentence : dev/shtanko/patterns/structural/composite/LetterComposite {
	public fun <init> (Ljava/util/List;)V
	public fun printThisAfter ()V
}

public final class dev/shtanko/patterns/structural/composite/Word : dev/shtanko/patterns/structural/composite/LetterComposite {
	public fun <init> ([C)V
	public fun printThisBefore ()V
}

public final class dev/shtanko/patterns/structural/composite/example1/Directory : dev/shtanko/patterns/structural/composite/example1/FileSystemComponent {
	public fun <init> (Ljava/lang/String;)V
	public final fun add (Ldev/shtanko/patterns/structural/composite/example1/FileSystemComponent;)V
	public fun display (Ljava/lang/String;)V
}

public final class dev/shtanko/patterns/structural/composite/example1/Example1Kt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/patterns/structural/composite/example1/File : dev/shtanko/patterns/structural/composite/example1/FileSystemComponent {
	public fun <init> (Ljava/lang/String;)V
	public fun display (Ljava/lang/String;)V
}

public abstract class dev/shtanko/patterns/structural/composite/example1/FileSystemComponent {
	public fun <init> (Ljava/lang/String;)V
	public abstract fun display (Ljava/lang/String;)V
	public final fun getName ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/structural/decorator/ClubbedTroll : dev/shtanko/patterns/structural/decorator/Troll {
	public static final field Companion Ldev/shtanko/patterns/structural/decorator/ClubbedTroll$Companion;
	public fun <init> (Ldev/shtanko/patterns/structural/decorator/Troll;)V
	public fun attack ()V
	public fun fleeBattle ()V
	public fun getAttackPower ()I
}

public final class dev/shtanko/patterns/structural/decorator/ClubbedTroll$Companion {
}

public final class dev/shtanko/patterns/structural/decorator/SimpleTroll : dev/shtanko/patterns/structural/decorator/Troll {
	public static final field Companion Ldev/shtanko/patterns/structural/decorator/SimpleTroll$Companion;
	public fun <init> ()V
	public fun attack ()V
	public fun fleeBattle ()V
	public fun getAttackPower ()I
}

public final class dev/shtanko/patterns/structural/decorator/SimpleTroll$Companion {
}

public abstract interface class dev/shtanko/patterns/structural/decorator/Troll {
	public abstract fun attack ()V
	public abstract fun fleeBattle ()V
	public abstract fun getAttackPower ()I
}

public final class dev/shtanko/patterns/structural/decorator/examples/ds/CompressionDecorator : dev/shtanko/patterns/structural/decorator/examples/ds/DataSourceDecorator {
	public static final field Companion Ldev/shtanko/patterns/structural/decorator/examples/ds/CompressionDecorator$Companion;
	public fun <init> (Ldev/shtanko/patterns/structural/decorator/examples/ds/DataSource;)V
	public fun readData ()Ljava/lang/String;
	public fun writeData (Ljava/lang/String;)V
}

public final class dev/shtanko/patterns/structural/decorator/examples/ds/CompressionDecorator$Companion {
}

public abstract interface class dev/shtanko/patterns/structural/decorator/examples/ds/DataSource {
	public abstract fun readData ()Ljava/lang/String;
	public abstract fun writeData (Ljava/lang/String;)V
}

public class dev/shtanko/patterns/structural/decorator/examples/ds/DataSourceDecorator : dev/shtanko/patterns/structural/decorator/examples/ds/DataSource {
	public fun <init> (Ldev/shtanko/patterns/structural/decorator/examples/ds/DataSource;)V
	public fun readData ()Ljava/lang/String;
	public fun writeData (Ljava/lang/String;)V
}

public final class dev/shtanko/patterns/structural/decorator/examples/ds/Demo {
	public static final field INSTANCE Ldev/shtanko/patterns/structural/decorator/examples/ds/Demo;
	public static final fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/patterns/structural/decorator/examples/ds/EncryptionDecorator : dev/shtanko/patterns/structural/decorator/examples/ds/DataSourceDecorator {
	public fun <init> (Ldev/shtanko/patterns/structural/decorator/examples/ds/DataSource;)V
	public fun readData ()Ljava/lang/String;
	public fun writeData (Ljava/lang/String;)V
}

public final class dev/shtanko/patterns/structural/decorator/examples/ds/FileDataSource : dev/shtanko/patterns/structural/decorator/examples/ds/DataSource {
	public fun <init> (Ljava/lang/String;)V
	public fun readData ()Ljava/lang/String;
	public fun writeData (Ljava/lang/String;)V
}

public final class dev/shtanko/patterns/structural/decorator/examples/example1/BallsDecorator : dev/shtanko/patterns/structural/decorator/examples/example1/TreeDecorator {
	public fun <init> (Ldev/shtanko/patterns/structural/decorator/examples/example1/ChristmasTree;)V
	public fun decorate ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/patterns/structural/decorator/examples/example1/ChristmasTree {
	public abstract fun decorate ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/structural/decorator/examples/example1/LightsDecorator : dev/shtanko/patterns/structural/decorator/examples/example1/TreeDecorator {
	public fun <init> (Ldev/shtanko/patterns/structural/decorator/examples/example1/ChristmasTree;)V
	public fun decorate ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/structural/decorator/examples/example1/SimpleChristmasTree : dev/shtanko/patterns/structural/decorator/examples/example1/ChristmasTree {
	public fun <init> ()V
	public fun decorate ()Ljava/lang/String;
}

public abstract class dev/shtanko/patterns/structural/decorator/examples/example1/TreeDecorator : dev/shtanko/patterns/structural/decorator/examples/example1/ChristmasTree {
	public fun <init> (Ldev/shtanko/patterns/structural/decorator/examples/example1/ChristmasTree;)V
	public fun decorate ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/structural/decorator/examples/example2/DistinctStream : dev/shtanko/patterns/structural/decorator/examples/example2/StreamDecorator {
	public fun <init> (Ldev/shtanko/patterns/structural/decorator/examples/example2/StreamDecorator;)V
	public fun collect ()Ljava/util/List;
	public fun filter (Lkotlin/jvm/functions/Function1;)Ldev/shtanko/patterns/structural/decorator/examples/example2/StreamDecorator;
}

public final class dev/shtanko/patterns/structural/decorator/examples/example2/SimpleStream : dev/shtanko/patterns/structural/decorator/examples/example2/StreamDecorator {
	public fun <init> (Ljava/util/List;)V
	public fun collect ()Ljava/util/List;
	public fun filter (Lkotlin/jvm/functions/Function1;)Ldev/shtanko/patterns/structural/decorator/examples/example2/StreamDecorator;
}

public abstract interface class dev/shtanko/patterns/structural/decorator/examples/example2/StreamDecorator {
	public abstract fun collect ()Ljava/util/List;
	public abstract fun filter (Lkotlin/jvm/functions/Function1;)Ldev/shtanko/patterns/structural/decorator/examples/example2/StreamDecorator;
}

public final class dev/shtanko/patterns/structural/facade/DwarvenCartOperator : dev/shtanko/patterns/structural/facade/DwarvenMineWorker {
	public static final field Companion Ldev/shtanko/patterns/structural/facade/DwarvenCartOperator$Companion;
	public fun <init> ()V
	public fun name ()Ljava/lang/String;
	public fun work ()V
}

public final class dev/shtanko/patterns/structural/facade/DwarvenCartOperator$Companion {
}

public final class dev/shtanko/patterns/structural/facade/DwarvenGoldDigger : dev/shtanko/patterns/structural/facade/DwarvenMineWorker {
	public static final field Companion Ldev/shtanko/patterns/structural/facade/DwarvenGoldDigger$Companion;
	public fun <init> ()V
	public fun name ()Ljava/lang/String;
	public fun work ()V
}

public final class dev/shtanko/patterns/structural/facade/DwarvenGoldDigger$Companion {
}

public final class dev/shtanko/patterns/structural/facade/DwarvenGoldmineFacade {
	public fun <init> ()V
	public final fun digOutGold ()V
	public final fun endDay ()V
	public final fun startNewDay ()V
}

public abstract class dev/shtanko/patterns/structural/facade/DwarvenMineWorker {
	public static final field Companion Ldev/shtanko/patterns/structural/facade/DwarvenMineWorker$Companion;
	public fun <init> ()V
	public final fun goHome ()V
	public final fun goToMine ()V
	public abstract fun name ()Ljava/lang/String;
	public final fun performActions ([Ldev/shtanko/patterns/structural/facade/DwarvenMineWorker$Action;)V
	public abstract fun work ()V
}

public abstract class dev/shtanko/patterns/structural/facade/DwarvenMineWorker$Action {
}

public final class dev/shtanko/patterns/structural/facade/DwarvenMineWorker$Action$GoHome : dev/shtanko/patterns/structural/facade/DwarvenMineWorker$Action {
	public static final field INSTANCE Ldev/shtanko/patterns/structural/facade/DwarvenMineWorker$Action$GoHome;
}

public final class dev/shtanko/patterns/structural/facade/DwarvenMineWorker$Action$GoToMine : dev/shtanko/patterns/structural/facade/DwarvenMineWorker$Action {
	public static final field INSTANCE Ldev/shtanko/patterns/structural/facade/DwarvenMineWorker$Action$GoToMine;
}

public final class dev/shtanko/patterns/structural/facade/DwarvenMineWorker$Action$GoToSleep : dev/shtanko/patterns/structural/facade/DwarvenMineWorker$Action {
	public static final field INSTANCE Ldev/shtanko/patterns/structural/facade/DwarvenMineWorker$Action$GoToSleep;
}

public final class dev/shtanko/patterns/structural/facade/DwarvenMineWorker$Action$WakeUp : dev/shtanko/patterns/structural/facade/DwarvenMineWorker$Action {
	public static final field INSTANCE Ldev/shtanko/patterns/structural/facade/DwarvenMineWorker$Action$WakeUp;
}

public final class dev/shtanko/patterns/structural/facade/DwarvenMineWorker$Action$Work : dev/shtanko/patterns/structural/facade/DwarvenMineWorker$Action {
	public static final field INSTANCE Ldev/shtanko/patterns/structural/facade/DwarvenMineWorker$Action$Work;
}

public final class dev/shtanko/patterns/structural/facade/DwarvenMineWorker$Companion {
}

public final class dev/shtanko/patterns/structural/facade/DwarvenTunnelDigger : dev/shtanko/patterns/structural/facade/DwarvenMineWorker {
	public static final field Companion Ldev/shtanko/patterns/structural/facade/DwarvenTunnelDigger$Companion;
	public fun <init> ()V
	public fun name ()Ljava/lang/String;
	public fun work ()V
}

public final class dev/shtanko/patterns/structural/facade/DwarvenTunnelDigger$Companion {
}

public final class dev/shtanko/patterns/structural/flyweight/example1/ForestDemo {
	public static final field INSTANCE Ldev/shtanko/patterns/structural/flyweight/example1/ForestDemo;
	public static final field TREES_TO_DRAW I
	public final fun createForest ()Ldev/shtanko/patterns/structural/flyweight/example1/forest/Forest;
	public static final fun main ([Ljava/lang/String;)V
	public final fun plantTrees (Ldev/shtanko/patterns/structural/flyweight/example1/forest/Forest;)V
	public final fun random (II)I
}

public final class dev/shtanko/patterns/structural/flyweight/example1/forest/Forest : javax/swing/JFrame {
	public fun <init> ()V
	public final fun getTreeList ()Ljava/util/List;
	public final fun getTrees ()Ljava/util/List;
	public fun paint (Ljava/awt/Graphics;)V
	public final fun plantTree (IILjava/lang/String;Ljava/awt/Color;Ljava/lang/String;)V
}

public final class dev/shtanko/patterns/structural/flyweight/example1/forest/ForestDrawer : javax/swing/JFrame, dev/shtanko/patterns/structural/flyweight/example1/forest/ForestPainter {
	public fun <init> (Ljava/util/List;)V
	public final fun getTrees ()Ljava/util/List;
	public fun paint (Ljava/awt/Graphics;)V
}

public abstract interface class dev/shtanko/patterns/structural/flyweight/example1/forest/ForestPainter {
	public abstract fun paint (Ljava/awt/Graphics;)V
}

public abstract interface class dev/shtanko/patterns/structural/flyweight/example1/trees/DrawableTree {
	public abstract fun draw (Ljava/awt/Graphics;)V
}

public final class dev/shtanko/patterns/structural/flyweight/example1/trees/Tree : dev/shtanko/patterns/structural/flyweight/example1/trees/DrawableTree {
	public fun <init> (IILdev/shtanko/patterns/structural/flyweight/example1/trees/TreeType;)V
	public fun draw (Ljava/awt/Graphics;)V
	public final fun getType ()Ldev/shtanko/patterns/structural/flyweight/example1/trees/TreeType;
	public final fun getX ()I
	public final fun getY ()I
}

public final class dev/shtanko/patterns/structural/flyweight/example1/trees/TreeFactory {
	public static final field INSTANCE Ldev/shtanko/patterns/structural/flyweight/example1/trees/TreeFactory;
	public final fun getTreeType (Ljava/lang/String;Ljava/awt/Color;Ljava/lang/String;)Ldev/shtanko/patterns/structural/flyweight/example1/trees/TreeType;
}

public final class dev/shtanko/patterns/structural/flyweight/example1/trees/TreeType {
	public fun <init> (Ljava/lang/String;Ljava/awt/Color;Ljava/lang/String;)V
	public final fun draw (Ljava/awt/Graphics;II)V
	public final fun getColor ()Ljava/awt/Color;
	public final fun getName ()Ljava/lang/String;
	public final fun getOtherTreeData ()Ljava/lang/String;
}

public final class dev/shtanko/patterns/structural/proxy/IvoryTower : dev/shtanko/patterns/structural/proxy/WizardTower {
	public static final field Companion Ldev/shtanko/patterns/structural/proxy/IvoryTower$Companion;
	public fun <init> ()V
	public fun enter (Ldev/shtanko/patterns/structural/proxy/Wizard;)V
}

public final class dev/shtanko/patterns/structural/proxy/IvoryTower$Companion {
}

public final class dev/shtanko/patterns/structural/proxy/Wizard {
	public fun <init> (Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;)Ldev/shtanko/patterns/structural/proxy/Wizard;
	public static synthetic fun copy$default (Ldev/shtanko/patterns/structural/proxy/Wizard;Ljava/lang/String;ILjava/lang/Object;)Ldev/shtanko/patterns/structural/proxy/Wizard;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getName ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class dev/shtanko/patterns/structural/proxy/WizardTower {
	public abstract fun enter (Ldev/shtanko/patterns/structural/proxy/Wizard;)V
}

public final class dev/shtanko/patterns/structural/proxy/WizardTowerProxy : dev/shtanko/patterns/structural/proxy/WizardTower {
	public static final field Companion Ldev/shtanko/patterns/structural/proxy/WizardTowerProxy$Companion;
	public fun <init> (Ldev/shtanko/patterns/structural/proxy/WizardTower;)V
	public fun enter (Ldev/shtanko/patterns/structural/proxy/Wizard;)V
}

public final class dev/shtanko/patterns/structural/proxy/WizardTowerProxy$Companion {
}

public final class dev/shtanko/process/ExecutingSystemCommandsKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/process/HandlingErrorsKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/process/HandlingIOKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/process/HandlingIOStreamsConcurrentlyKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/process/HandlingProcessErrorsExplicitlyKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/process/ProcessAndDirectoryKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/process/TimeoutHandlingKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/protocols/udp/ClientKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/protocols/udp/ServerKt {
	public static final fun main ()V
	public static synthetic fun main ([Ljava/lang/String;)V
}

public final class dev/shtanko/report/Metric {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;Ljava/lang/String;)Ldev/shtanko/report/Metric;
	public static synthetic fun copy$default (Ldev/shtanko/report/Metric;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Ldev/shtanko/report/Metric;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getKey ()Ljava/lang/String;
	public final fun getValue ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/report/ReportParserKt {
	public static final fun addMetrics (Lorg/jsoup/nodes/Element;Ljava/util/List;)Ljava/util/List;
	public static final fun extractMetricsFromDocument (Lorg/jsoup/nodes/Document;)Ljava/util/Map;
	public static final fun fetchDirPath ()Ljava/lang/String;
	public static final fun fetchFileOutputPath ()Ljava/lang/String;
	public static final fun fetchFilePath ()Ljava/lang/String;
	public static final fun formatMetricValue (Ljava/lang/String;)Ljava/lang/String;
	public static final fun generateMarkdownTable (Ljava/util/List;Ljava/util/List;Ljava/lang/String;)Lkotlin/Triple;
	public static final fun generateMarkdownTable (Ljava/util/Map;)Ljava/lang/String;
	public static synthetic fun generateMarkdownTable$default (Ljava/util/List;Ljava/util/List;Ljava/lang/String;ILjava/lang/Object;)Lkotlin/Triple;
	public static final fun handleMetric (Lkotlin/Pair;)V
	public static final fun handleTags (Lorg/jsoup/select/Elements;)Ljava/util/Map;
	public static final fun handleUlTag (Ljava/lang/String;Lorg/jsoup/nodes/Element;Ljava/util/Map;)Ljava/util/Map;
	public static final fun main ([Ljava/lang/String;)V
	public static final fun mdToFile (Ljava/lang/String;Ljava/lang/String;)V
	public static final fun metricsToFile (Ljava/util/Map;Ljava/lang/String;)V
	public static final fun parseHtmlToDocument (Ljava/lang/String;)Lorg/jsoup/nodes/Document;
	public static final fun printExtractedMetrics (Ljava/util/Map;)V
	public static final fun readContentFromFile (Ljava/lang/String;)Ljava/lang/String;
	public static final fun separateNumbersFromText (Ljava/lang/String;)Lkotlin/Pair;
}

public final class dev/shtanko/retry/DefaultRetryPolicy : dev/shtanko/retry/RetryPolicy {
	public fun <init> ()V
	public fun <init> (ILkotlin/jvm/functions/Function1;)V
	public synthetic fun <init> (ILkotlin/jvm/functions/Function1;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun shouldRetry (Ljava/lang/Throwable;I)Z
}

public final class dev/shtanko/retry/RetryConstants {
	public static final field DEFAULT_FACTOR D
	public static final field DEFAULT_INITIAL_DELAY J
	public static final field DEFAULT_MAX_DELAY J
	public static final field INSTANCE Ldev/shtanko/retry/RetryConstants;
}

public final class dev/shtanko/retry/RetryKt {
	public static final fun retry (JJDLdev/shtanko/retry/RetryPolicy;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun retry$default (JJDLdev/shtanko/retry/RetryPolicy;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
}

public abstract interface class dev/shtanko/retry/RetryPolicy {
	public abstract fun shouldRetry (Ljava/lang/Throwable;I)Z
}

public final class dev/shtanko/utils/BadClass {
	public fun <init> ()V
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/utils/CollectionsKt {
	public static final fun fourth (Ljava/util/List;)Ljava/lang/Object;
	public static final fun second (Ljava/util/List;)Ljava/lang/Object;
	public static final fun third (Ljava/util/List;)Ljava/lang/Object;
}

public final class dev/shtanko/utils/HumanReadableByteCountSIKt {
	public static final fun toHumanReadableByteCountSI (J)Ljava/lang/String;
}

public final class dev/shtanko/utils/HumanReadableBytesKt {
	public static final fun toHumanReadableByteCountBin (J)Ljava/lang/String;
}

public final class dev/shtanko/utils/HumanReadableDurationKt {
	public static final fun toHumanReadableDuration (J)Ljava/lang/String;
}

public final class dev/shtanko/utils/MeasureKt {
	public static final fun proceedWithMeasure (Lkotlin/jvm/functions/Function0;)V
}

public final class dev/shtanko/utils/MeasureMemKt {
	public static final fun measureMemFormatted (Ljava/lang/String;Lkotlin/jvm/functions/Function0;)Lkotlin/Pair;
	public static synthetic fun measureMemFormatted$default (Ljava/lang/String;Lkotlin/jvm/functions/Function0;ILjava/lang/Object;)Lkotlin/Pair;
	public static final fun measureMemWithResult (Lkotlin/jvm/functions/Function0;)Lkotlin/Pair;
}

public final class dev/shtanko/utils/MeasureTimeKt {
	public static final fun measureTime (Lkotlin/jvm/functions/Function0;Lkotlin/jvm/functions/Function1;)V
	public static final fun measureTime (ZLkotlin/jvm/functions/Function0;)Lkotlin/Pair;
	public static synthetic fun measureTime$default (ZLkotlin/jvm/functions/Function0;ILjava/lang/Object;)Lkotlin/Pair;
}

public final class dev/shtanko/utils/Quadruple : java/io/Serializable {
	public static final field Companion Ldev/shtanko/utils/Quadruple$Companion;
	public fun <init> (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
	public final fun component1 ()Ljava/lang/Object;
	public final fun component2 ()Ljava/lang/Object;
	public final fun component3 ()Ljava/lang/Object;
	public final fun component4 ()Ljava/lang/Object;
	public final fun copy (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ldev/shtanko/utils/Quadruple;
	public static synthetic fun copy$default (Ldev/shtanko/utils/Quadruple;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;ILjava/lang/Object;)Ldev/shtanko/utils/Quadruple;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getFirst ()Ljava/lang/Object;
	public final fun getFourth ()Ljava/lang/Object;
	public final fun getSecond ()Ljava/lang/Object;
	public final fun getThird ()Ljava/lang/Object;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/utils/Quadruple$Companion {
}

public final class dev/shtanko/utils/Quintuple : java/io/Serializable {
	public static final field Companion Ldev/shtanko/utils/Quintuple$Companion;
	public fun <init> (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
	public final fun component1 ()Ljava/lang/Object;
	public final fun component2 ()Ljava/lang/Object;
	public final fun component3 ()Ljava/lang/Object;
	public final fun component4 ()Ljava/lang/Object;
	public final fun component5 ()Ljava/lang/Object;
	public final fun copy (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ldev/shtanko/utils/Quintuple;
	public static synthetic fun copy$default (Ldev/shtanko/utils/Quintuple;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;ILjava/lang/Object;)Ldev/shtanko/utils/Quintuple;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getFifth ()Ljava/lang/Object;
	public final fun getFirst ()Ljava/lang/Object;
	public final fun getFourth ()Ljava/lang/Object;
	public final fun getSecond ()Ljava/lang/Object;
	public final fun getThird ()Ljava/lang/Object;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/shtanko/utils/Quintuple$Companion {
}

public final class dev/shtanko/utils/ResourcesKt {
	public static final fun readImageBytes (Ljava/lang/String;)[B
	public static final fun readJsonFromResource (Ljava/lang/String;)Ljava/lang/String;
}

public final class dev/shtanko/utils/SortKt {
	public static final fun maximum ([I)I
	public static final fun merge ([I[IIII)V
	public static final fun toRandomArray (I)[I
}

public final class dev/shtanko/utils/TuplesKt {
	public static final fun from (Ljava/util/List;)Ldev/shtanko/utils/Quadruple;
	public static final fun toList (Ldev/shtanko/utils/Quadruple;)Ljava/util/List;
	public static final fun toList (Ldev/shtanko/utils/Quintuple;)Ljava/util/List;
}

